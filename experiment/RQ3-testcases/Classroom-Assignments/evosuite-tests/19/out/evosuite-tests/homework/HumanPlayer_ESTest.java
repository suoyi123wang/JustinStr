/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 30 08:57:17 GMT 2022
 */

package homework;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import homework.Board;
import homework.HumanPlayer;
import homework.Stone;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HumanPlayer_ESTest extends HumanPlayer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HumanPlayer humanPlayer0 = new HumanPlayer(2, 2);
      Stone stone0 = humanPlayer0.parseStone("A40");
      assertEquals(1, stone0.getY());
      assertNotNull(stone0);
      assertEquals(40, stone0.getX());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HumanPlayer humanPlayer0 = new HumanPlayer(37722, 37722);
      // Undeclared exception!
      try { 
        humanPlayer0.parseStone("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HumanPlayer humanPlayer0 = new HumanPlayer(100, 100);
      // Undeclared exception!
      try { 
        humanPlayer0.parseStone("AaELSi<wC[x/ p");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"aELSi<wC[x/ p\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HumanPlayer humanPlayer0 = new HumanPlayer(574, 574);
      // Undeclared exception!
      try { 
        humanPlayer0.parseStone((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("homework.HumanPlayer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HumanPlayer humanPlayer0 = new HumanPlayer((-256), 0);
      Stone stone0 = humanPlayer0.parseStone("XMV`5vWeu-7g-");
      assertNull(stone0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HumanPlayer humanPlayer0 = new HumanPlayer(3557, 3557);
      Stone stone0 = humanPlayer0.parseStone(";T5AF/g");
      assertNull(stone0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Board board0 = new Board();
      HumanPlayer humanPlayer0 = new HumanPlayer(15, 15);
      // Undeclared exception!
      try { 
        humanPlayer0.nextStone(board0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }
}

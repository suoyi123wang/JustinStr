/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 30 08:34:04 GMT 2022
 */

package go;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import go.HumanPlayer;
import go.Stone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HumanPlayer_ESTest extends HumanPlayer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HumanPlayer humanPlayer0 = new HumanPlayer();
      Stone stone0 = humanPlayer0.getStone("?0", (-10));
      assertNull(stone0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HumanPlayer humanPlayer0 = new HumanPlayer("Black");
      Stone stone0 = humanPlayer0.getStone("@3", 3145);
      assertEquals(0, stone0.getY());
      assertEquals(3, stone0.getX());
      assertNotNull(stone0);
      assertEquals(3145, stone0.getColour());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HumanPlayer humanPlayer0 = new HumanPlayer("%@D3c}4Y18=m3fXt8B");
      Stone stone0 = humanPlayer0.getStone("K9", 0);
      assertEquals(0, stone0.getColour());
      assertNotNull(stone0);
      assertEquals(11, stone0.getY());
      assertEquals(9, stone0.getX());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HumanPlayer humanPlayer0 = new HumanPlayer();
      Stone stone0 = humanPlayer0.getStone("K9", (-10));
      assertEquals(11, stone0.getY());
      assertEquals((-10), stone0.getColour());
      assertNotNull(stone0);
      assertEquals(9, stone0.getX());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HumanPlayer humanPlayer0 = new HumanPlayer("%@D3c}4Y18=m3fXt8B");
      // Undeclared exception!
      humanPlayer0.getStone("P4_K:j>uO@/:y<", 0);
//      try {
//        humanPlayer0.getStone("P4_K:j>uO@/:y<", 0);
//        fail("Expecting exception: NumberFormatException");
//
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"4_K:j>uO@/:y<\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HumanPlayer humanPlayer0 = new HumanPlayer();
      // Undeclared exception!
      humanPlayer0.getStone((String) null, (-10));
//      try {
//        humanPlayer0.getStone((String) null, (-10));
//        fail("Expecting exception: NullPointerException");
//
//      } catch(NullPointerException e) {
//      }
  }

//  @Test(timeout = 4000)
//  public void test06()  throws Throwable  {
//      HumanPlayer humanPlayer0 = null;
//      try {
//        humanPlayer0 = new HumanPlayer((String) null);
//        fail("Expecting exception: NullPointerException");
//
//      } catch(NullPointerException e) {
//      }
//  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HumanPlayer humanPlayer0 = new HumanPlayer();
      Stone stone0 = humanPlayer0.getStone("K9", 1);
      assertEquals(1, stone0.getColour());
      assertEquals(9, stone0.getX());
      assertEquals(11, stone0.getY());
      assertNotNull(stone0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HumanPlayer humanPlayer0 = new HumanPlayer();
      Stone stone0 = humanPlayer0.getStone("l5", 1888);
      assertNull(stone0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HumanPlayer humanPlayer0 = new HumanPlayer(")5");
      Stone stone0 = humanPlayer0.getStone(")5", (-15));
      assertNull(stone0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HumanPlayer humanPlayer0 = new HumanPlayer();
      Stone stone0 = humanPlayer0.getStone("K79", (-1131782512));
      assertNull(stone0);
  }

//  @Test(timeout = 4000)
//  public void test11()  throws Throwable  {
//      HumanPlayer humanPlayer0 = new HumanPlayer("White");
//  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HumanPlayer humanPlayer0 = new HumanPlayer("Black");
      Stone stone0 = humanPlayer0.getStone("", 1061);
      assertNull(stone0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HumanPlayer humanPlayer0 = new HumanPlayer("O5");
      Stone stone0 = humanPlayer0.getStone("O5", 21);
      assertEquals(21, stone0.getColour());
      assertEquals(5, stone0.getX());
      assertNotNull(stone0);
      assertEquals(15, stone0.getY());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HumanPlayer humanPlayer0 = new HumanPlayer();
      Stone stone0 = humanPlayer0.getStone("@-2", 0);
      assertNull(stone0);
  }
}

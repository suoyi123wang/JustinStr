/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 30 08:35:32 GMT 2022
 */

package go;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import go.Player;
import go.Stone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player();
      Stone stone0 = player0.getStone("c0", (-6));
      assertNull(stone0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player();
      Stone stone0 = player0.getStone("@1", 1010);
      assertNotNull(stone0);
      assertEquals(0, stone0.getY());
      assertEquals(1, stone0.getX());
      assertEquals(1010, stone0.getColour());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player();
      Stone stone0 = player0.getStone("D8", 0);
      assertNotNull(stone0);
      assertEquals(8, stone0.getX());
      assertEquals(4, stone0.getY());
      assertEquals(0, stone0.getColour());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player();
      Stone stone0 = player0.getStone("D1", (-11));
      assertEquals(1, stone0.getX());
      assertEquals(4, stone0.getY());
      assertEquals((-11), stone0.getColour());
      assertNotNull(stone0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player("Weite");
      // Undeclared exception!
      player0.getStone("White", 479);
//      try {
//        player0.getStone("White", 479);
//        fail("Expecting exception: NumberFormatException");
//
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"hite\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player();
      // Undeclared exception!
      player0.getStone((String) null, (-1625829205));
//      try {
//        player0.getStone((String) null, (-1625829205));
//        fail("Expecting exception: NullPointerException");
//
//      } catch(NullPointerException e) {
//      }
  }

//  @Test(timeout = 4000)
//  public void test06()  throws Throwable  {
//      Player player0 = null;
//      try {
//        player0 = new Player((String) null);
//        fail("Expecting exception: NullPointerException");
//
//      } catch(NullPointerException e) {
//      }
//  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player();
      Stone stone0 = player0.getStone("O9", 132);
      assertEquals(15, stone0.getY());
      assertEquals(9, stone0.getX());
      assertEquals(132, stone0.getColour());
      assertNotNull(stone0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player("u8");
      Stone stone0 = player0.getStone("u8", 65);
      assertNull(stone0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player("u58");
      Stone stone0 = player0.getStone("u58", (-1653));
      assertNull(stone0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player("");
      Stone stone0 = player0.getStone("}-1", 2305);
      assertNull(stone0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player("5j~[rNfRH8");
      Stone stone0 = player0.getStone("", 1022);
      assertNull(stone0);
  }
//
//  @Test(timeout = 4000)
//  public void test12()  throws Throwable  {
//      Player player0 = new Player("White");
//  }
//
//  @Test(timeout = 4000)
//  public void test13()  throws Throwable  {
//      Player player0 = new Player("Black");
//  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player("Weite");
      Stone stone0 = player0.getStone("D1", 1);
      assertEquals(1, stone0.getColour());
      assertEquals(4, stone0.getY());
      assertNotNull(stone0);
      assertEquals(1, stone0.getX());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player();
      Stone stone0 = player0.getStone("&15", (-6254807));
      assertNull(stone0);
  }
}

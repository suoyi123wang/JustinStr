/*
 * This file was automatically generated by EvoSuite
 * Thu May 12 08:17:52 GMT 2022
 */

package com.mysql.cj.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mysql.cj.MysqlType;
import com.mysql.cj.exceptions.ExceptionInterceptor;
import com.mysql.cj.exceptions.ExceptionInterceptorChain;
import com.mysql.cj.log.StandardLogger;
import com.mysql.cj.util.TimeUtil;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.DateFormatSymbols;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoUnit;
import java.util.Calendar;
import java.util.Locale;
import java.util.Properties;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeUtil_ESTest extends TimeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Time time0 = new Time((-2081L));
      Boolean boolean0 = TimeUtil.hasFractionalSeconds(time0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      Time time0 = Time.valueOf(localTime0);
      Time time1 = TimeUtil.truncateFractionalSeconds(time0);
      assertEquals("14:21:21", time1.toString());
      assertNotSame(time1, time0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtil.formatNanos(999999999, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duration duration0 = Duration.ofMillis(5L);
      Duration duration1 = TimeUtil.adjustNanosPrecision(duration0, 6, false);
      assertTrue(duration1.equals((Object)duration0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Duration duration0 = Duration.ofDays(5);
      Duration duration1 = TimeUtil.adjustNanosPrecision(duration0, 5, false);
      assertTrue(duration1.equals((Object)duration0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Duration duration0 = Duration.ofNanos((-3953L));
      Duration duration1 = TimeUtil.adjustNanosPrecision(duration0, 6, true);
      assertFalse(duration1.equals((Object)duration0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      LocalTime localTime1 = TimeUtil.adjustNanosPrecision(localTime0, 6, false);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      LocalTime localTime1 = TimeUtil.adjustNanosPrecision(localTime0, 0, false);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      LocalTime localTime1 = TimeUtil.adjustNanosPrecision(localTime0, 1, true);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalDateTime localDateTime1 = TimeUtil.adjustNanosPrecision(localDateTime0, 3, false);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Timestamp timestamp0 = new Timestamp(806L);
      LocalDateTime localDateTime0 = timestamp0.toLocalDateTime();
      LocalDateTime localDateTime1 = TimeUtil.adjustNanosPrecision(localDateTime0, 6, true);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Timestamp timestamp0 = new Timestamp(10L);
      Timestamp timestamp1 = TimeUtil.adjustNanosPrecision(timestamp0, 6, false);
      assertNotSame(timestamp1, timestamp0);
      assertEquals("1970-01-01 00:00:00.01", timestamp1.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Timestamp timestamp0 = new Timestamp((-81L));
      Timestamp timestamp1 = TimeUtil.adjustNanosPrecision(timestamp0, 0, false);
      assertEquals("1969-12-31 23:59:59.0", timestamp1.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtil.getCanonicalTimeZone("'Bi", (ExceptionInterceptor) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtil.getCanonicalTimeZone("0S", (ExceptionInterceptor) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Timestamp timestamp0 = new Timestamp(0L);
      Timestamp timestamp1 = TimeUtil.truncateFractionalSeconds(timestamp0);
      assertEquals("1970-01-01 00:00:00.0", timestamp1.toString());
      assertNotSame(timestamp1, timestamp0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Timestamp timestamp0 = new Timestamp((-81L));
      Timestamp timestamp1 = TimeUtil.adjustNanosPrecision(timestamp0, 2, true);
      assertEquals("1969-12-31 23:59:59.92", timestamp1.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MysqlType mysqlType0 = MysqlType.TINYTEXT;
      // Undeclared exception!
      try { 
        TimeUtil.parseToDateTimeObject((String) null, mysqlType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtil.hasFractionalSeconds((Time) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.TimeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("-31:29", locale0);
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        TimeUtil.getSimpleDateFormat((SimpleDateFormat) mockSimpleDateFormat0, (String) null, timeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeUtil.GMT_TIMEZONE;
      // Undeclared exception!
      try { 
        TimeUtil.getSimpleDateFormat((SimpleDateFormat) mockSimpleDateFormat0, "Kc~$ H?lzTZH;NMf", (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'c'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtil.getSimpleDateFormat((String) null, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      // Undeclared exception!
      try { 
        TimeUtil.getSimpleDateFormat("e`t}Dxz720Y_sI", calendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'e'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtil.getDurationString((Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.TimeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtil.adjustNanosPrecision((LocalTime) null, 6, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.TimeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtil.adjustNanosPrecision((LocalDateTime) null, 0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.TimeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtil.adjustNanosPrecision((Duration) null, 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.TimeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtil.adjustNanosPrecision((Timestamp) null, 2, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.TimeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = TimeUtil.formatNanos(2236, 6, true);
      assertEquals("000002", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = TimeUtil.formatNanos(0, 2, false);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = TimeUtil.formatNanos(174, 0, false);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtil.formatNanos(3478, 3478, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtil.formatNanos(1690, (-1599), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtil.formatNanos((-1), 43, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtil.formatNanos(1000000001, 1000000001, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      String string0 = TimeUtil.getDurationString(duration0);
      assertEquals("0S", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Duration duration0 = Duration.ofMinutes((-15));
      String string0 = TimeUtil.getDurationString(duration0);
      assertEquals("-15:0", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds(2702113063278672L);
      String string0 = TimeUtil.getDurationString(duration0);
      assertEquals("750586962021:51:12", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MysqlType mysqlType0 = MysqlType.TIMESTAMP;
      Object object0 = TimeUtil.parseToDateTimeObject("-31:29", mysqlType0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MysqlType mysqlType0 = MysqlType.VARBINARY;
      // Undeclared exception!
      try { 
        TimeUtil.parseToDateTimeObject("!@--e*p.o[y!spI8", mysqlType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MysqlType mysqlType0 = MysqlType.VARCHAR;
      Object object0 = TimeUtil.parseToDateTimeObject("0 0", mysqlType0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MysqlType mysqlType0 = MysqlType.BIGINT_UNSIGNED;
      Object object0 = TimeUtil.parseToDateTimeObject("000101000000", mysqlType0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MysqlType mysqlType0 = MysqlType.LONGTEXT;
      // Undeclared exception!
      try { 
        TimeUtil.parseToDateTimeObject("00000101000000", mysqlType0);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '00000101000000' could not be parsed: Invalid value for YearOfEra (valid values 1 - 999999999/1000000000): 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MysqlType mysqlType0 = MysqlType.BIGINT;
      Object object0 = TimeUtil.parseToDateTimeObject("20", mysqlType0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MysqlType mysqlType0 = MysqlType.INT_UNSIGNED;
      Object object0 = TimeUtil.parseToDateTimeObject("0001", mysqlType0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MysqlType mysqlType0 = MysqlType.TIME;
      Object object0 = TimeUtil.parseToDateTimeObject("000101", mysqlType0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MysqlType mysqlType0 = MysqlType.UNKNOWN;
      Object object0 = TimeUtil.parseToDateTimeObject("0:11", mysqlType0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MysqlType mysqlType0 = MysqlType.DECIMAL;
      Object object0 = TimeUtil.parseToDateTimeObject("000101", mysqlType0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      SimpleDateFormat simpleDateFormat0 = TimeUtil.getSimpleDateFormat("HH:mm:ss.SSSSSSSSSXXX", calendar0);
      assertEquals("HH:mm:ss.SSSSSSSSSXXX", simpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleDateFormat simpleDateFormat0 = TimeUtil.getSimpleDateFormat("000101", (Calendar) null);
      assertEquals("000101", simpleDateFormat0.toPattern());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleDateFormat simpleDateFormat0 = TimeUtil.getSimpleDateFormat((SimpleDateFormat) null, "20", (TimeZone) null);
      assertEquals("20", simpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("000101", locale0);
      TimeZone timeZone0 = TimeZone.getDefault();
      SimpleDateFormat simpleDateFormat0 = TimeUtil.getSimpleDateFormat((SimpleDateFormat) mockSimpleDateFormat0, "000101", timeZone0);
      assertSame(simpleDateFormat0, mockSimpleDateFormat0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeUtil.GMT_TIMEZONE;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("31:29", dateFormatSymbols0);
      SimpleDateFormat simpleDateFormat0 = TimeUtil.getSimpleDateFormat((SimpleDateFormat) mockSimpleDateFormat0, "-31:29", (TimeZone) zoneInfo0);
      assertEquals("-31:29", simpleDateFormat0.toPattern());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Time time0 = new Time(18);
      Boolean boolean0 = TimeUtil.hasFractionalSeconds(time0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Time time0 = new Time(0);
      Boolean boolean0 = TimeUtil.hasFractionalSeconds(time0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = TimeUtil.formatNanos(2216, 6, false);
      assertEquals("000002", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = TimeUtil.formatNanos(2, 2, false);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = TimeUtil.formatNanos(0, 2);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Duration duration0 = Duration.ofNanos(0);
      Duration duration1 = TimeUtil.adjustNanosPrecision(duration0, 0, false);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      Duration duration0 = chronoUnit0.getDuration();
      // Undeclared exception!
      try { 
        TimeUtil.adjustNanosPrecision(duration0, 4, true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      // Undeclared exception!
      try { 
        TimeUtil.adjustNanosPrecision(duration0, 512, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      // Undeclared exception!
      try { 
        TimeUtil.adjustNanosPrecision(duration0, (-17), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      // Undeclared exception!
      try { 
        TimeUtil.adjustNanosPrecision(localTime0, 43, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Timestamp timestamp0 = new Timestamp((-1L));
      LocalDateTime localDateTime0 = timestamp0.toLocalDateTime();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      LocalTime localTime1 = TimeUtil.adjustNanosPrecision(localTime0, 0, true);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtil.adjustNanosPrecision((LocalTime) null, (-5), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalDateTime localDateTime1 = TimeUtil.adjustNanosPrecision(localDateTime0, 0, false);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      // Undeclared exception!
      try { 
        TimeUtil.adjustNanosPrecision(localDateTime0, 2144, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Timestamp timestamp0 = new Timestamp((-1L));
      LocalDateTime localDateTime0 = timestamp0.toLocalDateTime();
      LocalDateTime localDateTime1 = TimeUtil.adjustNanosPrecision(localDateTime0, 0, true);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtil.adjustNanosPrecision((LocalDateTime) null, (-1185), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Timestamp timestamp0 = new Timestamp((-1L));
      Timestamp timestamp1 = TimeUtil.adjustNanosPrecision(timestamp0, 0, true);
      assertEquals("1970-01-01 00:00:00.0", timestamp1.toString());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Timestamp timestamp0 = new Timestamp(7);
      // Undeclared exception!
      try { 
        TimeUtil.adjustNanosPrecision(timestamp0, 7, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtil.adjustNanosPrecision((Timestamp) null, (-943), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = TimeUtil.getCanonicalTimeZone("GMT", (ExceptionInterceptor) null);
      assertEquals("GMT", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Properties properties0 = System.getProperties();
      StandardLogger standardLogger0 = new StandardLogger("-0 0");
      ExceptionInterceptorChain exceptionInterceptorChain0 = new ExceptionInterceptorChain((String) null, properties0, standardLogger0);
      String string0 = TimeUtil.getCanonicalTimeZone("-0 0", exceptionInterceptorChain0);
      assertEquals("GMT-0 0", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtil.getCanonicalTimeZone("+*[{j%b@;E$/kFC%R/6", (ExceptionInterceptor) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtil.getCanonicalTimeZone("P", (ExceptionInterceptor) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String string0 = TimeUtil.getCanonicalTimeZone((String) null, (ExceptionInterceptor) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      long long0 = TimeUtil.getCurrentTimeNanosOrMillis();
      //  // Unstable assertion: assertEquals(2702116969365855L, long0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      boolean boolean0 = TimeUtil.nanoTimeAvailable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      TimeUtil timeUtil0 = new TimeUtil();
      assertTrue(timeUtil0.nanoTimeAvailable());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtil.truncateFractionalSeconds((Timestamp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.TimeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtil.truncateFractionalSeconds((Time) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.TimeUtil", e);
      }
  }
}

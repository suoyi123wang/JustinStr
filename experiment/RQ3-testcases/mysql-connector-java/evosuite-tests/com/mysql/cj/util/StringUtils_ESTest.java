/*
 * This file was automatically generated by EvoSuite
 * Thu May 12 08:21:18 GMT 2022
 */

package com.mysql.cj.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mysql.cj.ServerVersion;
import com.mysql.cj.util.SearchMode;
import com.mysql.cj.util.StringUtils;
import java.io.ByteArrayOutputStream;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)51;
      StringUtils.unquoteBytes(byteArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringUtils.padString("CALL", 4);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("$VALUES");
      StringUtils.appendAsHex(stringBuilder0, (-1391));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-124);
      StringBuilder stringBuilder0 = new StringBuilder((byte)16);
      StringUtils.appendAsHex(stringBuilder0, byteArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-93);
      // Undeclared exception!
      try { 
        StringUtils.hexEscapeBlock(byteArray0, 2637, (BiConsumer<Byte, Byte>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      BiConsumer<Byte, Byte> biConsumer0 = (BiConsumer<Byte, Byte>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      StringUtils.hexEscapeBlock(byteArray0, 0, biConsumer0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringUtils.indexOfQuoteDoubleAware("", "l,4{%2/7l,4{%2/7", 0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringUtils.getFullyQualifiedName("show warnings40bz<]EcfN~0MC<}0g_m_?show warnings40b.show warnings40bz<]EcfN~0MC<}0g_m_?show warnings40b", "uQ\"TllBT2Ga*22}", "show warnings40b", false);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)83;
      StringUtils.indexOf(byteArray0, 'D');
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)108;
      StringUtils.lastIndexOf(byteArray0, '9');
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringUtils.fixDecimalExponent("`M5mP=&E){");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringUtils.firstAlphaCharUc("00 00 00 00 00 00 00 00     . . . . . . . .\n00                          .\n", 57);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)16;
      StringUtils.toHexString(byteArray0, (byte)51);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = StringUtils.toHexString(byteArray0, (-1719304391));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)127;
      String string0 = StringUtils.dumpAsHex(byteArray0, 5);
      assertEquals("00 00 00 7f 00              . . . . .\n", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)32;
      String string0 = StringUtils.dumpAsHex(byteArray0, (byte)32);
      assertEquals("00 20 00 00                 .   . .\n", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)16;
      String string0 = StringUtils.dumpAsHex(byteArray0, (byte)19);
      assertEquals("00 00 10 00                 . . . .\n", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      String string0 = StringUtils.dumpAsHex(byteArray0, (-547535733));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = StringUtils.quoteBytes(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      StringUtils.escapeBytes(byteArrayOutputStream0, byteArray1);
      assertEquals(6, byteArrayOutputStream0.size());
      assertEquals("\\'\\0\\'", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.toString(byteArray0, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      String string0 = StringUtils.toString(byteArray0, (int) (byte)1, (int) (byte)1);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.toString(byteArray0, 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = StringUtils.toString(byteArray0);
      assertEquals("\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes((String) null, "");
      String string0 = StringUtils.toString(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = StringUtils.toAsciiString(byteArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = StringUtils.stripCommentsAndHints("", "", "", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = StringUtils.stringArrayToString(stringArray0, "", "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "{g'EoS                           ";
      stringArray0[1] = "ze!(`oJ+S/";
      stringArray0[2] = "{g'EoS";
      int int0 = StringUtils.startsWithIgnoreCaseAndWs("{g'EoS", stringArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "a,P");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Set<SearchMode> set0 = SearchMode.__MRK_WS;
      List<String> list0 = StringUtils.split("FjPR:d+1h[p8", "FjPR:d+1h[p8", "FjPR:d+1h[p8", "FjPR:d+1h[p8", false, set0);
      assertTrue(list0.contains("FjPR:d+1h[p8"));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      List<String> list0 = StringUtils.split("s", "s", "s", "s", false);
      assertTrue(list0.contains("s"));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Set<SearchMode> set0 = SearchMode.__COM_MYM_HNT_WS;
      List<String> list0 = StringUtils.split("W+Bv;De;:-*RD,Dd", "I5#p-#k", "<@dV~kQp &/_|6$'D&x", (String) null, "", false, set0);
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.sanitizeProcOrFuncName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.safeTrim((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = StringUtils.regionMatchesIgnoreCase("*t", 0, "*t");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = StringUtils.regionMatchesIgnoreCase("xa uw{jp-4m", (byte) (-93), "null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.padString("", (-2));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)54;
      int int0 = StringUtils.lastIndexOf(byteArray0, '6');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = StringUtils.isCharEqualIgnoreCase('v', 'v', 'B');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = StringUtils.indexOfQuoteDoubleAware("```__`", "`__", (-2004318069));
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Set<SearchMode> set0 = SearchMode.__NONE;
      int int0 = StringUtils.indexOfNextWsChar((byte)0, "E; zjtrDr<2a", "wm", "E; zjtrDr<2a", "wm", set0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Set<SearchMode> set0 = SearchMode.__BSE_COM_MYM_HNT_WS;
      int int0 = StringUtils.indexOfNextWsChar((byte)0, "__MRK_WS__MRK_WS", "__MRK_WS__MRK_WSYxUtgw^;__MRK_WS__MRK_WS.__MRK_WS__MRK_WS__MRK_WS__MRK_WS", "CommunicationsException.7", "J}&rW", set0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Set<SearchMode> set0 = SearchMode.__NONE;
      int int0 = StringUtils.indexOfNextNonWsChar(0, "2SqvK]h2&Nw", (String) null, "9YEQQ~v$#YfENRc", (String) null, set0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Set<SearchMode> set0 = SearchMode.__NONE;
      int int0 = StringUtils.indexOfNextNonWsChar(10, "E; zjtrDr<2a", "_", "vEojC", "DkIlD{Z|Gc", set0);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Set<SearchMode> set0 = SearchMode.__COM_MYM_HNT_WS;
      int int0 = StringUtils.indexOfNextNonWsChar(0, "", "-", "-", "string", set0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Set<SearchMode> set0 = SearchMode.__BSE_COM_MYM_HNT_WS;
      int int0 = StringUtils.indexOfNextAlphanumericChar(1, "[xOEWd8\"*:,d9!yv!", "[xOEWd8\"*:,d9!yv!", "w", "[xOEWd8\"*:,d9!yv!", set0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Set<SearchMode> set0 = SearchMode.__MRK_COM_MYM_HNT_WS;
      int int0 = StringUtils.indexOfNextAlphanumericChar(5, "CommunicationsException.7", "CommunicationsException.7", "CommunicationsException.7", "CommunicationsException.7", set0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase(";s|sD|V&t8Fw'Iql2{H", ";s|sD|V&t8Fw'Iql2{H");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("GJ%II->xgW0aRlwy#8!>j+YRD", "I");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "ud0kO%WTgpaY*wvObM";
      stringArray0[2] = "&G%d0j=G1";
      stringArray0[3] = "&G%d0j=G1";
      stringArray0[4] = "&G%d0j=G1";
      stringArray0[5] = "&<SG\"{XiIZ8";
      stringArray0[6] = "&G%d0j=G1";
      Set<SearchMode> set0 = SearchMode.__BSE_COM_MYM_HNT_WS;
      int int0 = StringUtils.indexOfIgnoreCase(4, "&G%d0j=G1", stringArray0, "ud0kO%WTgpaY*wvObM", "&G%d0j=G1", set0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Set<SearchMode> set0 = SearchMode.__NONE;
      int int0 = StringUtils.indexOfIgnoreCase(0, "j", "j", "j", "j", set0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Set<SearchMode> set0 = SearchMode.__BSE_MRK_COM_MYM_HNT_WS;
      int int0 = StringUtils.indexOfIgnoreCase(0, "CommunicationsException.12", "T0h~:0aK_~k94<xn", "T0h~:0aK_~k94<xn", "T0h~:0aK_~k94<xn", set0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Set<SearchMode> set0 = SearchMode.__BSE_COM_MYM_HNT_WS;
      int int0 = StringUtils.indexOfIgnoreCase(0, "j", "j", "do", "pGyN+*$SgDR", "pGyN+*$SgDR", set0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Set<SearchMode> set0 = SearchMode.__COM_MYM_HNT_WS;
      int int0 = StringUtils.indexOfIgnoreCase(1, ".8O8.8O8.8O8.8O8", ".8O8", ".8O8.8O8.8O8.8O8", "call_block_comments", "1B;#F", set0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedHashSet<SearchMode> linkedHashSet0 = new LinkedHashSet<SearchMode>();
      int int0 = StringUtils.indexOfIgnoreCase(19, "6u                 ", "'e+idD`NS's", "-", "'eidD`NS's", "6u                 ", (Set<SearchMode>) linkedHashSet0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      int int0 = StringUtils.indexOf(byteArray0, 'T');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[2];
      byte[] byteArray0 = StringUtils.getBytes(charArray0, (String) null);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[0];
      byte[] byteArray0 = StringUtils.getBytes(charArray0, (String) null);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[9];
      byte[] byteArray0 = StringUtils.getBytes(charArray0, 1, 1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[5];
      byte[] byteArray0 = StringUtils.getBytes(charArray0, (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[4];
      byte[] byteArray0 = StringUtils.getBytes(charArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[0];
      byte[] byteArray0 = StringUtils.getBytes(charArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes("5*PYdl", 0, 0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes("");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = StringUtils.fixDecimalExponent("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char char0 = StringUtils.firstNonWsCharUc("776l`]0yXB/!8f\"r", 0);
      assertEquals('7', char0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char char0 = StringUtils.firstNonWsCharUc("");
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char char0 = StringUtils.firstNonWsCharUc("0x");
      assertEquals('0', char0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("e~", "GJ%II->xgW0aRlwy#8>j+YR");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.unquoteBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        StringUtils.unquoteBytes(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.unQuoteIdentifier("s81v5lgHT}PQv%AK9#", "s81v5lgHT}PQv%AK9#");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.unQuoteIdentifier("yI<,X)9Q5pA9X", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "create table}\\u`x";
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, 316, 316, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, 0, 0, "CAL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, (-1967), (-1967));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toHexString((byte[]) null, 2731);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        StringUtils.toHexString(byteArray0, (-248));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toAsciiString((byte[]) null, 2955, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        StringUtils.toAsciiString(byteArray0, (-1), (-4177984));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        StringUtils.toAsciiString(byteArray0, (-257), 88);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -257
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toAsciiCharArray((byte[]) null, (-38), (-38));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        StringUtils.toAsciiCharArray(byteArray0, 33, 33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        StringUtils.stripEnclosure(byteArray0, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.stripCommentsAndHints("do", "]?9", "do", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal argument value ]?9 for openingMarkers and/or do for closingMarkers. These cannot be null and must have the same length.
         //
         verifyException("com.mysql.cj.util.StringInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.stringArrayToString((String[]) null, "$$valuesvaluesnull", "$$valuesvaluesnull", "$$valuesvaluesnull", "$$valuesvaluesnull");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.startsWithIgnoreCaseAndWs("0Xdp0V:", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.startsWithIgnoreCase((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.splitDBdotName("0", "0", (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal argument value null for openingMarkers and/or null for closingMarkers. These cannot be null and must have the same length.
         //
         verifyException("com.mysql.cj.util.StringInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.split("~rH_{^Vb0", "~rH_{^Vb0", true);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 3
         // ~rH_{^Vb0
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.split("___", "00                          .\n", "___", "___", false, (Set<SearchMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.split("", "", "SHOW WARNINGS", "", "", true, (Set<SearchMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.quoteIdentifier("`", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.quoteIdentifier("776l`]0yXB/!8f\"r", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.quoteIdentifier("-~x):>JShP", "$", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.quoteBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.padString((String) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.padString("0E|LkMK_g[ S", 1099);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.indexOfNextWsChar(96, "j", "j", "{CJWnFGsmR", "{CJWnFGsmR", (Set<SearchMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.indexOfNextNonWsChar(56, "", "5.7.2", "CommunicationsException.12", "", (Set<SearchMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.indexOfNextAlphanumericChar(556, "\"", "\"", "\"", "+P3*9]s", (Set<SearchMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        StringUtils.indexOfIgnoreCase(29, "__COM_MYM_HNyT_W", stringArray0, "__COM_MYM_HNyT_W", "__COM_MYM_HNyT_W", (Set<SearchMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.indexOfIgnoreCase(56, "VOID", "D+(H^adj w&?t<)`", "VOID", "com.mysql.cj.exceptions.ExceptionFactory", (Set<SearchMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Set<SearchMode> set0 = SearchMode.__BSE_COM_MYM_HNT_WS;
      // Undeclared exception!
      try { 
        StringUtils.indexOfIgnoreCase(1399, "pK+B{VE2'", " and ", " and ", "pK+B{VE2'", " and ", set0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The start position must must not be higher than the stop position.
         //
         verifyException("com.mysql.cj.util.StringInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.indexOfIgnoreCase((-2004355197), "com.mysql.cj.exceptions.ExceptionFactory", "com.mysql.cj.exceptions.ExceptionFactory");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      BiConsumer<Byte, Byte> biConsumer0 = (BiConsumer<Byte, Byte>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        StringUtils.hexEscapeBlock(byteArray0, 598, biConsumer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getBytesWrapped((String) null, 'd', 'd', (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getBytesNullTerminated("j", "j");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // j
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getBytesNullTerminated("#(", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getBytes((char[]) null, "V3T>vAFx<s9Z_M");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        StringUtils.getBytes(charArray0, "h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getBytes((char[]) null, 42, (-4101), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getBytes((char[]) null, 36, 36, "null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        StringUtils.getBytes(charArray0, 92, 1726);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getBytes("__MRK_COM_MYM_HNT_WS__MRK_COM_MYM_HNT_WS", 0, 0, "iVTPLcfipy,U\u0007");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getBytes("", 321, 321);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getBytes((String) null, 30, 97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getBytes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.fixDecimalExponent((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.firstNonWsCharUc(" ", (-521));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.escapeString((StringBuilder) null, "#2u)5[g", false, (CharsetEncoder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.escapeQuote(".", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.endsWithIgnoreCase((String) null, "L`^&Bb<G81");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.dumpAsHex((byte[]) null, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      // Undeclared exception!
      try { 
        StringUtils.dumpAsHex(byteArray0, (-3));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.canHandleAsServerPreparedStatementNoCache((String) null, (ServerVersion) null, false, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        StringUtils.appendAsHex(stringBuilder0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(102);
      CharsetEncoder charsetEncoder0 = mock(CharsetEncoder.class, new ViolatedAssumptionAnswer());
      StringUtils.escapeString(stringBuilder0, "XeLvn6z9o1SK__MRK_WS", false, charsetEncoder0);
      assertEquals("'XeLvn6z9o1SK__MRK_WS'", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        StringUtils.getBytes(charArray0, 77, 77, (String) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getBytes((char[]) null, 36, 36, "___");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ___
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = StringUtils.unQuoteIdentifier(", ", ", ");
      assertEquals(",", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = StringUtils.unQuoteIdentifier("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.quoteIdentifier("`M5mP=&E){", "`M5mP=&E){", true);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 8
         // `M5mP=&E){
         //         ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = StringUtils.quoteIdentifier(" ", " ", false);
      assertEquals("  ", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.quoteIdentifier("U~*wlmI-+':^]T?", "U~*wlmI-+':^]T?", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = StringUtils.quoteIdentifier((String) null, "oF;(/ykUfb\"u", false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = StringUtils.wildCompareIgnoreCase("7bwt|eV`", "\"Ab(ba");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      char[] charArray0 = StringUtils.toAsciiCharArray(byteArray0, 89, 0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = StringUtils.stripEnclosure(byteArray0, "XeLvn6z9o1SK", "DO");
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = StringUtils.stripEnclosure(byteArray0, "", "");
      String string0 = StringUtils.toAsciiString(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = StringUtils.stripEnclosure(byteArray0, "", "_N0");
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = StringUtils.stripEnclosure(byteArray0, "s", "");
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCaseAndWs("00 00 00 00 00 00           . . . . . .\n", "NRo", 19);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.startsWithIgnoreCaseAndWs("", (String) null, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCaseAndWs((String) null, "eFCKMDo!^>E#t-TqmWP", 65);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.startsWithIgnoreCaseAndWs("lu81i'UYSef)5;", "lu81i'UYSef)5;", (-1496));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCaseAndWs((String) null, (String) null, 26);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.startsWithIgnoreCaseAndNonAlphaNumeric(";^O1x$pJe?0+c.", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCaseAndNonAlphaNumeric((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCaseAndNonAlphaNumeric("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase(9, "9h=i[fW+wo*a`-c", "C");
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase(9, "GJ%II->xgW0aRlwy#8>j+YR", "e~");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase(1237, "", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((-548), "Z<5W", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase(34, (String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((int) (byte)41, "", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      List<String> list0 = StringUtils.split("__COM_M_HNyT^nW", "__COM_M_HNyT^nW", "__COM_M_HNyT^nW", "__COM_M_HNyT^nW", "__COM_M_HNyT^nW", false);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      LinkedHashSet<SearchMode> linkedHashSet0 = new LinkedHashSet<SearchMode>();
      // Undeclared exception!
      try { 
        StringUtils.indexOfIgnoreCase(3, "", "", "", "", (Set<SearchMode>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The start position must must not be higher than the stop position.
         //
         verifyException("com.mysql.cj.util.StringInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.indexOfIgnoreCase(13, ":wv", "2'1Wykh<`P)*=", ":wv", "\n\n", "2'1Wykh<`P)*=", (Set<SearchMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.regionMatchesIgnoreCase("", 92, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Set<SearchMode> set0 = SearchMode.__FULL;
      // Undeclared exception!
      try { 
        StringUtils.split("", "DO", "", "", "e=x#4wD1", true, set0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal argument value e=x#4wD1 for overridingMarkers. These cannot be null and must be a sub-set of openingMarkers .
         //
         verifyException("com.mysql.cj.util.StringInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)92;
      StringUtils.escapeBytes(byteArrayOutputStream0, byteArray0);
      assertEquals(16, byteArrayOutputStream0.size());
      assertEquals("\\0\\0\\0\\0\\\\\\0\\0\\0", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = StringUtils.quoteBytes(byteArray0);
      // Undeclared exception!
      try { 
        StringUtils.escapeBytes((ByteArrayOutputStream) null, byteArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)34;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1263);
      StringUtils.escapeBytes(byteArrayOutputStream0, byteArray0);
      assertEquals(6, byteArrayOutputStream0.size());
      assertEquals("\\0\\\"\\0", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)26;
      StringUtils.escapeBytes(byteArrayOutputStream0, byteArray0);
      assertEquals("\\0\\0\\0\\0\\Z", byteArrayOutputStream0.toString());
      assertEquals(10, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)13;
      StringUtils.escapeBytes(byteArrayOutputStream0, byteArray0);
      assertEquals(8, byteArrayOutputStream0.size());
      assertEquals("\\0\\0\\0\\r", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      StringUtils.escapeBytes(byteArrayOutputStream0, byteArray0);
      assertEquals("\\n\\0", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      StringUtils.escapeBytes(byteArrayOutputStream0, byteArray0);
      assertEquals("/\\0\\0\\0", byteArrayOutputStream0.toString());
      assertEquals(7, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringUtils.escapeString(stringBuilder0, "w='\"e/l(S=t`?p", false, (CharsetEncoder) null);
      assertEquals("'w=''\"e/l(S=t`?p'", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringUtils.escapeString(stringBuilder0, "\"", true, (CharsetEncoder) null);
      assertEquals("'\\\"'", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringUtils.escapeString(stringBuilder0, "00 00 00 00 00 00           . . . . . .\n", false, (CharsetEncoder) null);
      assertEquals("'00 00 00 00 00 00           . . . . . .\\n'", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("\u0010@1\uFFEA\u00001");
      StringUtils.escapeString(stringBuilder0, "\u0010@1\uFFEA\u00001", true, (CharsetEncoder) null);
      assertEquals("\u0010@1\uFFEA\u00001'\u0010@1\uFFEA\\01'", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes("}V !'XxI`");
      byte[] byteArray1 = StringUtils.quoteBytes(byteArray0);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = StringUtils.unquoteBytes(byteArray0);
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Set<SearchMode> set0 = SearchMode.__MRK_WS;
      LinkedList<SearchMode> linkedList0 = new LinkedList<SearchMode>(set0);
      String string0 = StringUtils.joinWithSerialComma(linkedList0);
      assertEquals("SKIP_BETWEEN_MARKERS and SKIP_WHITE_SPACE", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Set<SearchMode> set0 = SearchMode.__BSE_COM_MYM_HNT_WS;
      LinkedList<SearchMode> linkedList0 = new LinkedList<SearchMode>(set0);
      String string0 = StringUtils.joinWithSerialComma(linkedList0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.push((Object) null);
      // Undeclared exception!
      try { 
        StringUtils.joinWithSerialComma(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = StringUtils.joinWithSerialComma(linkedList0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.joinWithSerialComma((List<?>) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = StringUtils.hasWildcards("__BSE_COM_MYM_HNT_WS");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.stringArrayToString(stringArray0, ".W1I\"", ".W1I\"", ".W1I\"", stringArray0[0]);
      assertEquals(".W1I\"null.W1I\"nullnull", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        StringUtils.stringArrayToString(stringArray0, "h", "h", "h", "`__`");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = StringUtils.safeTrim("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = StringUtils.safeTrim("\"='\"e/r9S=t`?\"");
      assertEquals("\"='\"e/r9S=t`?\"", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      boolean boolean0 = StringUtils.isStrictlyNumeric("00");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      boolean boolean0 = StringUtils.isStrictlyNumeric("3q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean boolean0 = StringUtils.isStrictlyNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean boolean0 = StringUtils.isStrictlyNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = StringUtils.padString("", 4);
      assertEquals("    ", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ServerVersion serverVersion0 = ServerVersion.parseVersion("_");
      boolean boolean0 = StringUtils.canHandleAsServerPreparedStatementNoCache("/* ping */byaUlnD7)", serverVersion0, false, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ServerVersion serverVersion0 = new ServerVersion(97, 30, 4);
      boolean boolean0 = StringUtils.canHandleAsServerPreparedStatementNoCache("show warningsewg", serverVersion0, false, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ServerVersion serverVersion0 = ServerVersion.parseVersion("w^z#@$Vb(G");
      boolean boolean0 = StringUtils.canHandleAsServerPreparedStatementNoCache("show warnings", serverVersion0, false, true, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ServerVersion serverVersion0 = ServerVersion.parseVersion("set");
      boolean boolean0 = StringUtils.canHandleAsServerPreparedStatementNoCache("set", serverVersion0, false, false, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = "create table}\\u`x";
      ServerVersion serverVersion0 = ServerVersion.parseVersion("X&v/A*cF`tK");
      boolean boolean0 = StringUtils.canHandleAsServerPreparedStatementNoCache(string0, serverVersion0, false, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ServerVersion serverVersion0 = new ServerVersion(3216, 3216, (-1841207068));
      boolean boolean0 = StringUtils.canHandleAsServerPreparedStatementNoCache("xa ", serverVersion0, false, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      boolean boolean0 = StringUtils.canHandleAsServerPreparedStatementNoCache("CALL", (ServerVersion) null, true, true, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringUtils.appendAsHex(stringBuilder0, 46);
      assertEquals("0x2e", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("$VALUES");
      StringUtils.appendAsHex(stringBuilder0, 0);
      assertEquals("$VALUES0x0", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.appendAsHex((StringBuilder) null, 46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      StringUtils.hexEscapeBlock(byteArray0, (-1), (BiConsumer<Byte, Byte>) null);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean boolean0 = StringUtils.isValidIdChar('X');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      boolean boolean0 = StringUtils.isValidIdChar(',');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getBytes((String) null, 41, 34, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getBytes("J=NG}_F$", (-712), (-712), "J=NG}_F$");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = StringUtils.toString(byteArray0, (String) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, (-2156), (-2156), "C-ALL");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, (-1327), (-1327), "null");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, 31, (-638), (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = StringUtils.indexOfQuoteDoubleAware("j", "j", (byte) (-124));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      int int0 = StringUtils.indexOfQuoteDoubleAware("`M5mP=&E){", "`M5mP=&E){", 68);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int int0 = StringUtils.indexOfQuoteDoubleAware("", "", (-2605));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int int0 = StringUtils.indexOfQuoteDoubleAware("CommunicationsException.2", (String) null, (-2621));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int int0 = StringUtils.indexOfQuoteDoubleAware((String) null, (String) null, (-3160));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      List<String> list0 = StringUtils.splitDBdotName("show warnings40bshow warnings40b.show warnings40bz<]EcfN~0MC<}0g_m_?show warnings40b", "z<]EcfN~0MC<}0g_m_?", "show warnings40b", false);
      assertFalse(list0.contains("show warnings40b"));
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = StringUtils.unQuoteIdentifier("0U8%hnzu#NC-x1~E0U8%hnzu#NC-x1~E0U8%hnzu#NC-x1~E0U8%hnzu#NC-x1~E", "0U8%hnzu#NC-x1~E");
      assertEquals("0U8%hnzu#NC-x1~E", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = StringUtils.unQuoteIdentifier("`__`____", "`__");
      assertEquals("`__`____", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = StringUtils.unQuoteIdentifier((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = StringUtils.getFullyQualifiedName("show warnings40bshow warnings40b.show warnings40bz<]EcfN~0MC<}0g_m_?show warnings40b", "uQ\"TllBT2Ga*22}", "show warnings40b", false);
      assertEquals("show warnings40bshow warnings40bshow warnings40bshow warnings40bshow warnings40b.show warnings40bshow warnings40bz<]EcfN~0MC<}0g_m_?show warnings40bshow warnings40bshow warnings40b.show warnings40buQ\"TllBT2Ga*22}show warnings40b", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = StringUtils.quoteIdentifier("```__`", false);
      assertEquals("```__`", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.quoteIdentifier("`__", false);
      assertEquals("```__`", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getFullyQualifiedName("__COM_MYM_HNyT_W", "__COM_MYM_HNyT_W", "__COM_MYM_HNyT_W", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getFullyQualifiedName("00000000_010", "00000000_010", "|N8$y|", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.quoteIdentifier("", "", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.escapeQuote("/* ", "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.escapeQuote((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmptyOrWhitespaceOnly("__BSE_COM_MYM_HNT_WS");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmptyOrWhitespaceOnly("\n\n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmptyOrWhitespaceOnly("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmptyOrWhitespaceOnly((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getFullyQualifiedName((String) null, (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getFullyQualifiedName("&", "&", "LE4(c#/K", true);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 8
         // LE4(c#/K
         //         ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      List<String> list0 = StringUtils.splitDBdotName("2I1_fuB:w{:.Q]8>4", "2I1_fuB:w{:.Q]8>4", "3ZZA", true);
      assertFalse(list0.contains("3ZZA"));
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.splitDBdotName("/* ping */$VALUES", "/* ping */$VALUES", "/* ping */$VALUES", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      List<String> list0 = StringUtils.splitDBdotName("nrh6f0:GKi8`4hu)r", " ", " ", true);
      assertEquals(2, list0.size());
      assertTrue(list0.contains(" "));
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      List<String> list0 = StringUtils.splitDBdotName("%", "%", "%", true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      List<String> list0 = StringUtils.splitDBdotName((String) null, (String) null, (String) null, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.sanitizeProcOrFuncName("\"");
      assertEquals("\"", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.sanitizeProcOrFuncName("%");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.sanitizeProcOrFuncName((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.stripCommentsAndHints("YxUtgw^;", "YxUtgw^;", "YxUtgw^;", true);
      assertEquals("YxUtgw^;", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      boolean boolean0 = StringUtils.nullSafeEqual("z?6X;Pv{5$guWpIl", "z?6X;Pv{5$guWpIl");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      boolean boolean0 = StringUtils.nullSafeEqual((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      boolean boolean0 = StringUtils.nullSafeEqual((String) null, "2}W");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      boolean boolean0 = StringUtils.nullSafeEqual("?eLnPk7S;[s4TC$eM", "f:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      boolean boolean0 = StringUtils.isNullOrEmpty("com.mysql.cj.util.SearchMode");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      boolean boolean0 = StringUtils.isNullOrEmpty("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      boolean boolean0 = StringUtils.isNullOrEmpty((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)51;
      int int0 = StringUtils.indexOf(byteArray0, '3');
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      int int0 = StringUtils.indexOf((byte[]) null, 'e');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      int int0 = StringUtils.lastIndexOf(byteArray0, '\u0000');
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((byte[]) null, '[');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      boolean boolean0 = StringUtils.wildCompareIgnoreCase("__BSE_MRK_WS", "%E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      boolean boolean0 = StringUtils.wildCompareIgnoreCase("", "%}02f|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      boolean boolean0 = StringUtils.wildCompareIgnoreCase("/<~8$3clQ k.Y]%", "/<~8$3clQ k.Y]%");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      boolean boolean0 = StringUtils.wildCompareIgnoreCase("_", "_");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      boolean boolean0 = StringUtils.wildCompareIgnoreCase("HZs+D", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      boolean boolean0 = StringUtils.wildCompareIgnoreCase("XeLvn6z9o1SK__MRK_WS", "XeLvn6z9o1SK__MRK_WS");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      boolean boolean0 = StringUtils.wildCompareIgnoreCase("'", "__COM_MYM_HNyT_W");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      boolean boolean0 = StringUtils.wildCompareIgnoreCase("%", "%");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      boolean boolean0 = StringUtils.wildCompareIgnoreCase("w]j.}=>Fgx/e", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      boolean boolean0 = StringUtils.wildCompareIgnoreCase((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      boolean boolean0 = StringUtils.wildCompareIgnoreCase(" qmh %_mq2V", " qmh %_mq2V");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      boolean boolean0 = StringUtils.wildCompareIgnoreCase("", "UdDFXcgzni=2_bSX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toAsciiCharArray((byte[]) null, 13, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = StringUtils.escapeQuote("XeLvn6z9o1SK__MRK_WS", "XeLvn6z9o1SK__MRK_WS");
      assertEquals("XeLvn6z9o1SK__MRK_WSXeLvn6z9o1SK__MRK_WSeLvn6z9o1SK__MRK_WS", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "h";
      // Undeclared exception!
      try { 
        StringUtils.startsWithIgnoreCaseAndWs("X)^=6F", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String[] stringArray0 = new String[2];
      int int0 = StringUtils.startsWithIgnoreCaseAndWs((String) null, stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String[] stringArray0 = new String[0];
      int int0 = StringUtils.startsWithIgnoreCaseAndWs("VBA50/C1*Ens[ZAn'", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCaseAndWs(" qmh %_mq2V", " qmh %_mq2V");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCaseAndWs("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCaseAndNonAlphaNumeric((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.canHandleAsServerPreparedStatementNoCache((String) null, (ServerVersion) null, true, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The source string must not be null.
         //
         verifyException("com.mysql.cj.util.StringInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.escapeQuote("00000000_0100_4000_8200_000003000000", "%d.%d.%d");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      List<String> list0 = StringUtils.split("P", "P", false);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      List<String> list0 = StringUtils.split("^x`_", "^x`_", true);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      List<String> list0 = StringUtils.split((String) null, (String) null, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.split(";5r~,(!R0L^4V@{c!", (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      boolean boolean0 = StringUtils.isCharEqualIgnoreCase('K', 'K', 'K');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      boolean boolean0 = StringUtils.canHandleAsServerPreparedStatementNoCache("v)", (ServerVersion) null, true, false, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      boolean boolean0 = StringUtils.hasWildcards("GJ%II->xgW0aRlwy#8!>j+YRD");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      boolean boolean0 = StringUtils.hasWildcards("U~*wlmI-+':^]T?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase(4, "00000000_0100_4000_8200_000003000000", "0x0");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("\"", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesWrapped("776l`]0yXB/!8f\"r", 'U', 'U', (String) null);
      assertEquals(18, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getBytesWrapped(", anYd '", 'E', 'E', ", anYd '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes("p-Ab3", (String) null);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getBytes("%gI{", "%gI{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.fixDecimalExponent("ALLOW_BACKSLASH_E+SCAPE and ALLOW_BACKSLASH_ESCAPE");
      assertEquals("ALLOW_BACKSLASH_E+SCAPE and ALLOW_BACKSLASH_ESCAPE", string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = StringUtils.fixDecimalExponent("dp?e-%X;;(8N|m(qf");
      assertEquals("dp?e-%X;;(8N|m(qf", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.fixDecimalExponent("I='\"e/l9S=t`?p");
      assertEquals("I='\"e+/l9S=t`?p", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.fixDecimalExponent("__NONE");
      assertEquals("__NONE", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      char char0 = StringUtils.firstAlphaCharUc("setusz.i^0pk6", 6);
      assertEquals('I', char0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      char char0 = StringUtils.firstAlphaCharUc("x`", 64);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      char char0 = StringUtils.firstAlphaCharUc((String) null, (-1));
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.firstAlphaCharUc("9S8dZ\"dOPZq5Z", (-4708));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      char char0 = StringUtils.firstNonWsCharUc("^% UsKJnI;{", 2);
      assertEquals('U', char0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      char char0 = StringUtils.firstNonWsCharUc("H", (int) (byte)41);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      char char0 = StringUtils.firstNonWsCharUc((String) null, 116);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.escapeQuote("'6U^", "'");
      assertEquals("''6U^", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.escapeQuote("  ", " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      String string0 = StringUtils.toHexString(byteArray0, 4);
      assertEquals("46", string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      String string0 = StringUtils.dumpAsHex(byteArray0, 156);
      assertEquals("8d                          .\n", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      String string0 = StringUtils.dumpAsHex(byteArray0, 89);
      assertEquals("00 00 00 00 00 00 00 00     . . . . . . . .\n00 00 00 00 00 00 00 00     . . . . . . . .\n00 00 00 00 00              . . . . .\n", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.getUniqueSavepointId();
      assertEquals("00000000_0100_4000_8200_000003000000", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Set<SearchMode> set0 = SearchMode.__BSE_MRK_COM_MYM_HNT_WS;
      // Undeclared exception!
      try { 
        StringUtils.indexOfIgnoreCase((-257), "CommunicationsException.20", stringArray0, "CommunicationsException.20", "CommunicationsException.20", set0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The start position must be zero or a positive number.
         //
         verifyException("com.mysql.cj.util.StringInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes("__FULL", 1, 1);
      assertArrayEquals(new byte[] {(byte)95}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        StringUtils.getBytes(charArray0, "]{g5");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ]{g5
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Set<SearchMode> set0 = SearchMode.__MRK_WS;
      // Undeclared exception!
      try { 
        StringUtils.split("CALL", "Z Qdrl'j_p(1Zq", "CALL", "d!1tE1+{TaX}Je5vK", false, set0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal argument value CALL for openingMarkers and/or d!1tE1+{TaX}Je5vK for closingMarkers. These cannot be null and must have the same length.
         //
         verifyException("com.mysql.cj.util.StringInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getBytes((char[]) null, 45, 45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Set<SearchMode> set0 = SearchMode.__COM_MYM_HNT_WS;
      // Undeclared exception!
      try { 
        StringUtils.indexOfNextAlphanumericChar(39, "com.mysql.cj.util.StringUtils", "nLBR12vkx3[6W-*6", "com.mysql.cj.util.StringUtils", "com.mysql.cj.util.StringUtils", set0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The start position must must not be higher than the stop position.
         //
         verifyException("com.mysql.cj.util.StringInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getBytesNullTerminated("", "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Set<SearchMode> set0 = SearchMode.__BSE_MRK_WS;
      // Undeclared exception!
      try { 
        StringUtils.indexOfNextWsChar(46, "show warnings", "show warnings", "show warnings", "show warnings", set0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The start position must must not be higher than the stop position.
         //
         verifyException("com.mysql.cj.util.StringInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      char char0 = StringUtils.firstNonWsCharUc("callnginspector.2");
      assertEquals('C', char0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toAsciiString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      boolean boolean0 = StringUtils.canHandleAsServerPreparedStatementNoCache(";UrUkO=&h;#l4C)l<", (ServerVersion) null, true, true, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = StringUtils.quoteIdentifier((String) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("I", "I");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = StringUtils.toAsciiString(byteArray0, 1, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.split("CommunicationsException.ServerPacketTimingInfoNoRecvCommunicationsException.ServerPacketTimingInfoNoRecv", "CommunicationsException.ServerPacketTimingInfoNoRecvCommunicationsException.ServerPacketTimingInfoNoRecv", (String) null, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal argument value null for openingMarkers and/or null for closingMarkers. These cannot be null and must have the same length.
         //
         verifyException("com.mysql.cj.util.StringInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      int int0 = StringUtils.safeIntParse("com.mysql.cj.util.StringUtils");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, 0, 378);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Set<SearchMode> set0 = SearchMode.__NONE;
      // Undeclared exception!
      try { 
        StringUtils.indexOfNextNonWsChar(4, (String) null, (String) null, (String) null, (String) null, set0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The source string must not be null.
         //
         verifyException("com.mysql.cj.util.StringInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getBytes((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.cj.util.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase("i9m'dM8xmoSo\"Z7", "i9m'dM8xmoSo\"Z7");
      assertTrue(boolean0);
  }
}

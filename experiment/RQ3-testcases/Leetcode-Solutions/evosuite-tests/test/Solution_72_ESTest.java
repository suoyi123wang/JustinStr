/*
 * This file was automatically generated by EvoSuite
 * Mon May 02 11:11:09 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution_72_ESTest extends Solution_72_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Solution_72 solution_72_0 = new Solution_72();
      int int0 = solution_72_0.calc(100);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Solution_72 solution_72_0 = new Solution_72();
      int int0 = solution_72_0.calc(10);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Solution_72 solution_72_0 = new Solution_72();
      int int0 = solution_72_0.getLengthOfOptimalCompression("", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Solution_72 solution_72_0 = new Solution_72();
      // Undeclared exception!
      try { 
        solution_72_0.getLengthOfOptimalCompression((String) null, 97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Solution_72", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Solution_72 solution_72_0 = new Solution_72();
      // Undeclared exception!
      try { 
        solution_72_0.getLengthOfOptimalCompression("CQF,^d%M ", (-985));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Solution_72", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Solution_72 solution_72_0 = new Solution_72();
      // Undeclared exception!
      try { 
        solution_72_0.getLengthOfOptimalCompression("", (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("Solution_72", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Solution_72 solution_72_0 = new Solution_72();
      int int0 = solution_72_0.calc(0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Solution_72 solution_72_0 = new Solution_72();
      int int0 = solution_72_0.calc(1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Solution_72 solution_72_0 = new Solution_72();
      int int0 = solution_72_0.getLengthOfOptimalCompression("\"\"DDY:", 1);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Solution_72 solution_72_0 = new Solution_72();
      int int0 = solution_72_0.calc(3353);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Solution_72 solution_72_0 = new Solution_72();
      int int0 = solution_72_0.getLengthOfOptimalCompression("^BC5X_f7lO'5(", 4);
      assertEquals(9, int0);
  }
}

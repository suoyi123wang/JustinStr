/*
 * This file was automatically generated by EvoSuite
 * Mon May 02 08:41:02 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution_97_ESTest extends Solution_97_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Solution_97 solution_97_0 = new Solution_97();
      LinkedList<List<Integer>> linkedList0 = new LinkedList<List<Integer>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(15);
      linkedList1.addFirst(integer1);
      linkedList1.add(integer0);
      linkedList0.add((List<Integer>) linkedList1);
      String string0 = solution_97_0.smallestStringWithSwaps("?E1eOEu7=MZOS%HFN_,", linkedList0);
      assertEquals("?E1eOEu7=MZOS%HFN_,", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Solution_97 solution_97_0 = new Solution_97();
      LinkedList<List<Integer>> linkedList0 = new LinkedList<List<Integer>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.add((List<Integer>) linkedList1);
      Integer integer0 = new Integer(0);
      linkedList1.add(integer0);
      Integer integer1 = new Integer(1);
      linkedList1.add(integer1);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList2.add(integer0);
      linkedList2.add(integer0);
      linkedList0.add((List<Integer>) linkedList2);
      String string0 = solution_97_0.smallestStringWithSwaps("<;Xj9*z:", linkedList0);
      assertEquals(";<Xj9*z:", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Solution_97 solution_97_0 = new Solution_97();
      LinkedList<List<Integer>> linkedList0 = new LinkedList<List<Integer>>();
      String string0 = solution_97_0.smallestStringWithSwaps((String) null, linkedList0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Solution_97 solution_97_0 = new Solution_97();
      LinkedList<List<Integer>> linkedList0 = new LinkedList<List<Integer>>();
      String string0 = solution_97_0.smallestStringWithSwaps("", linkedList0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Solution_97 solution_97_0 = new Solution_97();
      // Undeclared exception!
      try { 
        solution_97_0.smallestStringWithSwaps("eT!`C^#6gUIkDDRZ", (List<List<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Solution_97", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Solution_97 solution_97_0 = new Solution_97();
      LinkedList<List<Integer>> linkedList0 = new LinkedList<List<Integer>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList1.add(integer0);
      linkedList1.add(integer0);
      linkedList0.add((List<Integer>) linkedList1);
      // Undeclared exception!
      try { 
        solution_97_0.smallestStringWithSwaps("", linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("Solution_97$UnionFind", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Solution_97 solution_97_0 = new Solution_97();
      LinkedList<List<Integer>> linkedList0 = new LinkedList<List<Integer>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.add((List<Integer>) linkedList1);
      // Undeclared exception!
      try { 
        solution_97_0.smallestStringWithSwaps("", linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }
}

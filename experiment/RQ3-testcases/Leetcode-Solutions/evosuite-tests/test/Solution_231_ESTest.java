/*
 * This file was automatically generated by EvoSuite
 * Mon May 02 10:04:50 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution_231_ESTest extends Solution_231_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Solution_231 solution_231_0 = new Solution_231();
      boolean boolean0 = solution_231_0.isAdditiveNumber("&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Solution_231 solution_231_0 = new Solution_231();
      String string0 = solution_231_0.stringAdd("XipbledoC%~TN", 721, (-1736), 48, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Solution_231 solution_231_0 = new Solution_231();
      // Undeclared exception!
      try { 
        solution_231_0.valid((-1), (-1), "Zt;n]YU.Zr|{n^Ij9W");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Solution_231 solution_231_0 = new Solution_231();
      // Undeclared exception!
      try { 
        solution_231_0.valid(0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Solution_231", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Solution_231 solution_231_0 = new Solution_231();
      // Undeclared exception!
      try { 
        solution_231_0.stringAdd("", 0, 0, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Solution_231 solution_231_0 = new Solution_231();
      // Undeclared exception!
      try { 
        solution_231_0.stringAdd((String) null, (-958), (-2593), (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Solution_231", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Solution_231 solution_231_0 = new Solution_231();
      // Undeclared exception!
      try { 
        solution_231_0.isAdditiveNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Solution_231", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Solution_231 solution_231_0 = new Solution_231();
      String string0 = solution_231_0.stringAdd("'!\u0005(>5fb*X'-B", 0, 0, 0, 10);
      assertEquals("/0'-)5090-9(", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Solution_231 solution_231_0 = new Solution_231();
      String string0 = solution_231_0.stringAdd("Solution_231", 0, 0, 0, 0);
      assertEquals("70", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Solution_231 solution_231_0 = new Solution_231();
      boolean boolean0 = solution_231_0.valid(0, (-1), "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Solution_231 solution_231_0 = new Solution_231();
      boolean boolean0 = solution_231_0.valid(0, 0, "&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Solution_231 solution_231_0 = new Solution_231();
      boolean boolean0 = solution_231_0.valid(0, 1, "/wC^|\"J<8~.K:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Solution_231 solution_231_0 = new Solution_231();
      // Undeclared exception!
      solution_231_0.valid(0, (-1), "@B(`p-X)Y5|v!WD|Pe");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Solution_231 solution_231_0 = new Solution_231();
      boolean boolean0 = solution_231_0.valid(0, 0, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Solution_231 solution_231_0 = new Solution_231();
      boolean boolean0 = solution_231_0.isAdditiveNumber("*93");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Solution_231 solution_231_0 = new Solution_231();
      boolean boolean0 = solution_231_0.isAdditiveNumber("009065");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Solution_231 solution_231_0 = new Solution_231();
      boolean boolean0 = solution_231_0.isAdditiveNumber("3E*0ZURzkaQ");
      assertFalse(boolean0);
  }
}

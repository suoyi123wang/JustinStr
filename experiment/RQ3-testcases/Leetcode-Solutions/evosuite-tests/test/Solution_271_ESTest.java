/*
 * This file was automatically generated by EvoSuite
 * Mon May 02 11:47:38 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution_271_ESTest extends Solution_271_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Solution_271 solution_271_0 = new Solution_271();
      boolean boolean0 = solution_271_0.isNumber("nh}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Solution_271 solution_271_0 = new Solution_271();
      boolean boolean0 = solution_271_0.isNumber("9 )Ig'Y8<s~U/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Solution_271 solution_271_0 = new Solution_271();
      solution_271_0.toCharType('0');
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Solution_271 solution_271_0 = new Solution_271();
      // Undeclared exception!
      try { 
        solution_271_0.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Solution_271", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Solution_271 solution_271_0 = new Solution_271();
      solution_271_0.toCharType('-');
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Solution_271 solution_271_0 = new Solution_271();
      solution_271_0.toCharType('D');
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Solution_271 solution_271_0 = new Solution_271();
      solution_271_0.toCharType('.');
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Solution_271 solution_271_0 = new Solution_271();
      solution_271_0.toCharType('E');
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Solution_271 solution_271_0 = new Solution_271();
      solution_271_0.toCharType('+');
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Solution_271 solution_271_0 = new Solution_271();
      solution_271_0.toCharType('e');
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Solution_271 solution_271_0 = new Solution_271();
      boolean boolean0 = solution_271_0.isNumber(".8");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Solution_271 solution_271_0 = new Solution_271();
      boolean boolean0 = solution_271_0.isNumber("5.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Solution_271 solution_271_0 = new Solution_271();
      boolean boolean0 = solution_271_0.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Solution_271 solution_271_0 = new Solution_271();
      boolean boolean0 = solution_271_0.isNumber("72");
      assertTrue(boolean0);
  }
}

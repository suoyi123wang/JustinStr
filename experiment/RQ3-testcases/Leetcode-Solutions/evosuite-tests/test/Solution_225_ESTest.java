/*
 * This file was automatically generated by EvoSuite
 * Mon May 02 09:37:14 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution_225_ESTest extends Solution_225_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Solution_225 solution_225_0 = new Solution_225();
      String string0 = solution_225_0.reverseVowels("u+");
      assertEquals("u+", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Solution_225 solution_225_0 = new Solution_225();
      char[] charArray0 = new char[3];
      solution_225_0.swap(charArray0, 1, 1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Solution_225 solution_225_0 = new Solution_225();
      String string0 = solution_225_0.reverseVowels("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Solution_225 solution_225_0 = new Solution_225();
      // Undeclared exception!
      try { 
        solution_225_0.swap((char[]) null, (-644), (-644));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Solution_225", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Solution_225 solution_225_0 = new Solution_225();
      // Undeclared exception!
      try { 
        solution_225_0.reverseVowels((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Solution_225", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Solution_225 solution_225_0 = new Solution_225();
      boolean boolean0 = solution_225_0.isVowel('o');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Solution_225 solution_225_0 = new Solution_225();
      boolean boolean0 = solution_225_0.isVowel('$');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Solution_225 solution_225_0 = new Solution_225();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        solution_225_0.swap(charArray0, 3691, 3691);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3691
         //
         verifyException("Solution_225", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Solution_225 solution_225_0 = new Solution_225();
      String string0 = solution_225_0.reverseVowels("dSXdRK%pts");
      assertEquals("dSXdRK%pts", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Solution_225 solution_225_0 = new Solution_225();
      String string0 = solution_225_0.reverseVowels("<`72`YNvaSF <i");
      assertEquals("<`72`YNviSF <a", string0);
  }
}

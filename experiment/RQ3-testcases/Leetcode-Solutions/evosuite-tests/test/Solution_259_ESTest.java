/*
 * This file was automatically generated by EvoSuite
 * Mon May 02 10:42:34 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution_259_ESTest extends Solution_259_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Solution_259 solution_259_0 = new Solution_259();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("<T2x8Oqrz");
      linkedList0.offer("<T2x8Oqru");
      List<List<String>> list0 = solution_259_0.findLadders("<T2x8Oqru", "<T2x8Oqru", linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Solution_259 solution_259_0 = new Solution_259();
      // Undeclared exception!
      try { 
        solution_259_0.findLadders(">Fow|*94G*TeBS", ">Fow|*94G*TeBS", (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Solution_259 solution_259_0 = new Solution_259();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<List<String>> list0 = solution_259_0.findLadders("", "4gu;R", linkedList0);
      linkedList0.add("4gu;R");
      hashMap0.put("", linkedList0);
      solution_259_0.dfs(hashMap0, linkedList0, "4gu;R", "", list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Solution_259 solution_259_0 = new Solution_259();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<List<String>> linkedList1 = new LinkedList<List<String>>();
      // Undeclared exception!
      try { 
        solution_259_0.dfs(hashMap0, linkedList0, "4gu;R", "", linkedList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Solution_259", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Solution_259 solution_259_0 = new Solution_259();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<List<String>> list0 = solution_259_0.findLadders("", "4gu;R", linkedList0);
      solution_259_0.dfs(hashMap0, linkedList0, "", "", list0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Solution_259 solution_259_0 = new Solution_259();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offer("<T2x8Oqru");
      linkedList0.add("<T2x8Oqrz");
      List<List<String>> list0 = solution_259_0.findLadders("<T2x8Oqrv", "<T2x8Oqru", linkedList0);
      assertEquals(1, list0.size());
  }
}

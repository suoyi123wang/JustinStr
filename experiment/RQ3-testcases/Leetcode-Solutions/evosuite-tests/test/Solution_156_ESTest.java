/*
 * This file was automatically generated by EvoSuite
 * Mon May 02 11:34:18 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution_156_ESTest extends Solution_156_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Solution_156 solution_156_0 = new Solution_156();
      List<Integer> list0 = solution_156_0.partitionLabels("zv");
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Solution_156 solution_156_0 = new Solution_156();
      List<Integer> list0 = solution_156_0.partitionLabels("");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Solution_156 solution_156_0 = new Solution_156();
      // Undeclared exception!
      try { 
        solution_156_0.partitionLabels((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Solution_156 solution_156_0 = new Solution_156();
      // Undeclared exception!
      try { 
        solution_156_0.partitionLabels("EP)=N");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Solution_156 solution_156_0 = new Solution_156();
      List<Integer> list0 = solution_156_0.partitionLabels("yy");
      assertEquals(1, list0.size());
  }
}

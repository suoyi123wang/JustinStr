/*
 * This file was automatically generated by EvoSuite
 * Mon May 02 09:49:02 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution_184_ESTest extends Solution_184_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Solution_184 solution_184_0 = new Solution_184();
      boolean boolean0 = solution_184_0.isValid("<- (nL:>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Solution_184 solution_184_0 = new Solution_184();
      boolean boolean0 = solution_184_0.isValid("<cA&BNx2bX?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Solution_184 solution_184_0 = new Solution_184();
      boolean boolean0 = solution_184_0.isValid("R{IVuPbGX+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Solution_184 solution_184_0 = new Solution_184();
      boolean boolean0 = solution_184_0.isValidCdata("%U[CDATA[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Solution_184 solution_184_0 = new Solution_184();
      boolean boolean0 = solution_184_0.isValidTagName("WAm;%F 9", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Solution_184 solution_184_0 = new Solution_184();
      // Undeclared exception!
      try { 
        solution_184_0.isValidTagName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Solution_184", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Solution_184 solution_184_0 = new Solution_184();
      // Undeclared exception!
      try { 
        solution_184_0.isValidCdata((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Solution_184", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Solution_184 solution_184_0 = new Solution_184();
      // Undeclared exception!
      try { 
        solution_184_0.isValid("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Solution_184 solution_184_0 = new Solution_184();
      // Undeclared exception!
      try { 
        solution_184_0.isValid((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Solution_184", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Solution_184 solution_184_0 = new Solution_184();
      Stack<String> stack0 = new Stack<String>();
      stack0.add("<!D>");
      solution_184_0.stack = stack0;
      boolean boolean0 = solution_184_0.isValid("<!D>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Solution_184 solution_184_0 = new Solution_184();
      boolean boolean0 = solution_184_0.isValid("<E>S>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Solution_184 solution_184_0 = new Solution_184();
      boolean boolean0 = solution_184_0.isValidTagName("O", false);
      Stack<String> stack0 = new Stack<String>();
      solution_184_0.stack = stack0;
      boolean boolean1 = solution_184_0.isValid("<- (nL:>");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Solution_184 solution_184_0 = new Solution_184();
      Stack<String> stack0 = solution_184_0.stack;
      stack0.add("</G>");
      boolean boolean0 = solution_184_0.isValid("</G>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Solution_184 solution_184_0 = new Solution_184();
      boolean boolean0 = solution_184_0.isValid("<Solution_18");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Solution_184 solution_184_0 = new Solution_184();
      boolean boolean0 = solution_184_0.isValid("((NAiW?]_L~|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Solution_184 solution_184_0 = new Solution_184();
      boolean boolean0 = solution_184_0.isValidCdata("[CDATA[");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Solution_184 solution_184_0 = new Solution_184();
      boolean boolean0 = solution_184_0.isValidCdata("=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Solution_184 solution_184_0 = new Solution_184();
      boolean boolean0 = solution_184_0.isValidTagName("R", false);
      assertTrue(boolean0);
      
      boolean boolean1 = solution_184_0.isValidTagName("R", true);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Solution_184 solution_184_0 = new Solution_184();
      Stack<String> stack0 = new Stack<String>();
      solution_184_0.stack = stack0;
      stack0.add("=");
      boolean boolean0 = solution_184_0.isValidTagName("R", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Solution_184 solution_184_0 = new Solution_184();
      boolean boolean0 = solution_184_0.isValidTagName("<Solution_18", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Solution_184 solution_184_0 = new Solution_184();
      boolean boolean0 = solution_184_0.isValidTagName("R", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Solution_184 solution_184_0 = new Solution_184();
      boolean boolean0 = solution_184_0.isValidTagName("", true);
      assertFalse(boolean0);
  }
}

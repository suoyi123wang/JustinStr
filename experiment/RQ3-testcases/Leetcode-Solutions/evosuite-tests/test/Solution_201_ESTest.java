/*
 * This file was automatically generated by EvoSuite
 * Mon May 02 08:45:51 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution_201_ESTest extends Solution_201_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Solution_201 solution_201_0 = new Solution_201();
      // Undeclared exception!
      try { 
        solution_201_0.licenseKeyFormatting((String) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Solution_201", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Solution_201 solution_201_0 = new Solution_201();
      // Undeclared exception!
      try { 
        solution_201_0.licenseKeyFormatting("d", 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Solution_201", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Solution_201 solution_201_0 = new Solution_201();
      String string0 = solution_201_0.licenseKeyFormatting("", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Solution_201 solution_201_0 = new Solution_201();
      String string0 = solution_201_0.licenseKeyFormatting("R|@SCi1`#V>f^", 1);
      assertEquals("R-|-@-S-C-I-1-`-#-V->-F-^", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Solution_201 solution_201_0 = new Solution_201();
      String string0 = solution_201_0.licenseKeyFormatting("0-7-T-%", (-579));
      assertEquals("07T%", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Solution_201 solution_201_0 = new Solution_201();
      String string0 = solution_201_0.licenseKeyFormatting(" >Plvc3]\"soE`{^", (-2294));
      assertEquals(" >PLVC3]\"SOE`{^", string0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon May 02 10:12:22 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution_47_ESTest extends Solution_47_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Solution_47 solution_47_0 = new Solution_47();
      int int0 = solution_47_0.countValidWords("k2 L4ve0:` `RR'<e*");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Solution_47 solution_47_0 = new Solution_47();
      // Undeclared exception!
      try { 
        solution_47_0.isValid((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Solution_47", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Solution_47 solution_47_0 = new Solution_47();
      // Undeclared exception!
      try { 
        solution_47_0.countValidWords((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Solution_47", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Solution_47 solution_47_0 = new Solution_47();
      boolean boolean0 = solution_47_0.isValid("!_PZVYhf39&YTPr^");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Solution_47 solution_47_0 = new Solution_47();
      boolean boolean0 = solution_47_0.isValid("\"Kad,}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Solution_47 solution_47_0 = new Solution_47();
      boolean boolean0 = solution_47_0.isValid("o_L.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Solution_47 solution_47_0 = new Solution_47();
      boolean boolean0 = solution_47_0.isValid("F-v|~SZ-np");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Solution_47 solution_47_0 = new Solution_47();
      boolean boolean0 = solution_47_0.isValid("-;rbxK>}A1+aTX@zcGJ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Solution_47 solution_47_0 = new Solution_47();
      int int0 = solution_47_0.countValidWords("f@x,Z@>ZbI7");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Solution_47 solution_47_0 = new Solution_47();
      boolean boolean0 = solution_47_0.isValid("LB(z`)t#nVx-.ZYO};");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Solution_47 solution_47_0 = new Solution_47();
      boolean boolean0 = solution_47_0.isValid("+{E<t&-9w0^A<xCtfne");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Solution_47 solution_47_0 = new Solution_47();
      boolean boolean0 = solution_47_0.isValid("BEJV/QBsf *%-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Solution_47 solution_47_0 = new Solution_47();
      boolean boolean0 = solution_47_0.isValid("Solution_47");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Solution_47 solution_47_0 = new Solution_47();
      int int0 = solution_47_0.countValidWords("PIN  ");
      assertEquals(1, int0);
  }
}

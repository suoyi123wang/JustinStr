/*
 * This file was automatically generated by EvoSuite
 * Mon May 02 10:01:58 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution_232_ESTest extends Solution_232_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Solution_232 solution_232_0 = new Solution_232();
      List<String> list0 = solution_232_0.removeInvalidParentheses("V3W(UE&()C)");
      assertTrue(list0.contains("V3W(UE&()C)"));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Solution_232 solution_232_0 = new Solution_232();
      // Undeclared exception!
      try { 
        solution_232_0.removeInvalidParentheses((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Solution_232", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Solution_232 solution_232_0 = new Solution_232();
      List<String> list0 = solution_232_0.removeInvalidParentheses("&Bc})X9(]!c ?;S@(");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Solution_232 solution_232_0 = new Solution_232();
      List<String> list0 = solution_232_0.removeInvalidParentheses("!P)LPE9#KO(Cr");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Solution_232 solution_232_0 = new Solution_232();
      List<String> list0 = solution_232_0.removeInvalidParentheses("2.i) d[RR }?,c,n");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Solution_232 solution_232_0 = new Solution_232();
      List<String> list0 = solution_232_0.removeInvalidParentheses("*j)1U([PUQ)");
      assertEquals(1, list0.size());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon May 02 09:59:42 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution_44_ESTest extends Solution_44_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Solution_44 solution_44_0 = new Solution_44();
      boolean boolean0 = solution_44_0.isFlipedString("1&NYDXv$8Hon", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Solution_44 solution_44_0 = new Solution_44();
      // Undeclared exception!
      try { 
        solution_44_0.isFlipedString((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Solution_44", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Solution_44 solution_44_0 = new Solution_44();
      boolean boolean0 = solution_44_0.isFlipedString("]^m6VVQyWiaTdz", "SxUh2%]A5M~$@Z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Solution_44 solution_44_0 = new Solution_44();
      boolean boolean0 = solution_44_0.isFlipedString("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Solution_44 solution_44_0 = new Solution_44();
      boolean boolean0 = solution_44_0.isFlipedString("", ",`}`m$0|v*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Solution_44 solution_44_0 = new Solution_44();
      boolean boolean0 = solution_44_0.isFlipedString("]^m6VVQ5WiaTdz", "]^m6VVQ5WiaTdz");
      assertTrue(boolean0);
  }
}

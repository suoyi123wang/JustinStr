/*
 * This file was automatically generated by EvoSuite
 * Mon May 02 09:36:09 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution_104_ESTest extends Solution_104_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Solution_104 solution_104_0 = new Solution_104();
      String string0 = solution_104_0.breakPalindrome("e~mi1b2U");
      assertEquals("a~mi1b2U", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Solution_104 solution_104_0 = new Solution_104();
      String string0 = solution_104_0.breakPalindrome("aS");
      assertEquals("ab", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Solution_104 solution_104_0 = new Solution_104();
      // Undeclared exception!
      try { 
        solution_104_0.breakPalindrome((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Solution_104", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Solution_104 solution_104_0 = new Solution_104();
      // Undeclared exception!
      try { 
        solution_104_0.breakPalindrome("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("Solution_104", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Solution_104 solution_104_0 = new Solution_104();
      String string0 = solution_104_0.breakPalindrome("aM>BMJ2,_j& Krbp");
      assertEquals("aa>BMJ2,_j& Krbp", string0);
  }
}

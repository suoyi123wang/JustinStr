/*
 * This file was automatically generated by EvoSuite
 * Mon May 02 09:50:06 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution_183_ESTest extends Solution_183_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Solution_183 solution_183_0 = new Solution_183();
      int int0 = solution_183_0.gcd(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Solution_183 solution_183_0 = new Solution_183();
      int int0 = solution_183_0.gcd(1698, 2918);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Solution_183 solution_183_0 = new Solution_183();
      // Undeclared exception!
      try { 
        solution_183_0.fractionAddition("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Solution_183 solution_183_0 = new Solution_183();
      // Undeclared exception!
      try { 
        solution_183_0.fractionAddition((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Solution_183", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Solution_183 solution_183_0 = new Solution_183();
      // Undeclared exception!
      try { 
        solution_183_0.fractionAddition("/");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("Solution_183", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Solution_183 solution_183_0 = new Solution_183();
      int int0 = solution_183_0.gcd((-1323), (-1323));
      assertEquals((-1323), int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Solution_183 solution_183_0 = new Solution_183();
      // Undeclared exception!
      try { 
        solution_183_0.fractionAddition("+3_|*3}}F%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3_|*3}}F%\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Solution_183 solution_183_0 = new Solution_183();
      String string0 = solution_183_0.fractionAddition("0/1");
      assertEquals("0/1", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Solution_183 solution_183_0 = new Solution_183();
      String string0 = solution_183_0.fractionAddition("-");
      assertEquals("0/1", string0);
  }
}

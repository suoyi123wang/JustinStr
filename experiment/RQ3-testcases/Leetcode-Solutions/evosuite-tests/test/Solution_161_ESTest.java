/*
 * This file was automatically generated by EvoSuite
 * Mon May 02 09:02:27 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution_161_ESTest extends Solution_161_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Solution_161 solution_161_0 = new Solution_161();
      List<String> list0 = solution_161_0.parse(" ");
      assertFalse(list0.contains(" "));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Solution_161 solution_161_0 = new Solution_161();
      int int0 = solution_161_0.evaluate_inner("/-SN26;");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Solution_161 solution_161_0 = new Solution_161();
      ArrayList<Map<String, Integer>> arrayList0 = solution_161_0.scope;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      arrayList0.add((Map<String, Integer>) hashMap0);
      Integer integer0 = new Integer((-226));
      hashMap0.put("Sq0aR|d :+W5aJicM", integer0);
      int int0 = solution_161_0.evaluate_inner("Sq0aR|d :+W5aJicM");
      assertEquals((-226), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Solution_161 solution_161_0 = new Solution_161();
      int int0 = solution_161_0.evaluate("0");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Solution_161 solution_161_0 = new Solution_161();
      int int0 = solution_161_0.evaluate("/-SN26;");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Solution_161 solution_161_0 = new Solution_161();
      ArrayList<Map<String, Integer>> arrayList0 = solution_161_0.scope;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-89047183));
      hashMap0.put("multlt!ultaddml6DhQPQX( dadeL']`^~", integer0);
      arrayList0.add((Map<String, Integer>) hashMap0);
      int int0 = solution_161_0.evaluate("multlt!ultaddml6DhQPQX( dadeL']`^~");
      assertEquals((-89047183), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Solution_161 solution_161_0 = new Solution_161();
      // Undeclared exception!
      try { 
        solution_161_0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Solution_161 solution_161_0 = new Solution_161();
      // Undeclared exception!
      solution_161_0.evaluate_inner((String) null);
//      try {
//        solution_161_0.evaluate_inner((String) null);
//        fail("Expecting exception: NullPointerException");
//
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("Solution_161", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Solution_161 solution_161_0 = new Solution_161();
      // Undeclared exception!
      try { 
        solution_161_0.evaluate("T%@Sz0XE=66");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0XE=6\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Solution_161 solution_161_0 = new Solution_161();
      // Undeclared exception!
      try { 
        solution_161_0.evaluate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Solution_161", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Solution_161 solution_161_0 = new Solution_161();
      // Undeclared exception!
      try { 
        solution_161_0.evaluate("_c;aO O");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Solution_161 solution_161_0 = new Solution_161();
      List<String> list0 = solution_161_0.parse("Zn:_>l)rR&L5dU-");
      assertTrue(list0.contains("Zn:_>l)rR&L5dU-"));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Solution_161 solution_161_0 = new Solution_161();
      List<String> list0 = solution_161_0.parse("multS@d(<eo >P%k1z_%T");
      assertTrue(list0.contains("multS@d(<eo >P%k1z_%T"));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Solution_161 solution_161_0 = new Solution_161();
      List<String> list0 = solution_161_0.parse("js:a");
      assertEquals(1, list0.size());
      assertTrue(list0.contains("js:a"));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Solution_161 solution_161_0 = new Solution_161();
      // Undeclared exception!
      solution_161_0.evaluate_inner("vc6 {:ZLf#0Y }@");
//      try {
//        solution_161_0.evaluate_inner("vc6 {:ZLf#0Y }@");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
//
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Solution_161 solution_161_0 = new Solution_161();
      // Undeclared exception!
      solution_161_0.evaluate_inner("Vaddaddaddaa:]_L.8-");
//      try {
//        solution_161_0.evaluate_inner("Vaddaddaddaa:]_L.8-");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
//
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Solution_161 solution_161_0 = new Solution_161();
      // Undeclared exception!
      solution_161_0.evaluate_inner("8x;]Cn.M$){:K`+");
//      try {
//        solution_161_0.evaluate_inner("8x;]Cn.M$){:K`+");
//        fail("Expecting exception: NumberFormatException");
//
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"8x;]Cn.M$){:K`+\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Solution_161 solution_161_0 = new Solution_161();
      // Undeclared exception!
      try { 
        solution_161_0.evaluate("`zA2O{= ?%i-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Solution_161 solution_161_0 = new Solution_161();
      // Undeclared exception!
      solution_161_0.evaluate_inner("Emultmultaddml6jhQPQX( dadeL']`^~C");

//      try {
//        solution_161_0.evaluate_inner("Emultmultaddml6jhQPQX( dadeL']`^~C");
//        fail("Expecting exception: StringIndexOutOfBoundsException");
//
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Solution_161 solution_161_0 = new Solution_161();
      ArrayList<Map<String, Integer>> arrayList0 = new ArrayList<Map<String, Integer>>();
      solution_161_0.scope = arrayList0;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put("multPQX( dadeL']", integer0);
      arrayList0.add((Map<String, Integer>) hashMap0);
      int int0 = solution_161_0.evaluate_inner("multPQX( dadeL']");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Solution_161 solution_161_0 = new Solution_161();
      // Undeclared exception!
      solution_161_0.evaluate_inner("-");

//      try {
//        solution_161_0.evaluate_inner("-");
//        fail("Expecting exception: NumberFormatException");
//
//      } catch(NumberFormatException e) {
//         //
//         // For input string: \"-\"
//         //
//         verifyException("java.lang.NumberFormatException", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Solution_161 solution_161_0 = new Solution_161();
      // Undeclared exception!
      solution_161_0.evaluate_inner("('d'R e");

//      try {
//        solution_161_0.evaluate_inner("('d'R e");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
//
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }
}

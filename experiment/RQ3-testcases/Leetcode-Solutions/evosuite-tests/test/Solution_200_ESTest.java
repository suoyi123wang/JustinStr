/*
 * This file was automatically generated by EvoSuite
 * Mon May 02 08:51:27 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution_200_ESTest extends Solution_200_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Solution_200 solution_200_0 = new Solution_200();
      // Undeclared exception!
      try { 
        solution_200_0.findMinStep((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Solution_200", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Solution_200 solution_200_0 = new Solution_200();
      // Undeclared exception!
      try { 
        solution_200_0.clean((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Solution_200 solution_200_0 = new Solution_200();
      String string0 = solution_200_0.clean("Solution_200");
      assertEquals("Solution_200", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Solution_200 solution_200_0 = new Solution_200();
      String string0 = solution_200_0.clean("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Solution_200 solution_200_0 = new Solution_200();
      int int0 = solution_200_0.findMinStep("#<>00", "#<>00");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Solution_200 solution_200_0 = new Solution_200();
      // Undeclared exception!
      solution_200_0.findMinStep("bVy*H7e';DU4$x+>", "H-TVtl, e%]qjXA_");
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Solution_200 solution_200_0 = new Solution_200();
      int int0 = solution_200_0.findMinStep("t", "State");
      assertEquals(2, int0);
  }
}

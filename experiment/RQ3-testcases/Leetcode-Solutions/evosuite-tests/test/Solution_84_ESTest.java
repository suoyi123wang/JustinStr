/*
 * This file was automatically generated by EvoSuite
 * Mon May 02 11:44:25 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution_84_ESTest extends Solution_84_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Solution_84 solution_84_0 = new Solution_84();
      String string0 = solution_84_0.entityParser("&");
      assertEquals("&", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Solution_84 solution_84_0 = new Solution_84();
      String string0 = solution_84_0.entityParser("&a&mp;");
      assertEquals("&a&mp;", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Solution_84 solution_84_0 = new Solution_84();
      String string0 = solution_84_0.entityParser("lA&~Y+&.vE)");
      assertEquals("lA&~Y+&.vE)", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Solution_84 solution_84_0 = new Solution_84();
      String string0 = solution_84_0.getCharacter("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Solution_84 solution_84_0 = new Solution_84();
      String string0 = solution_84_0.entityParser("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Solution_84 solution_84_0 = new Solution_84();
      // Undeclared exception!
      try { 
        solution_84_0.getCharacter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Solution_84", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Solution_84 solution_84_0 = new Solution_84();
      // Undeclared exception!
      try { 
        solution_84_0.entityParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Solution_84", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Solution_84 solution_84_0 = new Solution_84();
      String string0 = solution_84_0.getCharacter("&quot;");
      assertEquals("\"", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Solution_84 solution_84_0 = new Solution_84();
      String string0 = solution_84_0.getCharacter("&frasl;");
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Solution_84 solution_84_0 = new Solution_84();
      String string0 = solution_84_0.entityParser("&quot;");
      assertEquals("\"", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Solution_84 solution_84_0 = new Solution_84();
      String string0 = solution_84_0.getCharacter("&apos;");
      assertEquals("'", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Solution_84 solution_84_0 = new Solution_84();
      String string0 = solution_84_0.getCharacter("&amp;");
      assertEquals("&", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Solution_84 solution_84_0 = new Solution_84();
      String string0 = solution_84_0.getCharacter("&lt;");
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Solution_84 solution_84_0 = new Solution_84();
      String string0 = solution_84_0.getCharacter("&gt;");
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Solution_84 solution_84_0 = new Solution_84();
      String string0 = solution_84_0.entityParser("\"");
      assertEquals("\"", string0);
  }
}

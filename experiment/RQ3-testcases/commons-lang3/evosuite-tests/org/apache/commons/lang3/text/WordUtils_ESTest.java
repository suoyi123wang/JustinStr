/*
 * This file was automatically generated by EvoSuite
 * Thu May 12 08:17:00 GMT 2022
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.lang3.text.WordUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WordUtils_ESTest extends WordUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = WordUtils.wrap("NFQ7iL]U[|d", 1, "\b.*", true, "\b.*");
      assertEquals("N\b.*F\b.*Q\b.*7\b.*i\b.*L\b.*]\b.*U\b.*[\b.*|\b.*d", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = WordUtils.wrap("\b.*", 586, "\b.*", true, "\b.*");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = WordUtils.wrap((String) null, 1, "p", false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = WordUtils.wrap("", 1, "", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = WordUtils.wrap((String) null, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = WordUtils.wrap("", 1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = WordUtils.uncapitalize((String) null, charArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = WordUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = WordUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = WordUtils.initials((String) null, charArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = WordUtils.initials("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = WordUtils.capitalizeFully((String) null, charArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = WordUtils.capitalizeFully((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = WordUtils.capitalizeFully("\b.*");
      assertEquals("\b.*", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = WordUtils.capitalize("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = WordUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        WordUtils.wrap("{(<k]USSIEE\"spx:Eb", 101, "{(<k]USSIEE\"spx:Eb", false, "{(<k]USSIEE\"spx:Eb");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition
         // {(<k]USSIEE\"spx:Eb
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[15];
      charSequenceArray0[0] = (CharSequence) "HBt'WU)9z}kZGqF";
      // Undeclared exception!
      try { 
        WordUtils.containsAllWords("HBt'WU)9z}kZGqF", charSequenceArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 10
         // .*\\bHBt'WU)9z}kZGqF\\b.*
         //           ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = WordUtils.initials("U[", (char[]) null);
      assertEquals("U", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = WordUtils.initials("", (char[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[7] = '&';
      String string0 = WordUtils.uncapitalize("#VQT&Wu", charArray0);
      assertEquals("#VQT&wu", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = WordUtils.uncapitalize("a", (char[]) null);
      assertEquals("a", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = WordUtils.capitalizeFully("", (char[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = WordUtils.capitalizeFully(" ", (char[]) null);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[6] = 'k';
      String string0 = WordUtils.capitalize("8k]?`cfm", charArray0);
      assertEquals("8k]?`cfm", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = WordUtils.capitalize((String) null, charArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = WordUtils.capitalize("KC'?)'", (char[]) null);
      assertEquals("KC'?)'", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = WordUtils.wrap("{1M:o`N]KXk", 0, "b~b", true, "\b.*");
      assertEquals("{b~b1b~bMb~b:b~bob~b`b~bNb~b]b~bKb~bXb~bk", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      WordUtils.wrap("|BT7BwG", 1031, "|bt7bWg", true, "|BT7BwG");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = WordUtils.wrap("org.apache.commons.lang3.text.WordUtils", (-1166), (String) null, true, "'9TF/huB;QPdL");
      assertNotNull(string0);
      assertEquals("o\nr\ng\n.\na\np\na\nc\nh\ne\n.\nc\no\nm\nm\no\nn\ns\n.\nl\na\nn\ng\n3\n.\nt\ne\nx\nt\n.\nW\no\nr\nd\nU\nt\ni\nl\ns", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "JoApwfq$]";
      boolean boolean0 = WordUtils.containsAllWords("JoApwfq$]", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "|bt7bWg";
      charSequenceArray0[1] = (CharSequence) "|bt7bWg";
      charSequenceArray0[2] = (CharSequence) "|BT7BwG";
      charSequenceArray0[3] = (CharSequence) "|bt7bWg";
      charSequenceArray0[4] = (CharSequence) "|bt7bWg";
      charSequenceArray0[5] = (CharSequence) "|bt7bWg";
      charSequenceArray0[6] = (CharSequence) "|BT7BwG";
      charSequenceArray0[7] = (CharSequence) "|BT7BwG";
      boolean boolean0 = WordUtils.containsAllWords("|BT7BwG", charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      boolean boolean0 = WordUtils.containsAllWords("|BT7BwG", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = WordUtils.containsAllWords("borg\u0000apache\u0000commons\u0000lang3\u0000text\u0000WordUtilsb", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = WordUtils.containsAllWords("", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[9];
      String string0 = WordUtils.initials("bb', Is\nNeither Of\nType\nMap\u0000Entry\nNor An\nArraybb", charArray0);
      assertEquals("bE", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = WordUtils.initials("bb, Lengh: 0bb", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = WordUtils.initials((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = WordUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = WordUtils.swapCase("', is neither of type Map.Entry nor an Array");
      assertEquals("', IS NEITHER OF TYPE mAP.eNTRY NOR AN aRRAY", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = WordUtils.uncapitalize(" ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = WordUtils.uncapitalize("( g)KGl1VByrY", charArray0);
      assertEquals("( g)KGl1VByrY", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = WordUtils.uncapitalize("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = WordUtils.capitalizeFully(" ", charArray0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = WordUtils.capitalize("org.apache.commons.lang3.StringUtils", charArray0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = WordUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = WordUtils.capitalizeFully("bb', Is\nNeither Of\nType\nMap\u0000Entry\nNor An\nArraybb", charArray0);
      assertEquals("Bb', is\nneither of\ntype\nmap\u0000Entry\nnor an\narraybb", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = WordUtils.wrap("offset cannot be negative", Integer.MIN_VALUE, "", false, "");
      assertEquals("offsetcannotbenegative", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = WordUtils.wrap((String) null, (-3935), (String) null, true, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = WordUtils.initials("\b.*");
      assertEquals("\b", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      WordUtils wordUtils0 = new WordUtils();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = WordUtils.wrap("F", 7);
      assertEquals("F", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = WordUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = WordUtils.wrap("\b.*", 0, "\b.*", true);
      assertNotNull(string0);
      assertEquals("\b\b.*.\b.**", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = WordUtils.capitalizeFully("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = WordUtils.capitalize("Jopwf$]");
      assertEquals("Jopwf$]", string0);
  }
}

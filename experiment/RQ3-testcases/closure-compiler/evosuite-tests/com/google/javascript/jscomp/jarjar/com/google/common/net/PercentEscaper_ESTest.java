/*
 * This file was automatically generated by EvoSuite
 * Thu May 12 09:58:42 GMT 2022
 */

package com.google.javascript.jscomp.jarjar.com.google.common.net;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.jarjar.com.google.common.net.PercentEscaper;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PercentEscaper_ESTest extends PercentEscaper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PercentEscaper percentEscaper0 = new PercentEscaper("", true);
      char[] charArray0 = percentEscaper0.escape(2047);
      assertArrayEquals(new char[] {'%', 'D', 'F', '%', 'B', 'F'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PercentEscaper percentEscaper0 = new PercentEscaper("", false);
      char[] charArray0 = percentEscaper0.escape(127);
      assertArrayEquals(new char[] {'%', '7', 'F'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PercentEscaper percentEscaper0 = new PercentEscaper("", false);
      char[] charArray0 = percentEscaper0.escape(5);
      assertArrayEquals(new char[] {'%', '0', '5'}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PercentEscaper percentEscaper0 = new PercentEscaper("", false);
      String string0 = percentEscaper0.escape("5l~BhtyewPl!y61oym");
      assertEquals("5l%7EBhtyewPl%21y61oym", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PercentEscaper percentEscaper0 = new PercentEscaper("", false);
      String string0 = percentEscaper0.escape("UtvT4I[/0s.|r3]82");
      assertEquals("UtvT4I%5B%2F0s%2E%7Cr3%5D82", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PercentEscaper percentEscaper0 = new PercentEscaper("", false);
      int int0 = percentEscaper0.nextEscapeIndex("", 55296, 32);
      assertEquals(55296, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PercentEscaper percentEscaper0 = new PercentEscaper("", true);
      int int0 = percentEscaper0.nextEscapeIndex("", 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PercentEscaper percentEscaper0 = new PercentEscaper("", false);
      int int0 = percentEscaper0.nextEscapeIndex("", (-1), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PercentEscaper percentEscaper0 = new PercentEscaper("", false);
      // Undeclared exception!
      try { 
        percentEscaper0.nextEscapeIndex("", 32, 693);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PercentEscaper percentEscaper0 = new PercentEscaper("", true);
      // Undeclared exception!
      try { 
        percentEscaper0.nextEscapeIndex((CharSequence) null, 47, 47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PercentEscaper percentEscaper0 = new PercentEscaper("", true);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      // Undeclared exception!
      try { 
        percentEscaper0.nextEscapeIndex(charBuffer0, (-1678), 49);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PercentEscaper percentEscaper0 = new PercentEscaper("/", true);
      // Undeclared exception!
      try { 
        percentEscaper0.escape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PercentEscaper percentEscaper0 = new PercentEscaper("", false);
      // Undeclared exception!
      try { 
        percentEscaper0.escape((-465));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -465
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.net.PercentEscaper", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PercentEscaper percentEscaper0 = null;
      try {
        percentEscaper0 = new PercentEscaper((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PercentEscaper percentEscaper0 = new PercentEscaper("", true);
      char[] charArray0 = percentEscaper0.escape(32);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PercentEscaper percentEscaper0 = new PercentEscaper("", false);
      char[] charArray0 = percentEscaper0.escape(32);
      assertArrayEquals(new char[] {'%', '2', '0'}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PercentEscaper percentEscaper0 = new PercentEscaper(" ", false);
      // Undeclared exception!
      try { 
        percentEscaper0.escape(1114135);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid unicode character value 1114135
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.net.PercentEscaper", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PercentEscaper percentEscaper0 = new PercentEscaper("", true);
      char[] charArray0 = percentEscaper0.escape(1114111);
      assertEquals(12, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PercentEscaper percentEscaper0 = new PercentEscaper("", false);
      char[] charArray0 = percentEscaper0.escape(741);
      assertArrayEquals(new char[] {'%', 'C', 'B', '%', 'A', '5'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PercentEscaper percentEscaper0 = new PercentEscaper("", false);
      char[] charArray0 = percentEscaper0.escape(55296);
      assertArrayEquals(new char[] {'%', 'E', 'D', '%', 'A', '0', '%', '8', '0'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PercentEscaper percentEscaper0 = new PercentEscaper("/", true);
      char[] charArray0 = percentEscaper0.escape(53);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PercentEscaper percentEscaper0 = new PercentEscaper("", false);
      String string0 = percentEscaper0.escape("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PercentEscaper percentEscaper0 = null;
      try {
        percentEscaper0 = new PercentEscaper(" ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // plusForSpace cannot be specified when space is a 'safe' character
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.net.PercentEscaper", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PercentEscaper percentEscaper0 = null;
      try {
        percentEscaper0 = new PercentEscaper("plusForSpace cannot be specified when space is a 'safe' character", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Alphanumeric characters are always 'safe' and should not be explicitly specified
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.net.PercentEscaper", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PercentEscaper percentEscaper0 = new PercentEscaper("", false);
      String string0 = percentEscaper0.escape("38y{y-'tD[yF{");
      assertEquals("38y%7By%2D%27tD%5ByF%7B", string0);
  }
}

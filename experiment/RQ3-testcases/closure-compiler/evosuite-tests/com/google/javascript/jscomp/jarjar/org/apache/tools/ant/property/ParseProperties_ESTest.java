/*
 * This file was automatically generated by EvoSuite
 * Thu May 12 09:54:19 GMT 2022
 */

package com.google.javascript.jscomp.jarjar.org.apache.tools.ant.property;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.jarjar.org.apache.tools.ant.Project;
import com.google.javascript.jscomp.jarjar.org.apache.tools.ant.property.GetProperty;
import com.google.javascript.jscomp.jarjar.org.apache.tools.ant.property.ParseProperties;
import com.google.javascript.jscomp.jarjar.org.apache.tools.ant.property.PropertyExpander;
import com.google.javascript.jscomp.jarjar.org.apache.tools.ant.property.ResolvePropertyMap;
import java.text.ParsePosition;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ParseProperties_ESTest extends ParseProperties_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Project project0 = new Project();
      LinkedList<PropertyExpander> linkedList0 = new LinkedList<PropertyExpander>();
      GetProperty getProperty0 = mock(GetProperty.class, new ViolatedAssumptionAnswer());
      ParsePosition parsePosition0 = new ParsePosition(1);
      ParseProperties parseProperties0 = new ParseProperties(project0, linkedList0, getProperty0);
      Object object0 = parseProperties0.parseNextProperty("@", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Project project0 = new Project();
      LinkedList<PropertyExpander> linkedList0 = new LinkedList<PropertyExpander>();
      GetProperty getProperty0 = mock(GetProperty.class, new ViolatedAssumptionAnswer());
      ParseProperties parseProperties0 = new ParseProperties(project0, linkedList0, getProperty0);
      Project project1 = parseProperties0.getProject();
      assertFalse(project1.isKeepGoingMode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Project project0 = new Project();
      LinkedList<PropertyExpander> linkedList0 = new LinkedList<PropertyExpander>();
      PropertyExpander propertyExpander0 = mock(PropertyExpander.class, new ViolatedAssumptionAnswer());
      doReturn("@", "@", "@", "@", "@").when(propertyExpander0).parsePropertyName(anyString() , any(java.text.ParsePosition.class) , any(com.google.javascript.jscomp.jarjar.org.apache.tools.ant.property.ParseNextProperty.class));
      doReturn("@", "@", "@", "@", "@").when(propertyExpander0).toString();
      linkedList0.addFirst(propertyExpander0);
      Object object0 = new Object();
      GetProperty getProperty0 = mock(GetProperty.class, new ViolatedAssumptionAnswer());
      doReturn(project0, object0, "@", project0, linkedList0).when(getProperty0).getProperty(anyString());
      ResolvePropertyMap resolvePropertyMap0 = new ResolvePropertyMap(project0, getProperty0, linkedList0);
      ParseProperties parseProperties0 = new ParseProperties(project0, linkedList0, resolvePropertyMap0);
      // Undeclared exception!
      parseProperties0.parseProperties("@");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParseProperties parseProperties0 = new ParseProperties((Project) null, (Collection<PropertyExpander>) null, (GetProperty) null);
      // Undeclared exception!
      try { 
        parseProperties0.parseProperties("@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Project project0 = new Project();
      LinkedList<PropertyExpander> linkedList0 = new LinkedList<PropertyExpander>();
      ParseProperties parseProperties0 = new ParseProperties(project0, linkedList0, (GetProperty) null);
      ParsePosition parsePosition0 = new ParsePosition(4);
      // Undeclared exception!
      try { 
        parseProperties0.parseNextProperty((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Project project0 = new Project();
      LinkedList<PropertyExpander> linkedList0 = new LinkedList<PropertyExpander>();
      PropertyExpander propertyExpander0 = mock(PropertyExpander.class, new ViolatedAssumptionAnswer());
      doReturn("@").when(propertyExpander0).parsePropertyName(anyString() , any(java.text.ParsePosition.class) , any(com.google.javascript.jscomp.jarjar.org.apache.tools.ant.property.ParseNextProperty.class));
      linkedList0.addFirst(propertyExpander0);
      ResolvePropertyMap resolvePropertyMap0 = new ResolvePropertyMap(project0, (GetProperty) null, linkedList0);
      ParseProperties parseProperties0 = new ParseProperties(project0, linkedList0, resolvePropertyMap0);
      ParsePosition parsePosition0 = new ParsePosition((-2486));
      // Undeclared exception!
      try { 
        parseProperties0.parseNextProperty("DQ7BrOt", parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Project project0 = new Project();
      LinkedList<PropertyExpander> linkedList0 = new LinkedList<PropertyExpander>();
      linkedList0.add((PropertyExpander) null);
      ParseProperties parseProperties0 = new ParseProperties(project0, linkedList0, (GetProperty) null);
      // Undeclared exception!
      try { 
        parseProperties0.containsProperties("@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Project project0 = new Project();
      LinkedList<PropertyExpander> linkedList0 = new LinkedList<PropertyExpander>();
      PropertyExpander propertyExpander0 = mock(PropertyExpander.class, new ViolatedAssumptionAnswer());
      doReturn("@", "@", "@", "bHFn>b-!~++\"ODs", (String) null).when(propertyExpander0).parsePropertyName(anyString() , any(java.text.ParsePosition.class) , any(com.google.javascript.jscomp.jarjar.org.apache.tools.ant.property.ParseNextProperty.class));
      doReturn("@", (String) null, (String) null).when(propertyExpander0).toString();
      linkedList0.addFirst(propertyExpander0);
      Object object0 = new Object();
      GetProperty getProperty0 = mock(GetProperty.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, object0, project0, (Object) null).when(getProperty0).getProperty(anyString());
      ResolvePropertyMap resolvePropertyMap0 = new ResolvePropertyMap(project0, getProperty0, linkedList0);
      ParseProperties parseProperties0 = new ParseProperties(project0, linkedList0, resolvePropertyMap0);
      Map<String, Object> map0 = project0.getCopyOfReferences();
      resolvePropertyMap0.resolveAllProperties(map0, "@", false);
      parseProperties0.parseProperties("@");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Project project0 = new Project();
      LinkedList<PropertyExpander> linkedList0 = new LinkedList<PropertyExpander>();
      ParseProperties parseProperties0 = new ParseProperties(project0, linkedList0, (GetProperty) null);
      Object object0 = parseProperties0.parseProperties((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<PropertyExpander> linkedList0 = new LinkedList<PropertyExpander>();
      GetProperty getProperty0 = mock(GetProperty.class, new ViolatedAssumptionAnswer());
      ResolvePropertyMap resolvePropertyMap0 = new ResolvePropertyMap((Project) null, getProperty0, linkedList0);
      ParseProperties parseProperties0 = new ParseProperties((Project) null, linkedList0, resolvePropertyMap0);
      ParsePosition parsePosition0 = new ParsePosition(75);
      Object object0 = parseProperties0.parseNextProperty("", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Project project0 = new Project();
      LinkedList<PropertyExpander> linkedList0 = new LinkedList<PropertyExpander>();
      PropertyExpander propertyExpander0 = mock(PropertyExpander.class, new ViolatedAssumptionAnswer());
      doReturn("@").when(propertyExpander0).parsePropertyName(anyString() , any(java.text.ParsePosition.class) , any(com.google.javascript.jscomp.jarjar.org.apache.tools.ant.property.ParseNextProperty.class));
      linkedList0.addFirst(propertyExpander0);
      ParseProperties parseProperties0 = new ParseProperties(project0, linkedList0, (GetProperty) null);
      boolean boolean0 = parseProperties0.containsProperties("@");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<PropertyExpander> linkedList0 = new LinkedList<PropertyExpander>();
      GetProperty getProperty0 = mock(GetProperty.class, new ViolatedAssumptionAnswer());
      ResolvePropertyMap resolvePropertyMap0 = new ResolvePropertyMap((Project) null, getProperty0, linkedList0);
      ParseProperties parseProperties0 = new ParseProperties((Project) null, linkedList0, resolvePropertyMap0);
      boolean boolean0 = parseProperties0.containsProperties((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Project project0 = new Project();
      LinkedList<PropertyExpander> linkedList0 = new LinkedList<PropertyExpander>();
      ParseProperties parseProperties0 = new ParseProperties(project0, linkedList0, (GetProperty) null);
      Object object0 = parseProperties0.parseProperties("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Project project0 = new Project();
      LinkedList<PropertyExpander> linkedList0 = new LinkedList<PropertyExpander>();
      PropertyExpander propertyExpander0 = mock(PropertyExpander.class, new ViolatedAssumptionAnswer());
      doReturn("@", "@", "@", "bHFn>b-!~++\"ODs").when(propertyExpander0).parsePropertyName(anyString() , any(java.text.ParsePosition.class) , any(com.google.javascript.jscomp.jarjar.org.apache.tools.ant.property.ParseNextProperty.class));
      doReturn("@", (String) null, (String) null).when(propertyExpander0).toString();
      linkedList0.addFirst(propertyExpander0);
      Object object0 = new Object();
      GetProperty getProperty0 = mock(GetProperty.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, object0, project0, (Object) null).when(getProperty0).getProperty(anyString());
      ResolvePropertyMap resolvePropertyMap0 = new ResolvePropertyMap(project0, getProperty0, linkedList0);
      ParseProperties parseProperties0 = new ParseProperties(project0, linkedList0, resolvePropertyMap0);
      // Undeclared exception!
      try { 
        parseProperties0.parseProperties("@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<PropertyExpander> linkedList0 = new LinkedList<PropertyExpander>();
      ParseProperties parseProperties0 = new ParseProperties((Project) null, linkedList0, (GetProperty) null);
      Project project0 = parseProperties0.getProject();
      assertNull(project0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Project project0 = new Project();
      LinkedList<PropertyExpander> linkedList0 = new LinkedList<PropertyExpander>();
      GetProperty getProperty0 = mock(GetProperty.class, new ViolatedAssumptionAnswer());
      ResolvePropertyMap resolvePropertyMap0 = new ResolvePropertyMap(project0, getProperty0, linkedList0);
      ParseProperties parseProperties0 = new ParseProperties(project0, linkedList0, resolvePropertyMap0);
      Object object0 = parseProperties0.parseProperties("@");
      assertEquals("@", object0);
  }
}

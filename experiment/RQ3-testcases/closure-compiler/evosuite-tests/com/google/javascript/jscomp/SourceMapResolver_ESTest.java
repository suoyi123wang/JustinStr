/*
 * This file was automatically generated by EvoSuite
 * Thu May 12 10:04:48 GMT 2022
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceMapResolver;
import java.nio.file.InvalidPathException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SourceMapResolver_ESTest extends SourceMapResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SourceFile sourceFile0 = SourceMapResolver.getRelativePath("^pFq1{AUC`8R ::", "^pFq1{AUC`8R ::");
      assertEquals("^pFq1{AUC`8R ::", sourceFile0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromFile("com.google.javascript.jscomp.SourceMapResolver");
      SourceFile sourceFile1 = SourceMapResolver.extractSourceMap(sourceFile0, "com.google.javascript.jscomp.SourceMapResolver", false);
      assertNotSame(sourceFile0, sourceFile1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        SourceMapResolver.getRelativePath("\u0000", "\u0000");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        SourceMapResolver.getRelativePath((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        SourceMapResolver.getRelativePath("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        SourceMapResolver.extractSourceMap((SourceFile) null, "08.L\"1@^+}", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Sourcemap url was invalid: 08.L\"1@^+}
         //
         verifyException("com.google.javascript.jscomp.SourceMapResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        SourceMapResolver.extractSourceMap((SourceFile) null, "base64,", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.SourceMapResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SourceFile sourceFile0 = SourceMapResolver.extractSourceMap((SourceFile) null, "data:com.google.javascript.jscomp.jarjar.com.google.protobuf.DescriptorProtos$UninterpretedOption", false);
      assertNull(sourceFile0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SourceFile sourceFile0 = SourceMapResolver.extractSourceMap((SourceFile) null, "data:base64,", true);
      assertNull(sourceFile0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SourceFile sourceFile0 = SourceMapResolver.extractSourceMap((SourceFile) null, "data:checkedPow", true);
      assertNull(sourceFile0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SourceFile sourceFile0 = SourceMapResolver.extractSourceMap((SourceFile) null, "/", false);
      assertNull(sourceFile0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("data:data:base64,", "data:data:base64,");
      // Undeclared exception!
      try { 
        SourceMapResolver.extractSourceMap(sourceFile0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SourceMapResolver sourceMapResolver0 = new SourceMapResolver();
  }
}

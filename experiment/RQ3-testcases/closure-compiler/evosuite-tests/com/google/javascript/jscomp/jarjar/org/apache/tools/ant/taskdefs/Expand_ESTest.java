/*
 * This file was automatically generated by EvoSuite
 * Thu May 12 09:51:19 GMT 2022
 */

package com.google.javascript.jscomp.jarjar.org.apache.tools.ant.taskdefs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.jarjar.org.apache.tools.ant.taskdefs.Expand;
import com.google.javascript.jscomp.jarjar.org.apache.tools.ant.types.FileSet;
import com.google.javascript.jscomp.jarjar.org.apache.tools.ant.types.PatternSet;
import com.google.javascript.jscomp.jarjar.org.apache.tools.ant.types.ResourceCollection;
import com.google.javascript.jscomp.jarjar.org.apache.tools.ant.types.TarFileSet;
import com.google.javascript.jscomp.jarjar.org.apache.tools.ant.types.resources.FileResource;
import com.google.javascript.jscomp.jarjar.org.apache.tools.ant.util.CompositeMapper;
import com.google.javascript.jscomp.jarjar.org.apache.tools.ant.util.FileNameMapper;
import com.google.javascript.jscomp.jarjar.org.apache.tools.ant.util.FileUtils;
import com.google.javascript.jscomp.jarjar.org.apache.tools.ant.util.FlatFileNameMapper;
import com.google.javascript.jscomp.jarjar.org.apache.tools.ant.util.MergingMapper;
import com.google.javascript.jscomp.jarjar.org.apache.tools.ant.util.RegexpPatternMapper;
import com.google.javascript.jscomp.jarjar.org.apache.tools.ant.util.UnPackageNameMapper;
import com.google.javascript.jscomp.jarjar.org.apache.tools.zip.ZipEntry;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Date;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Expand_ESTest extends Expand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Expand expand0 = new Expand("");
      FileUtils fileUtils0 = FileUtils.getFileUtils();
      MockFile mockFile0 = new MockFile("=Osi`;(");
      File file0 = fileUtils0.resolveFile(mockFile0, "J/\"-Wbr");
      // Undeclared exception!
      try { 
        expand0.expandFile(fileUtils0, file0, mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to expand /home/wangmiaomiao/testData/findBugs/compiler/ssh/=Osi`;(/J/\"-Wbr as the file does not exist
         //
         verifyException("com.google.javascript.jscomp.jarjar.org.apache.tools.ant.taskdefs.Expand", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Expand expand0 = new Expand("R5|<k15g!j0}A");
      assertTrue(expand0.getScanForUnicodeExtraFields());
      
      expand0.internalSetScanForUnicodeExtraFields(false);
      assertFalse(expand0.getScanForUnicodeExtraFields());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Expand expand0 = new Expand();
      assertTrue(expand0.getScanForUnicodeExtraFields());
      
      expand0.setScanForUnicodeExtraFields(false);
      boolean boolean0 = expand0.getScanForUnicodeExtraFields();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Expand expand0 = new Expand();
      assertEquals("UTF8", expand0.getEncoding());
      
      expand0.setEncoding((String) null);
      expand0.getEncoding();
      assertTrue(expand0.getScanForUnicodeExtraFields());
      assertFalse(expand0.getFailOnEmptyArchive());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Expand expand0 = new Expand("");
      String string0 = expand0.getEncoding();
      assertFalse(expand0.getFailOnEmptyArchive());
      assertTrue(expand0.getScanForUnicodeExtraFields());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Expand expand0 = new Expand();
      expand0.setAllowFilesToEscapeDest(true);
      Boolean boolean0 = expand0.getAllowFilesToEscapeDest();
      assertTrue(boolean0);
      assertFalse(expand0.getFailOnEmptyArchive());
      assertTrue(expand0.getScanForUnicodeExtraFields());
      assertEquals("UTF8", expand0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Expand expand0 = new Expand();
      expand0.setAllowFilesToEscapeDest(false);
      Boolean boolean0 = expand0.getAllowFilesToEscapeDest();
      assertTrue(expand0.getScanForUnicodeExtraFields());
      assertFalse(boolean0);
      assertFalse(expand0.getFailOnEmptyArchive());
      assertEquals("UTF8", expand0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Expand expand0 = new Expand();
      MockFile mockFile0 = new MockFile("native-encoding");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockDate mockDate0 = new MockDate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("native-encoding");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileUtils fileUtils0 = FileUtils.getFileUtils();
      UnPackageNameMapper unPackageNameMapper0 = new UnPackageNameMapper();
      try { 
        expand0.extractFile(fileUtils0, mockFile0, mockFile0, pipedInputStream0, "Cannot define more than one mapper", mockDate0, false, unPackageNameMapper0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Expand expand0 = new Expand();
      File file0 = MockFile.createTempFile("Cannot define more than one mapper", "native-encoding");
      expand0.internalSetEncoding("'X9C&U2,gY*gCV-");
      FileUtils fileUtils0 = FileUtils.getFileUtils();
      // Undeclared exception!
      try { 
        expand0.expandFile(fileUtils0, file0, file0);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 'X9C&U2,gY*gCV-
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Expand expand0 = new Expand();
      FileUtils fileUtils0 = FileUtils.getFileUtils();
      // Undeclared exception!
      try { 
        expand0.expandFile(fileUtils0, (File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.org.apache.tools.ant.taskdefs.Expand", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Expand expand0 = new Expand("\"~F4e$mXD~");
      expand0.createMapper();
      MergingMapper mergingMapper0 = new MergingMapper((String) null);
      // Undeclared exception!
      try { 
        expand0.add((FileNameMapper) mergingMapper0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot define more than one mapper
         //
         verifyException("com.google.javascript.jscomp.jarjar.org.apache.tools.ant.taskdefs.Expand", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Expand expand0 = new Expand();
      MockFile mockFile0 = new MockFile("Cannot define more than one mapper", "native-encoding");
      expand0.setDest(mockFile0);
      TarFileSet tarFileSet0 = new TarFileSet();
      expand0.addFileset(tarFileSet0);
      try { 
        expand0.execute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No directory specified for TarFileSet.
         //
         verifyException("com.google.javascript.jscomp.jarjar.org.apache.tools.ant.types.AbstractFileSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Expand expand0 = new Expand();
      FileSet fileSet0 = new FileSet();
      expand0.addFileset(fileSet0);
      try { 
        expand0.execute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Dest attribute must be specified
         //
         verifyException("com.google.javascript.jscomp.jarjar.org.apache.tools.ant.taskdefs.Expand", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Expand expand0 = new Expand();
      expand0.add((ResourceCollection) null);
      assertEquals("UTF8", expand0.getEncoding());
      assertTrue(expand0.getScanForUnicodeExtraFields());
      assertFalse(expand0.getFailOnEmptyArchive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Expand expand0 = new Expand();
      expand0.getAllowFilesToEscapeDest();
      assertEquals("UTF8", expand0.getEncoding());
      assertFalse(expand0.getFailOnEmptyArchive());
      assertTrue(expand0.getScanForUnicodeExtraFields());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Expand expand0 = new Expand();
      assertEquals("UTF8", expand0.getEncoding());
      
      expand0.internalSetEncoding("native-encoding");
      assertTrue(expand0.getScanForUnicodeExtraFields());
      assertFalse(expand0.getFailOnEmptyArchive());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Expand expand0 = new Expand();
      expand0.createMapper();
      try { 
        expand0.createMapper();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot define more than one mapper
         //
         verifyException("com.google.javascript.jscomp.jarjar.org.apache.tools.ant.taskdefs.Expand", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Expand expand0 = new Expand();
          MockFile mockFile0 = new MockFile("native-encoding");
          PipedInputStream pipedInputStream0 = new PipedInputStream();
          MockDate mockDate0 = new MockDate();
          FileUtils fileUtils0 = FileUtils.getFileUtils();
          expand0.setOverwrite(false);
          FileNameMapper fileNameMapper0 = expand0.getMapper();
          expand0.extractFile(fileUtils0, mockFile0, mockFile0, pipedInputStream0, "/LVT`9L'fjb}", mockDate0, true, fileNameMapper0);
          MockDate mockDate1 = new MockDate(536, 536, 536);
          // Undeclared exception!
          try { 
            expand0.extractFile(fileUtils0, mockFile0, mockFile0, pipedInputStream0, "/LVT`9L'fjb}", mockDate1, false, fileNameMapper0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/wangmiaomiao/testData/findBugs/compiler/ssh/native-encoding/LVT`9L'fjb}\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // com.google.javascript.jscomp.jarjar.org.apache.tools.ant.taskdefs.Expand.extractFile(Expand.java:361)
             // sun.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Expand expand0 = new Expand();
      MockFile mockFile0 = new MockFile("native-encoding");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockDate mockDate0 = new MockDate();
      FileUtils fileUtils0 = FileUtils.getFileUtils();
      expand0.setOverwrite(false);
      FileNameMapper fileNameMapper0 = expand0.getMapper();
      expand0.extractFile(fileUtils0, mockFile0, mockFile0, pipedInputStream0, "||", mockDate0, true, fileNameMapper0);
      expand0.extractFile(fileUtils0, mockFile0, mockFile0, pipedInputStream0, "||", mockDate0, true, fileNameMapper0);
      assertEquals("UTF8", expand0.getEncoding());
      assertFalse(expand0.getFailOnEmptyArchive());
      assertTrue(expand0.getScanForUnicodeExtraFields());
      assertTrue(mockFile0.canWrite());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Expand expand0 = new Expand();
          FileUtils fileUtils0 = FileUtils.getFileUtils();
          MockFile mockFile0 = new MockFile("/LVhB`9L'fjb}", "J(uR=\"s-e&?");
          Hashtable<ZipEntry, PipedInputStream> hashtable0 = new Hashtable<ZipEntry, PipedInputStream>();
          Enumeration<PipedInputStream> enumeration0 = hashtable0.elements();
          SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
          MockDate mockDate0 = new MockDate(16877, 16877, 16877);
          MergingMapper mergingMapper0 = new MergingMapper("basedir");
          // Undeclared exception!
          try { 
            expand0.extractFile(fileUtils0, mockFile0, mockFile0, sequenceInputStream0, "basedir", mockDate0, false, mergingMapper0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/LVhB`9L'fjb}/J(uR=\"s-e&?/basedir\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // com.google.javascript.jscomp.jarjar.org.apache.tools.ant.taskdefs.Expand.extractFile(Expand.java:361)
             // sun.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Expand expand0 = new Expand();
      expand0.setAllowFilesToEscapeDest(true);
      MockDate mockDate0 = new MockDate(2, 2, 1, 3, 33188);
      // Undeclared exception!
      try { 
        expand0.extractFile((FileUtils) null, (File) null, (File) null, (InputStream) null, ";M:z+!Zv0,gLt`>\"9", mockDate0, true, (FileNameMapper) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.org.apache.tools.ant.taskdefs.Expand", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Expand expand0 = new Expand();
      MockDate mockDate0 = new MockDate();
      MergingMapper mergingMapper0 = new MergingMapper("Cannot define more than one mapper");
      FileUtils fileUtils0 = FileUtils.getFileUtils();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      expand0.setStripAbsolutePathSpec(false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        expand0.extractFile(fileUtils0, (File) null, (File) null, pipedInputStream0, "]", mockDate0, false, mergingMapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.org.apache.tools.ant.util.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Expand expand0 = new Expand();
      File file0 = MockFile.createTempFile("*n(c@2%1|VN", "native-encoding");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      MockDate mockDate0 = new MockDate();
      MergingMapper mergingMapper0 = new MergingMapper();
      // Undeclared exception!
      try { 
        expand0.extractFile((FileUtils) null, file0, file0, mockFileInputStream0, " Z163E1e.1<bZ)'", mockDate0, true, mergingMapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.org.apache.tools.ant.taskdefs.Expand", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Expand expand0 = new Expand();
          MockFile mockFile0 = new MockFile("Cannot define more than one mapper");
          PipedInputStream pipedInputStream0 = new PipedInputStream();
          MockDate mockDate0 = new MockDate();
          FileUtils fileUtils0 = FileUtils.getFileUtils();
          UnPackageNameMapper unPackageNameMapper0 = new UnPackageNameMapper();
          // Undeclared exception!
          try { 
            expand0.extractFile(fileUtils0, mockFile0, mockFile0, pipedInputStream0, "", mockDate0, false, unPackageNameMapper0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/wangmiaomiao/testData/findBugs/compiler/ssh/Cannot define more than one mapper\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // com.google.javascript.jscomp.jarjar.org.apache.tools.ant.taskdefs.Expand.extractFile(Expand.java:361)
             // sun.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Expand expand0 = new Expand();
      expand0.createMapper();
      // Undeclared exception!
      try { 
        expand0.getMapper();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // nested mapper or one of the attributes type or classname is required
         //
         verifyException("com.google.javascript.jscomp.jarjar.org.apache.tools.ant.types.Mapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Expand expand0 = new Expand();
      MockFile mockFile0 = new MockFile("Cannot define more than one mapper");
      expand0.setDest(mockFile0);
      File file0 = MockFile.createTempFile("native-encoding", "Cannot define more than one mapper", (File) mockFile0);
      file0.setReadable(false);
      expand0.setSrc(file0);
      try { 
        expand0.execute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // src '/home/wangmiaomiao/testData/findBugs/compiler/ssh/Cannot define more than one mapper/native-encoding0Cannot define more than one mapper' cannot be read.
         //
         verifyException("com.google.javascript.jscomp.jarjar.org.apache.tools.ant.taskdefs.Expand", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Expand expand0 = new Expand();
      MockFile mockFile0 = new MockFile("native-encoding");
      mockFile0.mkdirs();
      expand0.setDest(mockFile0);
      expand0.setSrc(mockFile0);
      try { 
        expand0.execute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Src must not be a directory. Use nested filesets instead.
         //
         verifyException("com.google.javascript.jscomp.jarjar.org.apache.tools.ant.taskdefs.Expand", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Expand expand0 = new Expand();
      MockFile mockFile0 = new MockFile("Cannot define more than one mapper", "native-encoding");
      expand0.setDest(mockFile0);
      expand0.setSrc(mockFile0);
      try { 
        expand0.execute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // src '/home/wangmiaomiao/testData/findBugs/compiler/ssh/Cannot define more than one mapper/native-encoding' doesn't exist.
         //
         verifyException("com.google.javascript.jscomp.jarjar.org.apache.tools.ant.taskdefs.Expand", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Expand expand0 = new Expand();
      File file0 = MockFile.createTempFile("smh]n0dt!NS6Y\"PB{", "Cannot define more than one mapper");
      expand0.setDest(file0);
      expand0.setSrc(file0);
      try { 
        expand0.execute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Dest must be a directory.
         //
         verifyException("com.google.javascript.jscomp.jarjar.org.apache.tools.ant.taskdefs.Expand", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Expand expand0 = new Expand();
      MockFile mockFile0 = new MockFile("native-encoding");
      expand0.setDest(mockFile0);
      File file0 = MockFile.createTempFile("native-encoding", "Cannot define more than one mapper", (File) mockFile0);
      expand0.setSrc(file0);
      try { 
        expand0.execute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error while expanding /home/wangmiaomiao/testData/findBugs/compiler/ssh/native-encoding/native-encoding0Cannot define more than one mapper
         // java.util.zip.ZipException: archive is not a ZIP archive
         //
         verifyException("com.google.javascript.jscomp.jarjar.org.apache.tools.ant.taskdefs.Expand", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Expand expand0 = new Expand();
      expand0.setTaskType("expand");
      try { 
        expand0.execute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // src attribute and/or resources must be specified
         //
         verifyException("com.google.javascript.jscomp.jarjar.org.apache.tools.ant.taskdefs.Expand", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Expand expand0 = new Expand();
      PatternSet patternSet0 = new PatternSet();
      expand0.addPatternset(patternSet0);
      MergingMapper mergingMapper0 = new MergingMapper("Cannot define more than one mapper");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileUtils fileUtils0 = FileUtils.getFileUtils();
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        expand0.extractFile(fileUtils0, (File) null, (File) null, pipedInputStream0, "native-encoding", mockDate0, false, mergingMapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.org.apache.tools.ant.util.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Expand expand0 = new Expand();
      boolean boolean0 = expand0.getScanForUnicodeExtraFields();
      assertTrue(boolean0);
      assertEquals("UTF8", expand0.getEncoding());
      assertFalse(expand0.getFailOnEmptyArchive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Expand expand0 = new Expand("stripped absolute path spec from ");
      String string0 = expand0.getEncoding();
      assertFalse(expand0.getFailOnEmptyArchive());
      assertTrue(expand0.getScanForUnicodeExtraFields());
      assertEquals("stripped absolute path spec from ", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Expand expand0 = new Expand();
      boolean boolean0 = expand0.getFailOnEmptyArchive();
      assertFalse(boolean0);
      assertEquals("UTF8", expand0.getEncoding());
      assertTrue(expand0.getScanForUnicodeExtraFields());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Expand expand0 = new Expand();
      expand0.setFailOnEmptyArchive(false);
      assertEquals("UTF8", expand0.getEncoding());
      assertFalse(expand0.getFailOnEmptyArchive());
      assertTrue(expand0.getScanForUnicodeExtraFields());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Expand expand0 = new Expand();
      CompositeMapper compositeMapper0 = new CompositeMapper();
      expand0.add((FileNameMapper) compositeMapper0);
      assertTrue(expand0.getScanForUnicodeExtraFields());
      assertFalse(expand0.getFailOnEmptyArchive());
      assertEquals("UTF8", expand0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Expand expand0 = new Expand();
          expand0.setStripAbsolutePathSpec(false);
          PipedInputStream pipedInputStream0 = new PipedInputStream();
          FileUtils fileUtils0 = FileUtils.getFileUtils();
          MockDate mockDate0 = new MockDate(65557, 65557, 65557, 65557, (-2391), 65557);
          FlatFileNameMapper flatFileNameMapper0 = new FlatFileNameMapper();
          // Undeclared exception!
          try { 
            expand0.extractFile(fileUtils0, (File) null, (File) null, pipedInputStream0, "/LVhT`9L'fjb}", mockDate0, false, flatFileNameMapper0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/wangmiaomiao/testData/findBugs/compiler/ssh/LVhT`9L'fjb}\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // com.google.javascript.jscomp.jarjar.org.apache.tools.ant.taskdefs.Expand.extractFile(Expand.java:361)
             // sun.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Expand expand0 = new Expand("P+_Ys");
      FileResource fileResource0 = new FileResource((File) null);
      // Undeclared exception!
      try { 
        expand0.expandResource(fileResource0, (File) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // only filesystem based resources are supported by this task.
         //
         verifyException("com.google.javascript.jscomp.jarjar.org.apache.tools.ant.taskdefs.Expand", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Expand expand0 = new Expand();
      expand0.setAllowFilesToEscapeDest(false);
      MockFile mockFile0 = new MockFile("native-encoding");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileUtils fileUtils0 = FileUtils.getFileUtils();
      RegexpPatternMapper regexpPatternMapper0 = new RegexpPatternMapper();
      // Undeclared exception!
      try { 
        expand0.extractFile(fileUtils0, mockFile0, mockFile0, pipedInputStream0, "M|o>%b;.2g8H", (Date) null, true, regexpPatternMapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.org.apache.tools.ant.taskdefs.Expand", e);
      }
  }
}

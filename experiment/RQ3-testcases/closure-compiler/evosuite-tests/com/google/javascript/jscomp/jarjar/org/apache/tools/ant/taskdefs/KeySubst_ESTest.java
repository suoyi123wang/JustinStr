/*
 * This file was automatically generated by EvoSuite
 * Thu May 12 09:44:31 GMT 2022
 */

package com.google.javascript.jscomp.jarjar.org.apache.tools.ant.taskdefs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.jarjar.org.apache.tools.ant.taskdefs.KeySubst;
import java.util.Hashtable;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KeySubst_ESTest extends KeySubst_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KeySubst keySubst0 = new KeySubst();
      // Undeclared exception!
      try { 
        keySubst0.setKeys("**/.git");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      String string0 = KeySubst.replace("", hashtable0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KeySubst keySubst0 = new KeySubst();
      keySubst0.setSep((String) null);
      // Undeclared exception!
      try { 
        keySubst0.setKeys("T");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      // Undeclared exception!
      try { 
        KeySubst.replace("${", hashtable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      // Undeclared exception!
      try { 
        KeySubst.replace((String) null, hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.org.apache.tools.ant.taskdefs.KeySubst", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.put("VERSION", "$f ${VERSION} f ${b} jj $");
      String string0 = KeySubst.replace("$f ${VERSION} f ${b} jj $", hashtable0);
      assertEquals("$f $f ${VERSION} f ${b} jj $ f ${b} jj $", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KeySubst keySubst0 = new KeySubst();
      keySubst0.setKeys("Bf:GYO>=,8G!tn>/W$");
      assertNull(keySubst0.getTaskType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KeySubst keySubst0 = new KeySubst();
      keySubst0.setKeys("");
      assertNull(keySubst0.getTaskName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KeySubst keySubst0 = new KeySubst();
      keySubst0.setKeys((String) null);
      assertNull(keySubst0.getDescription());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">");
      KeySubst keySubst0 = new KeySubst();
      MockFile mockFile0 = new MockFile(">", "");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      MockFile mockFile1 = new MockFile("", "%%lmXeph?H .*'c");
      keySubst0.setDest(mockFile1);
      keySubst0.setSrc(mockFile0);
      keySubst0.execute();
      assertNull(keySubst0.getDescription());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "wmq*O&[kS-j$C)?");
      KeySubst keySubst0 = new KeySubst();
      MockFile mockFile0 = new MockFile(">", "");
      MockFile mockFile1 = new MockFile("", "%%lmXeph?H .*'c");
      keySubst0.setDest(mockFile1);
      keySubst0.setSrc(mockFile0);
      keySubst0.execute();
      assertNull(keySubst0.getDescription());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KeySubst keySubst0 = new KeySubst();
      keySubst0.execute();
      assertNull(keySubst0.getDescription());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KeySubst keySubst0 = new KeySubst();
      MockFile mockFile0 = new MockFile(">", "");
      keySubst0.setSrc(mockFile0);
      keySubst0.execute();
      assertNull(keySubst0.getDescription());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[7];
      KeySubst.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      KeySubst keySubst0 = new KeySubst();
      MockFile mockFile0 = new MockFile(">", "");
      keySubst0.setDest(mockFile0);
      keySubst0.setSrc(mockFile0);
      keySubst0.execute();
      assertNull(keySubst0.getTaskName());
  }
}

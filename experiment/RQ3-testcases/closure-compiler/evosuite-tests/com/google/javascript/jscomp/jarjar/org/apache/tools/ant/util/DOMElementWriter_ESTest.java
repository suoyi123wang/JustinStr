/*
 * This file was automatically generated by EvoSuite
 * Thu May 12 09:56:14 GMT 2022
 */

package com.google.javascript.jscomp.jarjar.org.apache.tools.ant.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.jarjar.org.apache.tools.ant.util.DOMElementWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.StringWriter;
import java.io.Writer;
import javax.imageio.metadata.IIOMetadataNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DOMElementWriter_ESTest extends DOMElementWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = DOMElementWriter.isLegalXmlCharacter('\uFFFD');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DOMElementWriter.XmlNamespacePolicy dOMElementWriter_XmlNamespacePolicy0 = DOMElementWriter.XmlNamespacePolicy.IGNORE;
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter(true, dOMElementWriter_XmlNamespacePolicy0);
      boolean boolean0 = dOMElementWriter0.isReference(" but found ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      String string0 = dOMElementWriter0.encodedata("]]>");
      assertEquals("]]]]><![CDATA[>", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      StringWriter stringWriter0 = new StringWriter(99);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("&!Dc)&soQNJ&");
      dOMElementWriter0.closeElement(iIOMetadataNode0, stringWriter0, (-1052), "goog.provide", true);
      assertEquals("</&!Dc)&soQNJ&>\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("/- r");
      iIOMetadataNode0.removeChild(iIOMetadataNode0);
      DOMElementWriter.XmlNamespacePolicy dOMElementWriter_XmlNamespacePolicy0 = DOMElementWriter.XmlNamespacePolicy.QUALIFY_ALL;
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter(true, dOMElementWriter_XmlNamespacePolicy0);
      // Undeclared exception!
      try { 
        dOMElementWriter0.write((Element) iIOMetadataNode0, (Writer) null, 27, "F260Q5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DOMElementWriter.XmlNamespacePolicy dOMElementWriter_XmlNamespacePolicy0 = new DOMElementWriter.XmlNamespacePolicy(true, false);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("&!Dc)&soQNJ&");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      dOMElementWriter0.write((Element) iIOMetadataNode0, (OutputStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      boolean boolean0 = dOMElementWriter0.isReference("&#xb;");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DOMElementWriter.XmlNamespacePolicy dOMElementWriter_XmlNamespacePolicy0 = DOMElementWriter.XmlNamespacePolicy.QUALIFY_ALL;
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter(false, dOMElementWriter_XmlNamespacePolicy0);
      boolean boolean0 = dOMElementWriter0.isLegalCharacter('\u0014');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DOMElementWriter.XmlNamespacePolicy dOMElementWriter_XmlNamespacePolicy0 = DOMElementWriter.XmlNamespacePolicy.ONLY_QUALIFY_ELEMENTS;
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter(false, dOMElementWriter_XmlNamespacePolicy0);
      String string0 = dOMElementWriter0.encodeAttributeValue("\u000B");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      // Undeclared exception!
      try { 
        dOMElementWriter0.writeXMLDeclaration((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.org.apache.tools.ant.util.DOMElementWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("<<");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        dOMElementWriter0.write((Element) iIOMetadataNode0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      StringWriter stringWriter0 = new StringWriter(65533);
      // Undeclared exception!
      dOMElementWriter0.openElement((Element) iIOMetadataNode0, (Writer) stringWriter0, 65533, "Invalid module name: '");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      // Undeclared exception!
      try { 
        dOMElementWriter0.isReference("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      // Undeclared exception!
      try { 
        dOMElementWriter0.isReference((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.org.apache.tools.ant.util.DOMElementWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      // Undeclared exception!
      try { 
        dOMElementWriter0.encodedata((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.org.apache.tools.ant.util.DOMElementWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      // Undeclared exception!
      try { 
        dOMElementWriter0.encodedata((Writer) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.org.apache.tools.ant.util.DOMElementWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      // Undeclared exception!
      try { 
        dOMElementWriter0.encodeAttributeValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.org.apache.tools.ant.util.DOMElementWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      // Undeclared exception!
      try { 
        dOMElementWriter0.encode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.org.apache.tools.ant.util.DOMElementWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      StringWriter stringWriter0 = new StringWriter(428);
      // Undeclared exception!
      dOMElementWriter0.closeElement(iIOMetadataNode0, stringWriter0, 2147483645, "Qnj", true);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        dOMElementWriter0.closeElement(iIOMetadataNode0, (Writer) null, 237817416, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = DOMElementWriter.isLegalXmlCharacter('`');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = DOMElementWriter.isLegalXmlCharacter('\u0003');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      StringWriter stringWriter0 = new StringWriter();
      dOMElementWriter0.encodedata((Writer) stringWriter0, "\u000B");
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      StringWriter stringWriter0 = new StringWriter(72);
      dOMElementWriter0.encodedata((Writer) stringWriter0, "]]]]><![CDATA[>");
      assertEquals("]]]]]]><![CDATA[><![CDATA[>", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DOMElementWriter.XmlNamespacePolicy dOMElementWriter_XmlNamespacePolicy0 = DOMElementWriter.XmlNamespacePolicy.ONLY_QUALIFY_ELEMENTS;
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter(false, dOMElementWriter_XmlNamespacePolicy0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      StringWriter stringWriter0 = new StringWriter();
      dOMElementWriter0.openElement((Element) iIOMetadataNode0, (Writer) stringWriter0, 688, "a=|AK$cKfnnDf");
      dOMElementWriter0.closeElement(iIOMetadataNode0, stringWriter0, 688, "a=|AK$cKfnnDf", false);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DOMElementWriter.XmlNamespacePolicy dOMElementWriter_XmlNamespacePolicy0 = DOMElementWriter.XmlNamespacePolicy.QUALIFY_ALL;
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter(true, dOMElementWriter_XmlNamespacePolicy0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.setAttributeNS("tDv0ZZP_0]e#nl/vc=o", "tDv0ZZP_0]e#nl/vc=o", "BROWSER_WITH_TRANSFORMED_PREFIXES");
      StringWriter stringWriter0 = new StringWriter();
      dOMElementWriter0.openElement((Element) iIOMetadataNode0, (Writer) stringWriter0, 2470, "BROWSER_WITH_TRANSFORMED_PREFIXES", true);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.setAttributeNS("tDv0ZZP_0]e#nl/vc=o", "tDv0ZZP_0]e#nl/vc=o", "BROWSER_WITH_TRANSFORMED_PREFIXES");
      StringWriter stringWriter0 = new StringWriter();
      dOMElementWriter0.openElement((Element) iIOMetadataNode0, (Writer) stringWriter0, 2470, "BROWSER_WITH_TRANSFORMED_PREFIXES", true);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DOMElementWriter.XmlNamespacePolicy dOMElementWriter_XmlNamespacePolicy0 = DOMElementWriter.XmlNamespacePolicy.ONLY_QUALIFY_ELEMENTS;
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter(false, dOMElementWriter_XmlNamespacePolicy0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      StringWriter stringWriter0 = new StringWriter(490);
      dOMElementWriter0.openElement((Element) iIOMetadataNode0, (Writer) stringWriter0, 1690, "\"(vJ7|hFr(A>z6+bLJ");
      dOMElementWriter0.openElement((Element) iIOMetadataNode0, (Writer) stringWriter0, 1690, "\"(vJ7|hFr(A>z6+bLJ", true);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DOMElementWriter.XmlNamespacePolicy dOMElementWriter_XmlNamespacePolicy0 = DOMElementWriter.XmlNamespacePolicy.ONLY_QUALIFY_ELEMENTS;
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter(true, dOMElementWriter_XmlNamespacePolicy0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      StringWriter stringWriter0 = new StringWriter(78043);
      dOMElementWriter0.openElement((Element) iIOMetadataNode0, (Writer) stringWriter0, (-302), "<!--", false);
      assertEquals("<null xmlns=\"\" />\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter(false);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        dOMElementWriter0.openElement((Element) iIOMetadataNode0, (Writer) null, (-1298), "d\"5Ye\"Ntr]L~^", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      dOMElementWriter0.openElement((Element) iIOMetadataNode0, (Writer) stringWriter0, 57344, "", true);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      boolean boolean0 = dOMElementWriter0.isLegalCharacter('@');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = DOMElementWriter.isLegalXmlCharacter('\uFFFE');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = DOMElementWriter.isLegalXmlCharacter('\uFFF6');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = DOMElementWriter.isLegalXmlCharacter('\t');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      boolean boolean0 = dOMElementWriter0.isReference("&quot;");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      boolean boolean0 = dOMElementWriter0.isReference("&#x;;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      boolean boolean0 = dOMElementWriter0.isReference("&#D$E;;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      boolean boolean0 = dOMElementWriter0.isReference("&!c)Y&soQJ&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      boolean boolean0 = dOMElementWriter0.isReference("&!Dc)Y&soQJ&;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      boolean boolean0 = dOMElementWriter0.isReference("4Y9`&>'l`i");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      String string0 = dOMElementWriter0.encodedata("\u000B");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      String string0 = dOMElementWriter0.encode("\u000B");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      String string0 = dOMElementWriter0.encodeAttributeValue("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
      assertEquals("&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xa;", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      String string0 = dOMElementWriter0.encodeAttributeValue("R'IS}B#Bx`@N?{rFo)");
      assertEquals("R&apos;IS}B#Bx`@N?{rFo)", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      String string0 = dOMElementWriter0.encodeAttributeValue("amp;!Dc)&amp;soQNJ&amp");
      assertEquals("amp;!Dc)&amp;amp;soQNJ&amp;amp", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      String string0 = dOMElementWriter0.encode("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
      assertEquals("&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      StringWriter stringWriter0 = new StringWriter();
      DOMElementWriter.XmlNamespacePolicy dOMElementWriter_XmlNamespacePolicy0 = DOMElementWriter.XmlNamespacePolicy.QUALIFY_ALL;
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter(true, dOMElementWriter_XmlNamespacePolicy0);
      dOMElementWriter0.closeElement(iIOMetadataNode0, stringWriter0, 20, "amp;;;", true);
      assertEquals("amp;;;amp;;;amp;;;amp;;;amp;;;amp;;;amp;;;amp;;;amp;;;amp;;;amp;;;amp;;;amp;;;amp;;;amp;;;amp;;;amp;;;amp;;;amp;;;amp;;;</null>\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DOMElementWriter.XmlNamespacePolicy dOMElementWriter_XmlNamespacePolicy0 = DOMElementWriter.XmlNamespacePolicy.QUALIFY_ALL;
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter(true, dOMElementWriter_XmlNamespacePolicy0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.setAttributeNS("tDv0ZZP_0]e#nl/vc=o", "tDv0ZZP_0]e#nl/vc=o", "tDv0ZZP_0]e#nl/vc=o");
      StringWriter stringWriter0 = new StringWriter();
      dOMElementWriter0.write((Element) iIOMetadataNode0, (Writer) stringWriter0, (-7), "tDv0ZZP_0]e#nl/vc=o");
      assertEquals("<null :tDv0ZZP_0]e#nl/vc=o=\"tDv0ZZP_0]e#nl/vc=o\" xmlns=\"\" />\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.appendChild(iIOMetadataNode1);
      DOMElementWriter.XmlNamespacePolicy dOMElementWriter_XmlNamespacePolicy0 = DOMElementWriter.XmlNamespacePolicy.QUALIFY_ALL;
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter(false, dOMElementWriter_XmlNamespacePolicy0);
      StringWriter stringWriter0 = new StringWriter();
      dOMElementWriter0.write((Element) iIOMetadataNode0, (Writer) stringWriter0, 126, "gXr;-aEE-;85kYzn");
      assertNotSame(iIOMetadataNode0, node0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      DOMElementWriter.XmlNamespacePolicy dOMElementWriter_XmlNamespacePolicy0 = DOMElementWriter.XmlNamespacePolicy.QUALIFY_ALL;
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter(false, dOMElementWriter_XmlNamespacePolicy0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      dOMElementWriter0.write((Element) iIOMetadataNode0, (Writer) stringWriter0, 126, "gXr;-aEE-;85kYzn");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      StringWriter stringWriter0 = new StringWriter(2981);
      dOMElementWriter0.writeXMLDeclaration(stringWriter0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter(false);
      StringWriter stringWriter0 = new StringWriter();
      dOMElementWriter0.writeXMLDeclaration(stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        dOMElementWriter0.write((Element) iIOMetadataNode0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      String string0 = dOMElementWriter0.encodedata("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DOMElementWriter dOMElementWriter0 = new DOMElementWriter();
      // Undeclared exception!
      try { 
        dOMElementWriter0.openElement((Element) null, (Writer) null, (-2821), "Zz2)5:-)rb6{t4;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}

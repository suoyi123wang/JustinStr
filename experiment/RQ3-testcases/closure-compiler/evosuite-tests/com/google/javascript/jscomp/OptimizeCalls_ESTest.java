/*
 * This file was automatically generated by EvoSuite
 * Thu May 12 09:49:29 GMT 2022
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.BlackHoleErrorManager;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.OptimizeCalls;
import com.google.javascript.jscomp.OptimizeConstructors;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.jarjar.com.google.common.collect.ImmutableList;
import com.google.javascript.jscomp.jarjar.com.google.common.collect.ImmutableListMultimap;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Map;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptimizeCalls_ESTest extends OptimizeCalls_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.Es6RewriteDestructuring$PatternNestingLevel");
      // Undeclared exception!
      try { 
        OptimizeCalls.ReferenceMap.isSimpleAssignmentTarget(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.OptimizeCalls$ReferenceMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, (Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "5=9@$ ");
      // Undeclared exception!
      try { 
        OptimizeCalls.ReferenceMap.isOptChainCallTarget(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.OptimizeCalls$ReferenceMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Node node0 = Node.newString("");
      // Undeclared exception!
      try { 
        OptimizeCalls.ReferenceMap.isNewTarget(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.OptimizeCalls$ReferenceMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Node node0 = Node.newString("");
      // Undeclared exception!
      try { 
        OptimizeCalls.ReferenceMap.isNormalOrOptChainCallOrNewTarget(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.OptimizeCalls$ReferenceMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("MH^z(m+>1;Qmj`=\">", "$J5IMa\"mQ_");
      // Undeclared exception!
      try { 
        OptimizeCalls.ReferenceMap.getCallOrNewNodeForTarget(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlackHoleErrorManager blackHoleErrorManager0 = new BlackHoleErrorManager();
      Compiler compiler0 = new Compiler(blackHoleErrorManager0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "5=9@$ ");
      // Undeclared exception!
      try { 
        OptimizeCalls.isAllowedReference(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.OptimizeCalls", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = compiler0.SYNTHETIC_EXTERNS_FILE;
      Node node0 = compiler0.parse(sourceFile0);
      OptimizeCalls.Builder optimizeCalls_Builder0 = OptimizeCalls.builder();
      optimizeCalls_Builder0.setCompiler(compiler0);
      optimizeCalls_Builder0.setConsiderExterns(false);
      OptimizeCalls optimizeCalls0 = optimizeCalls_Builder0.build();
      // Undeclared exception!
      try { 
        optimizeCalls0.process(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        OptimizeCalls.mayBeOptimizableName(compiler0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = compiler0.SYNTHETIC_EXTERNS_FILE;
      compiler0.parse(sourceFile0);
      boolean boolean0 = OptimizeCalls.mayBeOptimizableName(compiler0, "$jscomp$inherits");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = compiler0.SYNTHETIC_EXTERNS_FILE;
      compiler0.parse(sourceFile0);
      boolean boolean0 = OptimizeCalls.mayBeOptimizableName(compiler0, "inherits");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = compiler0.SYNTHETIC_EXTERNS_FILE;
      compiler0.parse(sourceFile0);
      boolean boolean0 = OptimizeCalls.mayBeOptimizableName(compiler0, "|/v*A s^#CLf$");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Node node0 = Node.newString("");
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, "");
      JSTypeExpression.makeOptionalArg(jSTypeExpression0);
      // Undeclared exception!
      try { 
        OptimizeCalls.ReferenceMap.getArgumentForCallOrNewOrDotCall(node0, 4095);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Node node0 = Node.newString("");
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, "");
      ImmutableList<Node> immutableList0 = jSTypeExpression0.getAllTypeNodes();
      ImmutableListMultimap<Node, Node> immutableListMultimap0 = OptimizeCalls.ReferenceMap.getFunctionNodes(immutableList0);
      assertEquals(0, immutableListMultimap0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OptimizeCalls.Builder optimizeCalls_Builder0 = OptimizeCalls.builder();
      Compiler compiler0 = new Compiler();
      OptimizeConstructors optimizeConstructors0 = new OptimizeConstructors(compiler0);
      OptimizeCalls.Builder optimizeCalls_Builder1 = optimizeCalls_Builder0.addPass(optimizeConstructors0);
      assertSame(optimizeCalls_Builder1, optimizeCalls_Builder0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OptimizeCalls.ReferenceMap optimizeCalls_ReferenceMap0 = new OptimizeCalls.ReferenceMap();
      Iterable<Map.Entry<String, ArrayList<Node>>> iterable0 = (Iterable<Map.Entry<String, ArrayList<Node>>>)optimizeCalls_ReferenceMap0.getPropReferences();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OptimizeCalls.ReferenceMap optimizeCalls_ReferenceMap0 = new OptimizeCalls.ReferenceMap();
      Iterable<Map.Entry<String, ArrayList<Node>>> iterable0 = (Iterable<Map.Entry<String, ArrayList<Node>>>)optimizeCalls_ReferenceMap0.getNameReferences();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OptimizeCalls.ReferenceMap optimizeCalls_ReferenceMap0 = new OptimizeCalls.ReferenceMap();
      Scope scope0 = optimizeCalls_ReferenceMap0.getGlobalScope();
      assertNull(scope0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OptimizeCalls.ReferenceMap optimizeCalls_ReferenceMap0 = new OptimizeCalls.ReferenceMap();
      optimizeCalls_ReferenceMap0.addNameReference("@<I%-UG>E4A`i{,>", (Node) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Node node0 = Node.newBigInt(bigInteger0);
      // Undeclared exception!
      try { 
        OptimizeCalls.ReferenceMap.getFirstArgumentForCallOrNewOrDotCall(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.OptimizeCalls$ReferenceMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OptimizeCalls.ReferenceMap optimizeCalls_ReferenceMap0 = new OptimizeCalls.ReferenceMap();
      optimizeCalls_ReferenceMap0.addPropReference("H-#%8Q]-xH}gW", (Node) null);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu May 12 10:21:51 GMT 2022
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.colors.Color;
import com.google.javascript.jscomp.jarjar.com.google.common.collect.ImmutableList;
import com.google.javascript.jscomp.jarjar.com.google.common.collect.ImmutableSet;
import com.google.javascript.jscomp.jarjar.com.google.common.collect.ImmutableSortedSet;
import com.google.javascript.jscomp.jarjar.com.google.common.collect.UnmodifiableListIterator;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Outcome;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.StaticScope;
import com.google.javascript.rhino.Token;
import com.google.javascript.rhino.jstype.AutoValue_FunctionType_Parameter;
import com.google.javascript.rhino.jstype.AutoValue_JSTypeRegistry_ClosureNamespace;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticTypedScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.SymbolType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplateTypeReplacer;
import com.google.javascript.rhino.jstype.TemplatizedType;
import com.google.javascript.rhino.jstype.TypeStringBuilder;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSTypeRegistry_ESTest extends JSTypeRegistry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = ", required at most ";
      Iterable<ObjectType> iterable0 = jSTypeRegistry0.getEachReferenceTypeWithProperty(", required at most ");
      assertNotNull(iterable0);
      
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      assertNotNull(templateType0);
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isRecordType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isUnionType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isEnumType());
      
      AutoValue_FunctionType_Parameter autoValue_FunctionType_Parameter0 = new AutoValue_FunctionType_Parameter(templateType0, false, false);
      assertNotNull(autoValue_FunctionType_Parameter0);
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isRecordType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isUnionType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(autoValue_FunctionType_Parameter0.isVariadic());
      assertFalse(autoValue_FunctionType_Parameter0.isOptional());
      
      ImmutableList<FunctionType.Parameter> immutableList0 = ImmutableList.of((FunctionType.Parameter) autoValue_FunctionType_Parameter0, (FunctionType.Parameter) autoValue_FunctionType_Parameter0, (FunctionType.Parameter) autoValue_FunctionType_Parameter0, (FunctionType.Parameter) autoValue_FunctionType_Parameter0, (FunctionType.Parameter) autoValue_FunctionType_Parameter0, (FunctionType.Parameter) autoValue_FunctionType_Parameter0, (FunctionType.Parameter) autoValue_FunctionType_Parameter0);
      assertNotNull(immutableList0);
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isRecordType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isUnionType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(autoValue_FunctionType_Parameter0.isVariadic());
      assertFalse(autoValue_FunctionType_Parameter0.isOptional());
      assertEquals(7, immutableList0.size());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) templateType0, (List<FunctionType.Parameter>) immutableList0);
      assertNotNull(functionType0);
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isRecordType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isUnionType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(autoValue_FunctionType_Parameter0.isVariadic());
      assertFalse(autoValue_FunctionType_Parameter0.isOptional());
      assertEquals(7, immutableList0.size());
      assertFalse(functionType0.isStructuralInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNativeObjectType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isAnonymous());
      assertFalse(functionType0.isLiteralObject());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isTemplateType());
      assertNull(functionType0.getClosurePrimitive());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isUnsuccessfullyResolved());
      assertNull(functionType0.getGoogModuleId());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isResolved());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isAbstract());
      assertFalse(functionType0.isNominalConstructorOrInterface());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.isSuccessfullyResolved());
      assertFalse(functionType0.isNamedType());
      assertFalse(functionType0.isBigIntValueType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplatizedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertEquals(0, functionType0.getTemplateParamCount());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.matchesObjectContext());
      assertFalse(functionType0.isRawTypeOfTemplatizedType());
      assertTrue(functionType0.isObject());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isSymbolValueType());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      FunctionType functionType1 = (FunctionType)jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      assertFalse(functionType1.equals((Object)functionType0));
      assertNotNull(functionType1);
      assertTrue(functionType1.isNominalConstructorOrInterface());
      assertFalse(functionType1.isAnonymous());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isRecordType());
      assertNull(functionType1.getClosurePrimitive());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isStructuralInterface());
      assertFalse(functionType1.isInterface());
      assertTrue(functionType1.isConstructor());
      assertFalse(functionType1.isLiteralObject());
      assertNull(functionType1.getGoogModuleId());
      assertFalse(functionType1.isNamedType());
      assertTrue(functionType1.isNativeObjectType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isUnsuccessfullyResolved());
      assertFalse(functionType1.isStringValueType());
      assertTrue(functionType1.isResolved());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isTemplatizedType());
      assertFalse(functionType1.isAbstract());
      assertFalse(functionType1.isOrdinaryFunction());
      assertTrue(functionType1.isSuccessfullyResolved());
      assertFalse(functionType1.isBigIntValueType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isEnumElementType());
      assertTrue(functionType1.matchesObjectContext());
      assertFalse(functionType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(functionType1.isFunctionType());
      assertTrue(functionType1.isObject());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isRawTypeOfTemplatizedType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isBooleanValueType());
      assertEquals(0, functionType1.getTemplateParamCount());
      assertFalse(functionType1.isCheckedUnknownType());
      assertTrue(functionType1.hasInstanceType());
      assertFalse(functionType1.isSymbolValueType());
      assertNotSame(functionType1, functionType0);
      
      StaticScope staticScope0 = null;
      NoType noType0 = null;
      try {
        noType0 = new NoType(jSTypeRegistry0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      assertNotNull(templateType0);
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isUnionType());
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      assertNotNull(templatizedType0);
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isUnionType());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templatizedType0.isFunctionType());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isSymbolValueType());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isNativeObjectType());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isRecordType());
      assertFalse(templatizedType0.isStringValueType());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isNoType());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isNoResolvedType());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getGoogModuleId());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNamedType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      
      JSType jSType0 = jSTypeRegistry0.createNullableType(templatizedType0);
      assertNotNull(jSType0);
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isUnionType());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templatizedType0.isFunctionType());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isSymbolValueType());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isNativeObjectType());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isRecordType());
      assertFalse(templatizedType0.isStringValueType());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isNoType());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isBooleanValueType());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNativeObjectType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.isUnionType());
      
      ArrayList<TemplateType> arrayList0 = new ArrayList<TemplateType>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(templateType0));
      
      TreeSet<TemplateType> treeSet1 = new TreeSet<TemplateType>(arrayList0);
      assertNotNull(treeSet1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(templateType0));
      
      StaticTypedScope staticTypedScope0 = jSTypeRegistry0.createScopeWithTemplates((StaticTypedScope) null, treeSet1);
      assertNotNull(staticTypedScope0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(templateType0));
      
      boolean boolean0 = jSTypeRegistry0.isForwardDeclaredType("@SvOv%wKXlo[u05b:");
      assertFalse(boolean0);
      
      Token token0 = Token.OBJECT_REST;
      Node node0 = new Node(token0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isAwait());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isSpread());
      assertFalse(node0.isSuper());
      assertFalse(node0.isBreak());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNE());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isExport());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isExponent());
      assertFalse(node0.isRoot());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isNull());
      assertFalse(node0.isWhile());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isRest());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSub());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isForIn());
      assertFalse(node0.hasParent());
      assertFalse(node0.isDo());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isParamList());
      assertFalse(node0.isEQ());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isSHNE());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isYield());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isConst());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isIf());
      assertFalse(node0.isImportSpecs());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isNot());
      assertTrue(node0.isObjectRest());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isAnd());
      assertEquals(Token.OBJECT_REST, node0.getToken());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultValue());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isImport());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isForOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNeg());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isClass());
      assertFalse(node0.isAssignOr());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      assertNotNull(templateType0);
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoObjectType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isSymbolValueType());
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSType jSType0 = hashMap0.put(templateType0, templateType0);
      assertNull(jSType0);
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoObjectType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      assertNotNull(templatizedType0);
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoObjectType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isNoObjectType());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isNoType());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertFalse(templatizedType0.isStructuralInterface());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.isAllType());
      assertTrue(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isFunctionType());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isNumberValueType());
      assertTrue(templatizedType0.isObject());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getGoogModuleId());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isVoidable());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Token token0 = Token.BANG;
      Node node0 = new Node(token0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isExportSpecs());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isYield());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isConst());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isForOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isSub());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertEquals(Token.BANG, node0.getToken());
      assertFalse(node0.isRecordType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertFalse(node0.isVar());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertFalse(node0.isEQ());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isCall());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isInc());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isSHNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isTry());
      assertFalse(node0.isAwait());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSuper());
      assertFalse(node0.isTrue());
      assertFalse(node0.isForIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasParent());
      assertFalse(node0.isSpread());
      assertFalse(node0.isNeg());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isExponent());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isRoot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isRest());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isIn());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isSetterDef());
      
      // Undeclared exception!
      try { 
        jSTypeRegistry1.createTypeFromCommentNode(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, set0);
      assertNotNull(jSTypeRegistry0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isSymbolValueType());
      
      Node node0 = noResolvedType0.getOwnPropertyDefSite("B");
      assertNull(node0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(set0.contains("B"));
      
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      assertNotNull(templateType0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isSymbolValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isNoObjectType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(set0.contains("B"));
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      JSType jSType0 = jSTypeRegistry1.createNullableType(templateType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSType0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isSymbolValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isNoObjectType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(set0.contains("B"));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = (JSType) noResolvedType0;
      jSTypeArray0[1] = (JSType) noResolvedType0;
      jSTypeArray0[2] = (JSType) templateType0;
      jSTypeArray0[3] = (JSType) templateType0;
      jSTypeArray0[4] = (JSType) templateType0;
      jSTypeArray0[5] = (JSType) noResolvedType0;
      JSType jSType1 = jSTypeRegistry0.createUnionType(jSTypeArray0);
      assertFalse(jSType1.equals((Object)jSType0));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(jSType1);
      assertFalse(jSType1.isNativeObjectType());
      assertFalse(jSType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType1.isSymbolValueType());
      assertTrue(jSType1.isResolved());
      assertFalse(jSType1.isFunctionType());
      assertFalse(jSType1.isAllType());
      assertFalse(jSType1.isNullType());
      assertFalse(jSType1.isTemplatizedType());
      assertFalse(jSType1.isLiteralObject());
      assertFalse(jSType1.isEnumElementType());
      assertFalse(jSType1.isOrdinaryFunction());
      assertFalse(jSType1.isStructuralInterface());
      assertFalse(jSType1.isNamedType());
      assertFalse(jSType1.isTemplateType());
      assertFalse(jSType1.isUnsuccessfullyResolved());
      assertFalse(jSType1.isRawTypeOfTemplatizedType());
      assertFalse(jSType1.isNoResolvedType());
      assertFalse(jSType1.isBigIntValueType());
      assertTrue(jSType1.isUnionType());
      assertFalse(jSType1.isCheckedUnknownType());
      assertFalse(jSType1.isNominalConstructorOrInterface());
      assertTrue(jSType1.isSuccessfullyResolved());
      assertFalse(jSType1.isNoType());
      assertFalse(jSType1.isStringValueType());
      assertFalse(jSType1.isNoObjectType());
      assertFalse(jSType1.isInterface());
      assertFalse(jSType1.isFunctionPrototypeType());
      assertFalse(jSType1.isRecordType());
      assertFalse(jSType1.isVoidType());
      assertFalse(jSType1.isConstructor());
      assertFalse(jSType1.isEnumType());
      assertEquals(0, jSType1.getTemplateParamCount());
      assertFalse(jSType1.isBooleanValueType());
      assertFalse(jSType1.isNumberValueType());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("B"));
      assertEquals(6, jSTypeArray0.length);
      assertNotSame(jSType1, jSType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertNotNull(jSTypeRegistry0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("IOBJECT_VALUE");
      assertNotNull(templateType0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      TemplateType templateType1 = (TemplateType)jSTypeRegistry0.findCommonSuperObject(templateType0, templateType0);
      assertNotNull(templateType1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isVoidType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertEquals("IOBJECT_VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNoType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isStringValueType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      boolean boolean0 = jSTypeRegistry1.isForwardDeclaredType("IOBJECT_VALUE");
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(boolean0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      
      Token token0 = Token.SUPER;
      Node node0 = new Node(token0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isSpread());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.hasParent());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAwait());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExponent());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitSub());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isImportSpecs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isForIn());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isSuper());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(Token.SUPER, node0.getToken());
      assertFalse(node0.isSub());
      assertFalse(node0.isDo());
      assertFalse(node0.isOptChainCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isYield());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isOr());
      assertFalse(node0.isLet());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isRest());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isConst());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isIn());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isNeg());
      assertFalse(node0.isFunction());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isRecordType());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isForOf());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isString());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertFalse(node0.isClass());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImport());
      assertFalse(node0.isNew());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[0] = (JSType) templateType0;
      jSTypeArray0[1] = (JSType) templateType1;
      jSTypeArray0[2] = (JSType) templateType1;
      jSTypeArray0[3] = (JSType) templateType1;
      jSTypeArray0[4] = (JSType) templateType0;
      TemplateType templateType2 = (TemplateType)jSTypeRegistry1.createUnionType(jSTypeArray0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(templateType2);
      assertFalse(templateType2.isFunctionPrototypeType());
      assertFalse(templateType2.isLiteralObject());
      assertFalse(templateType2.isNominalConstructorOrInterface());
      assertFalse(templateType2.isCheckedUnknownType());
      assertEquals(0, templateType2.getTemplateParamCount());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertFalse(templateType2.isNoObjectType());
      assertFalse(templateType2.isNoType());
      assertFalse(templateType2.isRawTypeOfTemplatizedType());
      assertTrue(templateType2.isSuccessfullyResolved());
      assertFalse(templateType2.isFunctionType());
      assertTrue(templateType2.isResolved());
      assertFalse(templateType2.isStringValueType());
      assertFalse(templateType2.isNoResolvedType());
      assertFalse(templateType2.isOrdinaryFunction());
      assertFalse(templateType2.isUnsuccessfullyResolved());
      assertTrue(templateType2.hasAnyTemplateTypesInternal());
      assertFalse(templateType2.isStructuralInterface());
      assertFalse(templateType2.isNamedType());
      assertFalse(templateType2.isEnumElementType());
      assertFalse(templateType2.isEnumType());
      assertFalse(templateType2.isTemplatizedType());
      assertTrue(templateType2.isTemplateType());
      assertFalse(templateType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType2.isNullType());
      assertFalse(templateType2.isVoidType());
      assertFalse(templateType2.isAllType());
      assertFalse(templateType2.isInterface());
      assertFalse(templateType2.isUnionType());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isTypeTransformation());
      assertFalse(templateType2.isBigIntValueType());
      assertTrue(templateType2.isObject());
      assertFalse(templateType2.isSymbolValueType());
      assertFalse(templateType2.isNativeObjectType());
      assertFalse(templateType2.isBooleanValueType());
      assertFalse(templateType2.isConstructor());
      assertFalse(templateType2.isRecordType());
      assertFalse(templateType2.hasCachedValues());
      assertEquals("IOBJECT_VALUE", templateType2.getReferenceName());
      assertEquals(5, jSTypeArray0.length);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(templateType2, templateType1);
      assertSame(templateType2, templateType0);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createOptionalType(templateType2);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(unionType0);
      assertFalse(unionType0.isSymbolValueType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isStructuralInterface());
      assertFalse(unionType0.isNativeObjectType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isBigIntValueType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isNoResolvedType());
      assertEquals(0, unionType0.getTemplateParamCount());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isUnsuccessfullyResolved());
      assertFalse(unionType0.isNoObjectType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isRawTypeOfTemplatizedType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNominalConstructorOrInterface());
      assertTrue(unionType0.isResolved());
      assertFalse(unionType0.isFunctionType());
      assertTrue(unionType0.isSuccessfullyResolved());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNamedType());
      assertFalse(unionType0.isLiteralObject());
      assertFalse(unionType0.isTemplatizedType());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertFalse(templateType2.isLiteralObject());
      assertFalse(templateType2.isNominalConstructorOrInterface());
      assertFalse(templateType2.isCheckedUnknownType());
      assertEquals(0, templateType2.getTemplateParamCount());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertFalse(templateType2.isNoObjectType());
      assertFalse(templateType2.isNoType());
      assertFalse(templateType2.isRawTypeOfTemplatizedType());
      assertTrue(templateType2.isSuccessfullyResolved());
      assertFalse(templateType2.isFunctionType());
      assertTrue(templateType2.isResolved());
      assertFalse(templateType2.isStringValueType());
      assertFalse(templateType2.isNoResolvedType());
      assertFalse(templateType2.isOrdinaryFunction());
      assertFalse(templateType2.isUnsuccessfullyResolved());
      assertTrue(templateType2.hasAnyTemplateTypesInternal());
      assertFalse(templateType2.isStructuralInterface());
      assertFalse(templateType2.isNamedType());
      assertFalse(templateType2.isEnumElementType());
      assertFalse(templateType2.isEnumType());
      assertFalse(templateType2.isTemplatizedType());
      assertTrue(templateType2.isTemplateType());
      assertFalse(templateType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType2.isNullType());
      assertFalse(templateType2.isVoidType());
      assertFalse(templateType2.isAllType());
      assertFalse(templateType2.isInterface());
      assertFalse(templateType2.isUnionType());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isTypeTransformation());
      assertFalse(templateType2.isBigIntValueType());
      assertTrue(templateType2.isObject());
      assertFalse(templateType2.isSymbolValueType());
      assertFalse(templateType2.isNativeObjectType());
      assertFalse(templateType2.isBooleanValueType());
      assertFalse(templateType2.isConstructor());
      assertFalse(templateType2.isRecordType());
      assertFalse(templateType2.hasCachedValues());
      assertEquals("IOBJECT_VALUE", templateType2.getReferenceName());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertEquals(5, jSTypeArray0.length);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(templateType2, templateType1);
      assertSame(templateType2, templateType0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      assertNotNull(templateType0);
      assertFalse(templateType0.hasCachedValues());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      assertNotNull(templatizedType0);
      assertFalse(templateType0.hasCachedValues());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isRecordType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isNoType());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isNativeObjectType());
      assertTrue(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isFunctionType());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isSymbolValueType());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isCheckedUnknownType());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNamedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.hasInstanceType());
      
      FunctionType functionType0 = templatizedType0.getSuperClassConstructor();
      assertNull(functionType0);
      assertFalse(templateType0.hasCachedValues());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isRecordType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isNoType());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isNativeObjectType());
      assertTrue(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isFunctionType());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isSymbolValueType());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isCheckedUnknownType());
      
      ImmutableList<JSType> immutableList0 = templatizedType0.getTemplateTypes();
      assertNotNull(immutableList0);
      assertFalse(templateType0.hasCachedValues());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isRecordType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isNoType());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isNativeObjectType());
      assertTrue(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isFunctionType());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isSymbolValueType());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertEquals(0, immutableList0.size());
      
      ImmutableList<TemplateType> immutableList1 = jSTypeRegistry0.maybeGetTemplateTypesOfBuiltin("AsyncGenerator");
      assertNotNull(immutableList1);
      assertEquals(3, immutableList1.size());
      assertFalse(immutableList1.contains(templateType0));
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      TemplateType templateType1 = jSTypeRegistry1.getGeneratorValueTemplate();
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(templateType1.equals((Object)templateType0));
      assertNotNull(templateType1);
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertEquals("VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isNoType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isStringValueType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isOrdinaryFunction());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isNumberValueType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isTypeTransformation());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(templateType1, templateType0);
      
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = (JSType) null;
      jSTypeArray0[1] = (JSType) templateType0;
      jSTypeArray0[2] = (JSType) null;
      jSTypeArray0[3] = (JSType) templateType1;
      jSTypeArray0[4] = (JSType) noResolvedType0;
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(nullType0);
      assertFalse(nullType0.isSymbolValueType());
      assertFalse(nullType0.isNativeObjectType());
      assertFalse(nullType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isStructuralInterface());
      assertEquals(0, nullType0.getTemplateParamCount());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isTemplatizedType());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.matchesNumberContext());
      assertTrue(nullType0.isNullable());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isRawTypeOfTemplatizedType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isBigIntValueType());
      assertFalse(nullType0.isNamedType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isLiteralObject());
      assertTrue(nullType0.isSuccessfullyResolved());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnsuccessfullyResolved());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isNominalConstructorOrInterface());
      assertFalse(nullType0.isStringValueType());
      assertTrue(nullType0.isResolved());
      assertFalse(nullType0.isInterface());
      
      jSTypeArray0[5] = (JSType) nullType0;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null JSType
         //
         verifyException("com.google.javascript.rhino.jstype.AutoValue_FunctionType_Parameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertNotNull(jSTypeRegistry0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("IOBJECT_VALUE");
      assertNotNull(templateType0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isSymbolValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      TemplateType templateType1 = (TemplateType)jSTypeRegistry0.findCommonSuperObject(templateType0, templateType0);
      assertNotNull(templateType1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isSymbolValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isEnumType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isStringValueType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isBigIntValueType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isConstructor());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertEquals("IOBJECT_VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      ImmutableList<TemplateType> immutableList0 = jSTypeRegistry1.maybeGetTemplateTypesOfBuiltin("g");
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNull(immutableList0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createNullableType(templateType1);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(unionType0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isSymbolValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isEnumType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isStringValueType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isBigIntValueType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isConstructor());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertEquals("IOBJECT_VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isUnsuccessfullyResolved());
      assertFalse(unionType0.isRawTypeOfTemplatizedType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isLiteralObject());
      assertTrue(unionType0.isSuccessfullyResolved());
      assertFalse(unionType0.isBigIntValueType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isNamedType());
      assertFalse(unionType0.isInterface());
      assertTrue(unionType0.isResolved());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNativeObjectType());
      assertFalse(unionType0.isNominalConstructorOrInterface());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isStructuralInterface());
      assertEquals(0, unionType0.getTemplateParamCount());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isTemplatizedType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isSymbolValueType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(linkedHashSet0.contains("g"));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      
      TemplateType templateType2 = jSTypeRegistry1.createTemplateType((String) null, (JSType) unionType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(templateType2.equals((Object)templateType0));
      assertFalse(templateType2.equals((Object)templateType1));
      assertNotNull(templateType2);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isSymbolValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isEnumType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isStringValueType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isBigIntValueType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isConstructor());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertEquals("IOBJECT_VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isUnsuccessfullyResolved());
      assertFalse(unionType0.isRawTypeOfTemplatizedType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isLiteralObject());
      assertTrue(unionType0.isSuccessfullyResolved());
      assertFalse(unionType0.isBigIntValueType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isNamedType());
      assertFalse(unionType0.isInterface());
      assertTrue(unionType0.isResolved());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNativeObjectType());
      assertFalse(unionType0.isNominalConstructorOrInterface());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isStructuralInterface());
      assertEquals(0, unionType0.getTemplateParamCount());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isTemplatizedType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isSymbolValueType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertEquals(0, templateType2.getTemplateParamCount());
      assertFalse(templateType2.isRecordType());
      assertFalse(templateType2.isLiteralObject());
      assertFalse(templateType2.hasCachedValues());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertFalse(templateType2.isUnsuccessfullyResolved());
      assertFalse(templateType2.isBooleanValueType());
      assertFalse(templateType2.isSymbolValueType());
      assertFalse(templateType2.isRawTypeOfTemplatizedType());
      assertFalse(templateType2.isNativeObjectType());
      assertFalse(templateType2.isTypeTransformation());
      assertFalse(templateType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType2.isTemplateType());
      assertTrue(templateType2.isSuccessfullyResolved());
      assertFalse(templateType2.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertTrue(templateType2.isObject());
      assertFalse(templateType2.isCheckedUnknownType());
      assertFalse(templateType2.isNullType());
      assertFalse(templateType2.isTemplatizedType());
      assertTrue(templateType2.hasAnyTemplateTypesInternal());
      assertFalse(templateType2.isOrdinaryFunction());
      assertFalse(templateType2.isEnumElementType());
      assertFalse(templateType2.isVoidType());
      assertFalse(templateType2.isNoResolvedType());
      assertFalse(templateType2.isStructuralInterface());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isEnumType());
      assertNull(templateType2.getReferenceName());
      assertFalse(templateType2.isConstructor());
      assertFalse(templateType2.isNoObjectType());
      assertTrue(templateType2.isUnionType());
      assertFalse(templateType2.isNamedType());
      assertFalse(templateType2.isAllType());
      assertTrue(templateType2.isResolved());
      assertFalse(templateType2.isNoType());
      assertFalse(templateType2.isBigIntValueType());
      assertFalse(templateType2.isInterface());
      assertFalse(templateType2.isNominalConstructorOrInterface());
      assertFalse(templateType2.isStringValueType());
      assertFalse(linkedHashSet0.contains("g"));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(templateType0, templateType2);
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      assertNotSame(templateType1, templateType2);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(templateType2, templateType0);
      assertNotSame(templateType2, templateType1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      TemplateTypeReplacer templateTypeReplacer0 = TemplateTypeReplacer.forInference(jSTypeRegistry0, hashMap0);
      assertNotNull(templateTypeReplacer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "B");
      assertNotNull(templateType0);
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isAllType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isSymbolValueType());
      assertEquals("B", templateType0.getReferenceName());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      
      SymbolType symbolType0 = new SymbolType(jSTypeRegistry0);
      assertNotNull(symbolType0);
      assertFalse(symbolType0.isTemplateType());
      assertFalse(symbolType0.isNativeObjectType());
      assertFalse(symbolType0.isOrdinaryFunction());
      assertFalse(symbolType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(symbolType0.isResolved());
      assertFalse(symbolType0.isFunctionType());
      assertFalse(symbolType0.isAllType());
      assertFalse(symbolType0.isNullType());
      assertFalse(symbolType0.isInterface());
      assertFalse(symbolType0.isNominalConstructorOrInterface());
      assertFalse(symbolType0.isStructuralInterface());
      assertTrue(symbolType0.matchesObjectContext());
      assertFalse(symbolType0.isLiteralObject());
      assertFalse(symbolType0.isTemplatizedType());
      assertTrue(symbolType0.isSymbolValueType());
      assertEquals("symbol", symbolType0.getDisplayName());
      assertFalse(symbolType0.isEnumElementType());
      assertFalse(symbolType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, symbolType0.getPossibleToBooleanOutcomes());
      assertFalse(symbolType0.matchesNumberContext());
      assertFalse(symbolType0.isNamedType());
      assertFalse(symbolType0.isNoResolvedType());
      assertFalse(symbolType0.isBigIntValueType());
      assertFalse(symbolType0.isUnionType());
      assertTrue(symbolType0.isSuccessfullyResolved());
      assertFalse(symbolType0.isCheckedUnknownType());
      assertFalse(symbolType0.isRawTypeOfTemplatizedType());
      assertFalse(symbolType0.isNoType());
      assertFalse(symbolType0.isStringValueType());
      assertFalse(symbolType0.isNoObjectType());
      assertEquals(0, symbolType0.getTemplateParamCount());
      assertFalse(symbolType0.isEnumType());
      assertFalse(symbolType0.isConstructor());
      assertFalse(symbolType0.isVoidType());
      assertFalse(symbolType0.isFunctionPrototypeType());
      assertTrue(symbolType0.matchesSymbolContext());
      assertFalse(symbolType0.isRecordType());
      assertFalse(symbolType0.isNumberValueType());
      assertFalse(symbolType0.matchesStringContext());
      assertFalse(symbolType0.isBooleanValueType());
      
      JSType jSType0 = JSType.getGreatestSubtype((JSType) templateType0, (JSType) symbolType0);
      assertNotNull(jSType0);
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isAllType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isSymbolValueType());
      assertEquals("B", templateType0.getReferenceName());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(symbolType0.isTemplateType());
      assertFalse(symbolType0.isNativeObjectType());
      assertFalse(symbolType0.isOrdinaryFunction());
      assertFalse(symbolType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(symbolType0.isResolved());
      assertFalse(symbolType0.isFunctionType());
      assertFalse(symbolType0.isAllType());
      assertFalse(symbolType0.isNullType());
      assertFalse(symbolType0.isInterface());
      assertFalse(symbolType0.isNominalConstructorOrInterface());
      assertFalse(symbolType0.isStructuralInterface());
      assertTrue(symbolType0.matchesObjectContext());
      assertFalse(symbolType0.isLiteralObject());
      assertFalse(symbolType0.isTemplatizedType());
      assertTrue(symbolType0.isSymbolValueType());
      assertEquals("symbol", symbolType0.getDisplayName());
      assertFalse(symbolType0.isEnumElementType());
      assertFalse(symbolType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, symbolType0.getPossibleToBooleanOutcomes());
      assertFalse(symbolType0.matchesNumberContext());
      assertFalse(symbolType0.isNamedType());
      assertFalse(symbolType0.isNoResolvedType());
      assertFalse(symbolType0.isBigIntValueType());
      assertFalse(symbolType0.isUnionType());
      assertTrue(symbolType0.isSuccessfullyResolved());
      assertFalse(symbolType0.isCheckedUnknownType());
      assertFalse(symbolType0.isRawTypeOfTemplatizedType());
      assertFalse(symbolType0.isNoType());
      assertFalse(symbolType0.isStringValueType());
      assertFalse(symbolType0.isNoObjectType());
      assertEquals(0, symbolType0.getTemplateParamCount());
      assertFalse(symbolType0.isEnumType());
      assertFalse(symbolType0.isConstructor());
      assertFalse(symbolType0.isVoidType());
      assertFalse(symbolType0.isFunctionPrototypeType());
      assertTrue(symbolType0.matchesSymbolContext());
      assertFalse(symbolType0.isRecordType());
      assertFalse(symbolType0.isNumberValueType());
      assertFalse(symbolType0.matchesStringContext());
      assertFalse(symbolType0.isBooleanValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.matchesNumberContext());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, jSType0.getPossibleToBooleanOutcomes());
      assertEquals("symbol", jSType0.getDisplayName());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.matchesStringContext());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.isSymbolValueType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isEnumType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.matchesSymbolContext());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.matchesObjectContext());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isEnumElementType());
      assertSame(symbolType0, jSType0);
      assertSame(jSType0, symbolType0);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0);
      assertNotNull(immutableList0);
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isAllType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isSymbolValueType());
      assertEquals("B", templateType0.getReferenceName());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(symbolType0.isTemplateType());
      assertFalse(symbolType0.isNativeObjectType());
      assertFalse(symbolType0.isOrdinaryFunction());
      assertFalse(symbolType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(symbolType0.isResolved());
      assertFalse(symbolType0.isFunctionType());
      assertFalse(symbolType0.isAllType());
      assertFalse(symbolType0.isNullType());
      assertFalse(symbolType0.isInterface());
      assertFalse(symbolType0.isNominalConstructorOrInterface());
      assertFalse(symbolType0.isStructuralInterface());
      assertTrue(symbolType0.matchesObjectContext());
      assertFalse(symbolType0.isLiteralObject());
      assertFalse(symbolType0.isTemplatizedType());
      assertTrue(symbolType0.isSymbolValueType());
      assertEquals("symbol", symbolType0.getDisplayName());
      assertFalse(symbolType0.isEnumElementType());
      assertFalse(symbolType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, symbolType0.getPossibleToBooleanOutcomes());
      assertFalse(symbolType0.matchesNumberContext());
      assertFalse(symbolType0.isNamedType());
      assertFalse(symbolType0.isNoResolvedType());
      assertFalse(symbolType0.isBigIntValueType());
      assertFalse(symbolType0.isUnionType());
      assertTrue(symbolType0.isSuccessfullyResolved());
      assertFalse(symbolType0.isCheckedUnknownType());
      assertFalse(symbolType0.isRawTypeOfTemplatizedType());
      assertFalse(symbolType0.isNoType());
      assertFalse(symbolType0.isStringValueType());
      assertFalse(symbolType0.isNoObjectType());
      assertEquals(0, symbolType0.getTemplateParamCount());
      assertFalse(symbolType0.isEnumType());
      assertFalse(symbolType0.isConstructor());
      assertFalse(symbolType0.isVoidType());
      assertFalse(symbolType0.isFunctionPrototypeType());
      assertTrue(symbolType0.matchesSymbolContext());
      assertFalse(symbolType0.isRecordType());
      assertFalse(symbolType0.isNumberValueType());
      assertFalse(symbolType0.matchesStringContext());
      assertFalse(symbolType0.isBooleanValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.matchesNumberContext());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, jSType0.getPossibleToBooleanOutcomes());
      assertEquals("symbol", jSType0.getDisplayName());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.matchesStringContext());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.isSymbolValueType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isEnumType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.matchesSymbolContext());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.matchesObjectContext());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isEnumElementType());
      assertEquals(3, immutableList0.size());
      assertSame(symbolType0, jSType0);
      assertSame(jSType0, symbolType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0, (String) null, immutableList0);
      assertNotNull(noResolvedType0);
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isAllType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isSymbolValueType());
      assertEquals("B", templateType0.getReferenceName());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(symbolType0.isTemplateType());
      assertFalse(symbolType0.isNativeObjectType());
      assertFalse(symbolType0.isOrdinaryFunction());
      assertFalse(symbolType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(symbolType0.isResolved());
      assertFalse(symbolType0.isFunctionType());
      assertFalse(symbolType0.isAllType());
      assertFalse(symbolType0.isNullType());
      assertFalse(symbolType0.isInterface());
      assertFalse(symbolType0.isNominalConstructorOrInterface());
      assertFalse(symbolType0.isStructuralInterface());
      assertTrue(symbolType0.matchesObjectContext());
      assertFalse(symbolType0.isLiteralObject());
      assertFalse(symbolType0.isTemplatizedType());
      assertTrue(symbolType0.isSymbolValueType());
      assertEquals("symbol", symbolType0.getDisplayName());
      assertFalse(symbolType0.isEnumElementType());
      assertFalse(symbolType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, symbolType0.getPossibleToBooleanOutcomes());
      assertFalse(symbolType0.matchesNumberContext());
      assertFalse(symbolType0.isNamedType());
      assertFalse(symbolType0.isNoResolvedType());
      assertFalse(symbolType0.isBigIntValueType());
      assertFalse(symbolType0.isUnionType());
      assertTrue(symbolType0.isSuccessfullyResolved());
      assertFalse(symbolType0.isCheckedUnknownType());
      assertFalse(symbolType0.isRawTypeOfTemplatizedType());
      assertFalse(symbolType0.isNoType());
      assertFalse(symbolType0.isStringValueType());
      assertFalse(symbolType0.isNoObjectType());
      assertEquals(0, symbolType0.getTemplateParamCount());
      assertFalse(symbolType0.isEnumType());
      assertFalse(symbolType0.isConstructor());
      assertFalse(symbolType0.isVoidType());
      assertFalse(symbolType0.isFunctionPrototypeType());
      assertTrue(symbolType0.matchesSymbolContext());
      assertFalse(symbolType0.isRecordType());
      assertFalse(symbolType0.isNumberValueType());
      assertFalse(symbolType0.matchesStringContext());
      assertFalse(symbolType0.isBooleanValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.matchesNumberContext());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, jSType0.getPossibleToBooleanOutcomes());
      assertEquals("symbol", jSType0.getDisplayName());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.matchesStringContext());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.isSymbolValueType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isEnumType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.matchesSymbolContext());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.matchesObjectContext());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isEnumElementType());
      assertEquals(3, immutableList0.size());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNamedType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isVoidType());
      
      NoResolvedType noResolvedType1 = (NoResolvedType)templateTypeReplacer0.caseNoType(noResolvedType0);
      assertNotNull(noResolvedType1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isAllType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isSymbolValueType());
      assertEquals("B", templateType0.getReferenceName());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(symbolType0.isTemplateType());
      assertFalse(symbolType0.isNativeObjectType());
      assertFalse(symbolType0.isOrdinaryFunction());
      assertFalse(symbolType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(symbolType0.isResolved());
      assertFalse(symbolType0.isFunctionType());
      assertFalse(symbolType0.isAllType());
      assertFalse(symbolType0.isNullType());
      assertFalse(symbolType0.isInterface());
      assertFalse(symbolType0.isNominalConstructorOrInterface());
      assertFalse(symbolType0.isStructuralInterface());
      assertTrue(symbolType0.matchesObjectContext());
      assertFalse(symbolType0.isLiteralObject());
      assertFalse(symbolType0.isTemplatizedType());
      assertTrue(symbolType0.isSymbolValueType());
      assertEquals("symbol", symbolType0.getDisplayName());
      assertFalse(symbolType0.isEnumElementType());
      assertFalse(symbolType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, symbolType0.getPossibleToBooleanOutcomes());
      assertFalse(symbolType0.matchesNumberContext());
      assertFalse(symbolType0.isNamedType());
      assertFalse(symbolType0.isNoResolvedType());
      assertFalse(symbolType0.isBigIntValueType());
      assertFalse(symbolType0.isUnionType());
      assertTrue(symbolType0.isSuccessfullyResolved());
      assertFalse(symbolType0.isCheckedUnknownType());
      assertFalse(symbolType0.isRawTypeOfTemplatizedType());
      assertFalse(symbolType0.isNoType());
      assertFalse(symbolType0.isStringValueType());
      assertFalse(symbolType0.isNoObjectType());
      assertEquals(0, symbolType0.getTemplateParamCount());
      assertFalse(symbolType0.isEnumType());
      assertFalse(symbolType0.isConstructor());
      assertFalse(symbolType0.isVoidType());
      assertFalse(symbolType0.isFunctionPrototypeType());
      assertTrue(symbolType0.matchesSymbolContext());
      assertFalse(symbolType0.isRecordType());
      assertFalse(symbolType0.isNumberValueType());
      assertFalse(symbolType0.matchesStringContext());
      assertFalse(symbolType0.isBooleanValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.matchesNumberContext());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, jSType0.getPossibleToBooleanOutcomes());
      assertEquals("symbol", jSType0.getDisplayName());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.matchesStringContext());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.isSymbolValueType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isEnumType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.matchesSymbolContext());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.matchesObjectContext());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isEnumElementType());
      assertEquals(3, immutableList0.size());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNamedType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isNullType());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.isInterface());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isTemplatizedType());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isStructuralInterface());
      assertFalse(noResolvedType1.isNominalConstructorOrInterface());
      assertFalse(noResolvedType1.isAbstract());
      assertNull(noResolvedType1.getReferenceName());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertEquals(0, noResolvedType1.getTemplateParamCount());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.isNamedType());
      assertFalse(noResolvedType1.isUnionType());
      assertFalse(noResolvedType1.isStringValueType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertTrue(noResolvedType1.isUnsuccessfullyResolved());
      assertFalse(noResolvedType1.isLiteralObject());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertTrue(noResolvedType1.isNullable());
      assertFalse(noResolvedType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType1.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType1.isNativeObjectType());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertTrue(noResolvedType1.matchesSymbolContext());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isVoidType());
      assertNull(noResolvedType1.getClosurePrimitive());
      assertFalse(noResolvedType1.isNoObjectType());
      assertFalse(noResolvedType1.hasCachedValues());
      assertTrue(noResolvedType1.isResolved());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertFalse(noResolvedType1.isRawTypeOfTemplatizedType());
      assertNull(noResolvedType1.getGoogModuleId());
      assertFalse(noResolvedType1.isSuccessfullyResolved());
      assertFalse(noResolvedType1.isBigIntValueType());
      assertTrue(noResolvedType1.isVoidable());
      assertFalse(noResolvedType1.isAnonymous());
      assertFalse(noResolvedType1.isConstructor());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isEnumType());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertFalse(noResolvedType1.isSymbolValueType());
      assertFalse(noResolvedType1.hasInstanceType());
      assertSame(symbolType0, jSType0);
      assertSame(jSType0, symbolType0);
      assertSame(noResolvedType0, noResolvedType1);
      assertSame(noResolvedType1, noResolvedType0);
      
      TemplateType templateType1 = jSTypeRegistry0.createTemplateType((String) null, (JSType) noResolvedType1);
      assertFalse(templateType1.equals((Object)templateType0));
      assertNotNull(templateType1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isAllType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isSymbolValueType());
      assertEquals("B", templateType0.getReferenceName());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(symbolType0.isTemplateType());
      assertFalse(symbolType0.isNativeObjectType());
      assertFalse(symbolType0.isOrdinaryFunction());
      assertFalse(symbolType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(symbolType0.isResolved());
      assertFalse(symbolType0.isFunctionType());
      assertFalse(symbolType0.isAllType());
      assertFalse(symbolType0.isNullType());
      assertFalse(symbolType0.isInterface());
      assertFalse(symbolType0.isNominalConstructorOrInterface());
      assertFalse(symbolType0.isStructuralInterface());
      assertTrue(symbolType0.matchesObjectContext());
      assertFalse(symbolType0.isLiteralObject());
      assertFalse(symbolType0.isTemplatizedType());
      assertTrue(symbolType0.isSymbolValueType());
      assertEquals("symbol", symbolType0.getDisplayName());
      assertFalse(symbolType0.isEnumElementType());
      assertFalse(symbolType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, symbolType0.getPossibleToBooleanOutcomes());
      assertFalse(symbolType0.matchesNumberContext());
      assertFalse(symbolType0.isNamedType());
      assertFalse(symbolType0.isNoResolvedType());
      assertFalse(symbolType0.isBigIntValueType());
      assertFalse(symbolType0.isUnionType());
      assertTrue(symbolType0.isSuccessfullyResolved());
      assertFalse(symbolType0.isCheckedUnknownType());
      assertFalse(symbolType0.isRawTypeOfTemplatizedType());
      assertFalse(symbolType0.isNoType());
      assertFalse(symbolType0.isStringValueType());
      assertFalse(symbolType0.isNoObjectType());
      assertEquals(0, symbolType0.getTemplateParamCount());
      assertFalse(symbolType0.isEnumType());
      assertFalse(symbolType0.isConstructor());
      assertFalse(symbolType0.isVoidType());
      assertFalse(symbolType0.isFunctionPrototypeType());
      assertTrue(symbolType0.matchesSymbolContext());
      assertFalse(symbolType0.isRecordType());
      assertFalse(symbolType0.isNumberValueType());
      assertFalse(symbolType0.matchesStringContext());
      assertFalse(symbolType0.isBooleanValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.matchesNumberContext());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, jSType0.getPossibleToBooleanOutcomes());
      assertEquals("symbol", jSType0.getDisplayName());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.matchesStringContext());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.isSymbolValueType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isEnumType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.matchesSymbolContext());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.matchesObjectContext());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isEnumElementType());
      assertEquals(3, immutableList0.size());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNamedType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isNullType());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.isInterface());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isTemplatizedType());
      assertTrue(noResolvedType1.canBeCalled());
      assertTrue(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isStructuralInterface());
      assertFalse(noResolvedType1.isNominalConstructorOrInterface());
      assertFalse(noResolvedType1.isAbstract());
      assertNull(noResolvedType1.getReferenceName());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertEquals(0, noResolvedType1.getTemplateParamCount());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.isNamedType());
      assertFalse(noResolvedType1.isUnionType());
      assertFalse(noResolvedType1.isStringValueType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertTrue(noResolvedType1.isUnsuccessfullyResolved());
      assertFalse(noResolvedType1.isLiteralObject());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertTrue(noResolvedType1.isNullable());
      assertFalse(noResolvedType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType1.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType1.isNativeObjectType());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertTrue(noResolvedType1.matchesSymbolContext());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isVoidType());
      assertNull(noResolvedType1.getClosurePrimitive());
      assertFalse(noResolvedType1.isNoObjectType());
      assertTrue(noResolvedType1.isResolved());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertFalse(noResolvedType1.isRawTypeOfTemplatizedType());
      assertNull(noResolvedType1.getGoogModuleId());
      assertFalse(noResolvedType1.isSuccessfullyResolved());
      assertFalse(noResolvedType1.isBigIntValueType());
      assertTrue(noResolvedType1.isVoidable());
      assertFalse(noResolvedType1.isAnonymous());
      assertFalse(noResolvedType1.isConstructor());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isEnumType());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertFalse(noResolvedType1.isSymbolValueType());
      assertFalse(noResolvedType1.hasInstanceType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.hasCachedValues());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertTrue(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isTemplatizedType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isEnumType());
      assertTrue(templateType1.isNativeObjectType());
      assertNull(templateType1.getReferenceName());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isNumberValueType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertTrue(templateType1.isNoResolvedType());
      assertFalse(templateType1.isLiteralObject());
      assertTrue(templateType1.isObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertNotSame(templateType0, templateType1);
      assertSame(symbolType0, jSType0);
      assertSame(jSType0, symbolType0);
      assertSame(noResolvedType0, noResolvedType1);
      assertSame(noResolvedType1, noResolvedType0);
      assertNotSame(templateType1, templateType0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNamedType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isVoidable());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      
      Node node0 = noResolvedType0.getPropertyDefSite("IOBJECT_VALUE");
      assertNull(node0);
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNamedType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isVoidable());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      
      TemplateType templateType0 = jSTypeRegistry0.getAsyncIterableTemplate();
      assertNotNull(templateType0);
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRecordType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isTypeTransformation());
      assertTrue(templateType0.isObject());
      
      jSTypeRegistry0.registerNonLegacyClosureNamespace("AsyncIterable", (Node) null, noResolvedType0);
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNamedType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isVoidable());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry0.buildRecordTypeFromObject(templateType0);
      assertNotNull(instanceObjectType0);
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRecordType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isTypeTransformation());
      assertTrue(templateType0.isObject());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNoType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      
      String string0 = instanceObjectType0.toString();
      assertNotNull(string0);
      assertEquals("Object", string0);
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRecordType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isTypeTransformation());
      assertTrue(templateType0.isObject());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNoType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      
      boolean boolean0 = jSTypeRegistry0.isForwardDeclaredType((String) null);
      assertFalse(boolean0);
      
      HashMap<TemplateType, TemplateType> hashMap0 = new HashMap<TemplateType, TemplateType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<TemplateType, JSType> hashMap1 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      JSType jSType0 = hashMap1.put(templateType0, instanceObjectType0);
      assertNull(jSType0);
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRecordType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isTypeTransformation());
      assertTrue(templateType0.isObject());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNoType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      
      UnknownType unknownType0 = (UnknownType)noResolvedType0.getReturnType();
      assertNotNull(unknownType0);
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNamedType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isVoidable());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNamedType());
      assertFalse(unknownType0.isBigIntValueType());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertTrue(unknownType0.isObject());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertTrue(unknownType0.matchesObjectContext());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertFalse(unknownType0.isStructuralInterface());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertFalse(unknownType0.isEnumType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isResolved());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isLiteralObject());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isTemplatizedType());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isSymbolValueType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isNoType());
      
      InstanceObjectType instanceObjectType1 = (InstanceObjectType)hashMap1.put(templateType0, unknownType0);
      assertNotNull(instanceObjectType1);
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNamedType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isVoidable());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRecordType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isTypeTransformation());
      assertTrue(templateType0.isObject());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNamedType());
      assertFalse(unknownType0.isBigIntValueType());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertTrue(unknownType0.isObject());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertTrue(unknownType0.matchesObjectContext());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertFalse(unknownType0.isStructuralInterface());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertFalse(unknownType0.isEnumType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isResolved());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isLiteralObject());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isTemplatizedType());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isSymbolValueType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isNoType());
      assertFalse(instanceObjectType1.isEnumType());
      assertFalse(instanceObjectType1.isTemplatizedType());
      assertFalse(instanceObjectType1.isNoResolvedType());
      assertTrue(instanceObjectType1.isSuccessfullyResolved());
      assertFalse(instanceObjectType1.isAllType());
      assertFalse(instanceObjectType1.isBigIntValueType());
      assertFalse(instanceObjectType1.isVoidType());
      assertFalse(instanceObjectType1.isEnumElementType());
      assertTrue(instanceObjectType1.matchesObjectContext());
      assertFalse(instanceObjectType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals(2, instanceObjectType1.getTemplateParamCount());
      assertTrue(instanceObjectType1.isObject());
      assertFalse(instanceObjectType1.isNumberValueType());
      assertFalse(instanceObjectType1.isUnionType());
      assertFalse(instanceObjectType1.isNullType());
      assertFalse(instanceObjectType1.isNoType());
      assertFalse(instanceObjectType1.isBooleanValueType());
      assertFalse(instanceObjectType1.isNoObjectType());
      assertFalse(instanceObjectType1.isCheckedUnknownType());
      assertTrue(instanceObjectType1.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType1.hasCachedValues());
      assertFalse(instanceObjectType1.isSymbolValueType());
      assertFalse(instanceObjectType1.isAnonymous());
      assertTrue(instanceObjectType1.isInstanceType());
      assertFalse(instanceObjectType1.isConstructor());
      assertFalse(instanceObjectType1.isFunctionPrototypeType());
      assertFalse(instanceObjectType1.isRecordType());
      assertFalse(instanceObjectType1.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType1.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType1.isFunctionType());
      assertFalse(instanceObjectType1.isLiteralObject());
      assertFalse(instanceObjectType1.isNamedType());
      assertTrue(instanceObjectType1.isNativeObjectType());
      assertFalse(instanceObjectType1.isTemplateType());
      assertFalse(instanceObjectType1.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType1.isStringValueType());
      assertFalse(instanceObjectType1.isOrdinaryFunction());
      assertFalse(instanceObjectType1.isStructuralInterface());
      assertFalse(instanceObjectType1.isNominalConstructorOrInterface());
      assertTrue(instanceObjectType1.isResolved());
      assertSame(instanceObjectType1, instanceObjectType0);
      
      boolean boolean1 = jSTypeRegistry0.isForwardDeclaredType("Object");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap2 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap2);
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap2, false);
      assertNotNull(recordType0);
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isAnonymous());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isLiteralObject());
      assertFalse(recordType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNominalConstructorOrInterface());
      assertFalse(recordType0.isBigIntValueType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isBooleanValueType());
      assertEquals(0, recordType0.getTemplateParamCount());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasCachedValues());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isTemplatizedType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isStructuralInterface());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isSymbolValueType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isRawTypeOfTemplatizedType());
      assertTrue(recordType0.isResolved());
      assertTrue(recordType0.isSuccessfullyResolved());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isUnsuccessfullyResolved());
      assertTrue(recordType0.isStructuralType());
      assertFalse(recordType0.isAllType());
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      
      RecordType recordType1 = recordType0.toMaybeRecordType();
      assertNotNull(recordType1);
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isAnonymous());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isLiteralObject());
      assertFalse(recordType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNominalConstructorOrInterface());
      assertFalse(recordType0.isBigIntValueType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isBooleanValueType());
      assertEquals(0, recordType0.getTemplateParamCount());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasCachedValues());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isTemplatizedType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isStructuralInterface());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isSymbolValueType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isRawTypeOfTemplatizedType());
      assertTrue(recordType0.isResolved());
      assertTrue(recordType0.isSuccessfullyResolved());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isUnsuccessfullyResolved());
      assertTrue(recordType0.isStructuralType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType1.isLiteralObject());
      assertFalse(recordType1.isNominalConstructorOrInterface());
      assertFalse(recordType1.isFunctionPrototypeType());
      assertFalse(recordType1.isConstructor());
      assertFalse(recordType1.isRawTypeOfTemplatizedType());
      assertFalse(recordType1.isNoObjectType());
      assertFalse(recordType1.isNoType());
      assertTrue(recordType1.isObject());
      assertFalse(recordType1.isInterface());
      assertFalse(recordType1.isFunctionType());
      assertTrue(recordType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertFalse(recordType1.isNamedType());
      assertTrue(recordType1.isSuccessfullyResolved());
      assertFalse(recordType1.isOrdinaryFunction());
      assertFalse(recordType1.isAllType());
      assertFalse(recordType1.isAnonymous());
      assertFalse(recordType1.isTemplatizedType());
      assertFalse(recordType1.isUnsuccessfullyResolved());
      assertFalse(recordType1.isTemplateType());
      assertFalse(recordType1.isStructuralInterface());
      assertTrue(recordType1.isStructuralType());
      assertFalse(recordType1.isEnumElementType());
      assertFalse(recordType1.isSymbolValueType());
      assertFalse(recordType1.isNullType());
      assertFalse(recordType1.isStringValueType());
      assertFalse(recordType1.isNoResolvedType());
      assertFalse(recordType1.isNumberValueType());
      assertFalse(recordType1.isCheckedUnknownType());
      assertTrue(recordType1.isRecordType());
      assertFalse(recordType1.isBigIntValueType());
      assertFalse(recordType1.hasCachedValues());
      assertFalse(recordType1.isNativeObjectType());
      assertFalse(recordType1.isBooleanValueType());
      assertFalse(recordType1.isVoidType());
      assertEquals(0, recordType1.getTemplateParamCount());
      assertTrue(recordType1.matchesObjectContext());
      assertFalse(recordType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType1.isUnionType());
      assertFalse(recordType1.isEnumType());
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      assertSame(recordType0, recordType1);
      assertSame(recordType1, recordType0);
      
      RecordType recordType2 = noResolvedType0.toMaybeRecordType();
      assertNull(recordType2);
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNamedType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isVoidable());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      
      jSTypeRegistry0.registerDroppedPropertiesInUnion(recordType1, (RecordType) null);
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isAnonymous());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isLiteralObject());
      assertFalse(recordType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNominalConstructorOrInterface());
      assertFalse(recordType0.isBigIntValueType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isBooleanValueType());
      assertEquals(0, recordType0.getTemplateParamCount());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasCachedValues());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isTemplatizedType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isStructuralInterface());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isSymbolValueType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isRawTypeOfTemplatizedType());
      assertTrue(recordType0.isResolved());
      assertTrue(recordType0.isSuccessfullyResolved());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isUnsuccessfullyResolved());
      assertTrue(recordType0.isStructuralType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType1.isLiteralObject());
      assertFalse(recordType1.isNominalConstructorOrInterface());
      assertFalse(recordType1.isFunctionPrototypeType());
      assertFalse(recordType1.isConstructor());
      assertFalse(recordType1.isRawTypeOfTemplatizedType());
      assertFalse(recordType1.isNoObjectType());
      assertFalse(recordType1.isNoType());
      assertTrue(recordType1.isObject());
      assertFalse(recordType1.isInterface());
      assertFalse(recordType1.isFunctionType());
      assertTrue(recordType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertFalse(recordType1.isNamedType());
      assertTrue(recordType1.isSuccessfullyResolved());
      assertFalse(recordType1.isOrdinaryFunction());
      assertFalse(recordType1.isAllType());
      assertFalse(recordType1.isAnonymous());
      assertFalse(recordType1.isTemplatizedType());
      assertFalse(recordType1.isUnsuccessfullyResolved());
      assertFalse(recordType1.isTemplateType());
      assertFalse(recordType1.isStructuralInterface());
      assertTrue(recordType1.isStructuralType());
      assertFalse(recordType1.isEnumElementType());
      assertFalse(recordType1.isSymbolValueType());
      assertFalse(recordType1.isNullType());
      assertFalse(recordType1.isStringValueType());
      assertFalse(recordType1.isNoResolvedType());
      assertFalse(recordType1.isNumberValueType());
      assertFalse(recordType1.isCheckedUnknownType());
      assertTrue(recordType1.isRecordType());
      assertFalse(recordType1.isBigIntValueType());
      assertFalse(recordType1.hasCachedValues());
      assertFalse(recordType1.isNativeObjectType());
      assertFalse(recordType1.isBooleanValueType());
      assertFalse(recordType1.isVoidType());
      assertEquals(0, recordType1.getTemplateParamCount());
      assertTrue(recordType1.matchesObjectContext());
      assertFalse(recordType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType1.isUnionType());
      assertFalse(recordType1.isEnumType());
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      assertSame(recordType0, recordType1);
      assertSame(recordType1, recordType0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.I_THENABLE_TYPE;
      InstanceObjectType instanceObjectType2 = (InstanceObjectType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertFalse(instanceObjectType2.equals((Object)instanceObjectType0));
      assertFalse(instanceObjectType2.equals((Object)instanceObjectType1));
      assertNotNull(instanceObjectType2);
      assertTrue(instanceObjectType2.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType2.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType2.isNoObjectType());
      assertFalse(instanceObjectType2.isFunctionPrototypeType());
      assertFalse(instanceObjectType2.isNoType());
      assertFalse(instanceObjectType2.isConstructor());
      assertTrue(instanceObjectType2.isObject());
      assertFalse(instanceObjectType2.isInterface());
      assertFalse(instanceObjectType2.isNominalConstructorOrInterface());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType2.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType2.isOrdinaryFunction());
      assertFalse(instanceObjectType2.isFunctionType());
      assertTrue(instanceObjectType2.isResolved());
      assertTrue(instanceObjectType2.isSuccessfullyResolved());
      assertTrue(instanceObjectType2.isInstanceType());
      assertFalse(instanceObjectType2.isNamedType());
      assertEquals(1, instanceObjectType2.getTemplateParamCount());
      assertFalse(instanceObjectType2.isAnonymous());
      assertFalse(instanceObjectType2.isTemplatizedType());
      assertFalse(instanceObjectType2.isAllType());
      assertFalse(instanceObjectType2.isTemplateType());
      assertFalse(instanceObjectType2.isEnumElementType());
      assertFalse(instanceObjectType2.isLiteralObject());
      assertTrue(instanceObjectType2.isNativeObjectType());
      assertFalse(instanceObjectType2.isStructuralInterface());
      assertFalse(instanceObjectType2.isSymbolValueType());
      assertFalse(instanceObjectType2.isNullType());
      assertFalse(instanceObjectType2.isCheckedUnknownType());
      assertFalse(instanceObjectType2.isStringValueType());
      assertFalse(instanceObjectType2.isNumberValueType());
      assertTrue(instanceObjectType2.matchesObjectContext());
      assertFalse(instanceObjectType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType2.isEnumType());
      assertFalse(instanceObjectType2.isBooleanValueType());
      assertFalse(instanceObjectType2.isBigIntValueType());
      assertFalse(instanceObjectType2.isVoidType());
      assertFalse(instanceObjectType2.isRecordType());
      assertFalse(instanceObjectType2.isUnionType());
      assertTrue(instanceObjectType2.hasCachedValues());
      assertFalse(instanceObjectType2.isNoResolvedType());
      assertNotSame(instanceObjectType2, instanceObjectType0);
      assertNotSame(instanceObjectType2, instanceObjectType1);
      
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) recordType1, (Map<TemplateType, JSType>) hashMap1);
      assertNotNull(templatizedType0);
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isAnonymous());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isLiteralObject());
      assertFalse(recordType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNominalConstructorOrInterface());
      assertFalse(recordType0.isBigIntValueType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isBooleanValueType());
      assertEquals(0, recordType0.getTemplateParamCount());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasCachedValues());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isTemplatizedType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isStructuralInterface());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isSymbolValueType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isRawTypeOfTemplatizedType());
      assertTrue(recordType0.isResolved());
      assertTrue(recordType0.isSuccessfullyResolved());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isUnsuccessfullyResolved());
      assertTrue(recordType0.isStructuralType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType1.isLiteralObject());
      assertFalse(recordType1.isNominalConstructorOrInterface());
      assertFalse(recordType1.isFunctionPrototypeType());
      assertFalse(recordType1.isConstructor());
      assertFalse(recordType1.isRawTypeOfTemplatizedType());
      assertFalse(recordType1.isNoObjectType());
      assertFalse(recordType1.isNoType());
      assertTrue(recordType1.isObject());
      assertFalse(recordType1.isInterface());
      assertFalse(recordType1.isFunctionType());
      assertTrue(recordType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertFalse(recordType1.isNamedType());
      assertTrue(recordType1.isSuccessfullyResolved());
      assertFalse(recordType1.isOrdinaryFunction());
      assertFalse(recordType1.isAllType());
      assertFalse(recordType1.isAnonymous());
      assertFalse(recordType1.isTemplatizedType());
      assertFalse(recordType1.isUnsuccessfullyResolved());
      assertFalse(recordType1.isTemplateType());
      assertFalse(recordType1.isStructuralInterface());
      assertTrue(recordType1.isStructuralType());
      assertFalse(recordType1.isEnumElementType());
      assertFalse(recordType1.isSymbolValueType());
      assertFalse(recordType1.isNullType());
      assertFalse(recordType1.isStringValueType());
      assertFalse(recordType1.isNoResolvedType());
      assertFalse(recordType1.isNumberValueType());
      assertFalse(recordType1.isCheckedUnknownType());
      assertTrue(recordType1.isRecordType());
      assertFalse(recordType1.isBigIntValueType());
      assertFalse(recordType1.hasCachedValues());
      assertFalse(recordType1.isNativeObjectType());
      assertFalse(recordType1.isBooleanValueType());
      assertFalse(recordType1.isVoidType());
      assertEquals(0, recordType1.getTemplateParamCount());
      assertTrue(recordType1.matchesObjectContext());
      assertFalse(recordType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType1.isUnionType());
      assertFalse(recordType1.isEnumType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertTrue(templatizedType0.isRecordType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isFunctionType());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isNamedType());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertTrue(templatizedType0.isObject());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isNoType());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isNativeObjectType());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      assertSame(recordType0, recordType1);
      assertSame(recordType1, recordType0);
      
      RecordType recordType3 = (RecordType)jSTypeRegistry0.buildRecordTypeFromObject(templatizedType0);
      assertNotNull(recordType3);
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isAnonymous());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isLiteralObject());
      assertFalse(recordType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNominalConstructorOrInterface());
      assertFalse(recordType0.isBigIntValueType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isBooleanValueType());
      assertEquals(0, recordType0.getTemplateParamCount());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasCachedValues());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isTemplatizedType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isStructuralInterface());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isSymbolValueType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isRawTypeOfTemplatizedType());
      assertTrue(recordType0.isResolved());
      assertTrue(recordType0.isSuccessfullyResolved());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isUnsuccessfullyResolved());
      assertTrue(recordType0.isStructuralType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType1.isLiteralObject());
      assertFalse(recordType1.isNominalConstructorOrInterface());
      assertFalse(recordType1.isFunctionPrototypeType());
      assertFalse(recordType1.isConstructor());
      assertFalse(recordType1.isRawTypeOfTemplatizedType());
      assertFalse(recordType1.isNoObjectType());
      assertFalse(recordType1.isNoType());
      assertTrue(recordType1.isObject());
      assertFalse(recordType1.isInterface());
      assertFalse(recordType1.isFunctionType());
      assertTrue(recordType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertFalse(recordType1.isNamedType());
      assertTrue(recordType1.isSuccessfullyResolved());
      assertFalse(recordType1.isOrdinaryFunction());
      assertFalse(recordType1.isAllType());
      assertFalse(recordType1.isAnonymous());
      assertFalse(recordType1.isTemplatizedType());
      assertFalse(recordType1.isUnsuccessfullyResolved());
      assertFalse(recordType1.isTemplateType());
      assertFalse(recordType1.isStructuralInterface());
      assertTrue(recordType1.isStructuralType());
      assertFalse(recordType1.isEnumElementType());
      assertFalse(recordType1.isSymbolValueType());
      assertFalse(recordType1.isNullType());
      assertFalse(recordType1.isStringValueType());
      assertFalse(recordType1.isNoResolvedType());
      assertFalse(recordType1.isNumberValueType());
      assertFalse(recordType1.isCheckedUnknownType());
      assertTrue(recordType1.isRecordType());
      assertFalse(recordType1.isBigIntValueType());
      assertFalse(recordType1.hasCachedValues());
      assertFalse(recordType1.isNativeObjectType());
      assertFalse(recordType1.isBooleanValueType());
      assertFalse(recordType1.isVoidType());
      assertEquals(0, recordType1.getTemplateParamCount());
      assertTrue(recordType1.matchesObjectContext());
      assertFalse(recordType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType1.isUnionType());
      assertFalse(recordType1.isEnumType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertTrue(templatizedType0.isRecordType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isFunctionType());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isNamedType());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertTrue(templatizedType0.isObject());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isNoType());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isNativeObjectType());
      assertFalse(recordType3.isStringValueType());
      assertTrue(recordType3.isSuccessfullyResolved());
      assertFalse(recordType3.isUnionType());
      assertFalse(recordType3.isNumberValueType());
      assertFalse(recordType3.isBigIntValueType());
      assertTrue(recordType3.matchesObjectContext());
      assertFalse(recordType3.isNamedType());
      assertFalse(recordType3.isNoType());
      assertFalse(recordType3.isRawTypeOfTemplatizedType());
      assertFalse(recordType3.isNoObjectType());
      assertFalse(recordType3.isCheckedUnknownType());
      assertTrue(recordType3.isObject());
      assertFalse(recordType3.isLiteralObject());
      assertFalse(recordType3.isStructuralInterface());
      assertFalse(recordType3.isNominalConstructorOrInterface());
      assertFalse(recordType3.isEnumElementType());
      assertTrue(recordType3.isStructuralType());
      assertFalse(recordType3.isAllType());
      assertFalse(recordType3.isAnonymous());
      assertFalse(recordType3.isTemplatizedType());
      assertFalse(recordType3.isUnsuccessfullyResolved());
      assertFalse(recordType3.isTemplateType());
      assertTrue(recordType3.isResolved());
      assertFalse(recordType3.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, recordType3.getPossibleToBooleanOutcomes());
      assertFalse(recordType3.hasCachedValues());
      assertFalse(recordType3.isNativeObjectType());
      assertFalse(recordType3.isOrdinaryFunction());
      assertFalse(recordType3.isNullType());
      assertFalse(recordType3.isSymbolValueType());
      assertFalse(recordType3.isInterface());
      assertFalse(recordType3.isFunctionPrototypeType());
      assertFalse(recordType3.isConstructor());
      assertFalse(recordType3.isVoidType());
      assertFalse(recordType3.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals(0, recordType3.getTemplateParamCount());
      assertFalse(recordType3.isBooleanValueType());
      assertTrue(recordType3.isRecordType());
      assertFalse(recordType3.isEnumType());
      assertFalse(recordType3.isNoResolvedType());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      assertSame(recordType0, recordType3);
      assertSame(recordType0, recordType1);
      assertSame(recordType1, recordType0);
      assertSame(recordType1, recordType3);
      assertSame(recordType3, recordType1);
      assertSame(recordType3, recordType0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("IOBJECT_VALUE");
      assertNotNull(templateType0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isTypeTransformation());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isNoObjectType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      TemplateType templateType1 = new TemplateType(jSTypeRegistry0, "IOBJECT_VALUE");
      assertFalse(templateType1.equals((Object)templateType0));
      assertNotNull(templateType1);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isNullType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isStructuralInterface());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isConstructor());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isRecordType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isNumberValueType());
      assertEquals("IOBJECT_VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isTemplatizedType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      jSTypeRegistry0.registerPropertyOnType("&2eE.", templateType1);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(templateType1.equals((Object)templateType0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isNullType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isStructuralInterface());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isConstructor());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isRecordType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isNumberValueType());
      assertEquals("IOBJECT_VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isTemplatizedType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(linkedHashSet0.contains("&2eE."));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(templateType1, templateType0);
      
      TemplateType templateType2 = jSTypeRegistry1.createTemplateType("&2eE.");
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(templateType2.equals((Object)templateType1));
      assertFalse(templateType2.equals((Object)templateType0));
      assertNotNull(templateType2);
      assertFalse(templateType2.isAllType());
      assertFalse(templateType2.isNativeObjectType());
      assertFalse(templateType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType2.isNullType());
      assertFalse(templateType2.isStructuralInterface());
      assertFalse(templateType2.isBooleanValueType());
      assertFalse(templateType2.isInterface());
      assertTrue(templateType2.isResolved());
      assertFalse(templateType2.isOrdinaryFunction());
      assertFalse(templateType2.isSymbolValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertTrue(templateType2.hasAnyTemplateTypesInternal());
      assertFalse(templateType2.isNoResolvedType());
      assertFalse(templateType2.isCheckedUnknownType());
      assertTrue(templateType2.isSuccessfullyResolved());
      assertFalse(templateType2.isNamedType());
      assertFalse(templateType2.isTemplatizedType());
      assertFalse(templateType2.isEnumElementType());
      assertFalse(templateType2.isFunctionType());
      assertFalse(templateType2.isLiteralObject());
      assertTrue(templateType2.isTemplateType());
      assertEquals("&2eE.", templateType2.getReferenceName());
      assertFalse(templateType2.isUnsuccessfullyResolved());
      assertFalse(templateType2.isRawTypeOfTemplatizedType());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertTrue(templateType2.isObject());
      assertFalse(templateType2.isTypeTransformation());
      assertFalse(templateType2.isNominalConstructorOrInterface());
      assertFalse(templateType2.hasCachedValues());
      assertFalse(templateType2.isStringValueType());
      assertFalse(templateType2.isConstructor());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isEnumType());
      assertFalse(templateType2.isNoType());
      assertFalse(templateType2.isNoObjectType());
      assertEquals(0, templateType2.getTemplateParamCount());
      assertFalse(templateType2.isRecordType());
      assertFalse(templateType2.isVoidType());
      assertFalse(templateType2.isUnionType());
      assertFalse(templateType2.isBigIntValueType());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(templateType2, templateType1);
      assertNotSame(templateType2, templateType0);
      
      boolean boolean0 = jSTypeRegistry1.isForwardDeclaredType("&2eE.");
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(boolean0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      
      Token token0 = Token.ASSIGN_BITAND;
      Node node0 = new Node(token0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isSpread());
      assertFalse(node0.isSuper());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isAwait());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExponent());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExport());
      assertFalse(node0.isContinue());
      assertFalse(node0.isForIn());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSub());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isName());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRoot());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isDo());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isEQ());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isLet());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.hasParent());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isRest());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isConst());
      assertFalse(node0.isWhile());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(Token.ASSIGN_BITAND, node0.getToken());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isCall());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isCallSignature());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isForOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isNeg());
      assertFalse(node0.isLabel());
      
      JSType[] jSTypeArray0 = new JSType[4];
      jSTypeArray0[0] = (JSType) templateType1;
      jSTypeArray0[1] = (JSType) templateType0;
      jSTypeArray0[2] = (JSType) templateType0;
      jSTypeArray0[3] = (JSType) templateType2;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, jSTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertNotNull(jSTypeRegistry0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      TemplateType templateType0 = jSTypeRegistry1.createTemplateType("%qh?XuEDVw");
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(templateType0);
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertEquals("%qh?XuEDVw", templateType0.getReferenceName());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isEnumType());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      
      Token token0 = Token.BLOCK;
      Node node0 = new Node(token0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isExponent());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isVar());
      assertFalse(node0.isLet());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isExport());
      assertFalse(node0.isCast());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSuper());
      assertFalse(node0.hasParent());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isSpread());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCase());
      assertFalse(node0.isForOf());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isFalse());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isRest());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isBitNot());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignExponent());
      assertEquals(Token.BLOCK, node0.getToken());
      assertFalse(node0.isDo());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isClass());
      assertFalse(node0.isNumber());
      assertFalse(node0.isImport());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isNeg());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNot());
      assertFalse(node0.isForIn());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isRoot());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isConst());
      assertFalse(node0.isExportSpecs());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isInc());
      assertTrue(node0.isNormalBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSub());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isStringLit());
      
      Token token1 = Token.STAR;
      Node node1 = new Node(token1, node0);
      assertFalse(token0.equals((Object)token1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node1);
      assertFalse(node0.isExponent());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isVar());
      assertFalse(node0.isLet());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isExport());
      assertFalse(node0.isCast());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSuper());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isSpread());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCase());
      assertFalse(node0.isForOf());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isFalse());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isRest());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isBitNot());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignExponent());
      assertEquals(Token.BLOCK, node0.getToken());
      assertFalse(node0.isDo());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isClass());
      assertFalse(node0.isNumber());
      assertFalse(node0.isImport());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isNeg());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNot());
      assertFalse(node0.isForIn());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isRoot());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isConst());
      assertFalse(node0.isExportSpecs());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isInc());
      assertTrue(node0.isNormalBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasParent());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSub());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isStringLit());
      assertFalse(node1.isRest());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isArrayPattern());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isExportSpec());
      assertFalse(node1.isComputedProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNormalBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isIndexSignature());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWith());
      assertFalse(node1.isHook());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isInc());
      assertFalse(node1.isYield());
      assertFalse(node1.isWhile());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isDefaultValue());
      assertFalse(node1.isString());
      assertFalse(node1.isConst());
      assertFalse(node1.isIn());
      assertFalse(node1.isAssignExponent());
      assertFalse(node1.isDestructuringLhs());
      assertFalse(node1.isMemberFunctionDef());
      assertFalse(node1.isTemplateLitString());
      assertFalse(node1.isMemberVariableDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isOptChainGetProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isImportSpecs());
      assertFalse(node1.isTrue());
      assertFalse(node1.isStringLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSub());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isAssignNullishCoalesce());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isRoot());
      assertFalse(node1.isCatch());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTemplateLitSub());
      assertFalse(node1.isClassMembers());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isExportSpecs());
      assertFalse(node1.isEQ());
      assertFalse(node1.isBlock());
      assertNull(node1.getOriginalName());
      assertFalse(node1.isDo());
      assertFalse(node1.isLet());
      assertFalse(node1.isAssignAnd());
      assertFalse(node1.isNullishCoalesce());
      assertFalse(node1.isTaggedTemplateLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isImportStar());
      assertFalse(node1.isOr());
      assertFalse(node1.isParamList());
      assertFalse(node1.isModuleBody());
      assertFalse(node1.isTemplateLit());
      assertFalse(node1.isForIn());
      assertFalse(node1.isSHNE());
      assertFalse(node1.hasTwoChildren());
      assertFalse(node1.isDestructuringPattern());
      assertFalse(node1.isVar());
      assertFalse(node1.isOptChainCall());
      assertFalse(node1.hasParent());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isSpread());
      assertFalse(node1.isObjectRest());
      assertFalse(node1.isThis());
      assertFalse(node1.isSHEQ());
      assertFalse(node1.isAwait());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isMemberFieldDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isImportMeta());
      assertFalse(node1.isSuper());
      assertFalse(node1.isComma());
      assertFalse(node1.isExponent());
      assertFalse(node1.isVanillaFor());
      assertFalse(node1.isBitNot());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isForAwaitOf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isExport());
      assertFalse(node1.isFunction());
      assertEquals(Token.STAR, node1.getToken());
      assertFalse(node1.isTry());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isRecordType());
      assertFalse(node1.isInterfaceMembers());
      assertFalse(node1.isForOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isCall());
      assertFalse(node1.isBigInt());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isObjectPattern());
      assertTrue(node1.hasZeroOrOneChild());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertFalse(node1.isAssignOr());
      assertFalse(node1.isComputedFieldDef());
      assertFalse(node1.isOptChainGetElem());
      assertFalse(node1.isCallSignature());
      assertFalse(node1.isClass());
      assertFalse(node1.isImport());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNeg());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isImportSpec());
      assertFalse(node1.isLabel());
      
      JSType jSType0 = jSTypeRegistry1.createTypeFromCommentNode(node1);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(token0.equals((Object)token1));
      assertFalse(node0.equals((Object)node1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSType0);
      assertFalse(node0.isExponent());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isVar());
      assertFalse(node0.isLet());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isExport());
      assertFalse(node0.isCast());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSuper());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isSpread());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCase());
      assertFalse(node0.isForOf());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isFalse());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isRest());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isBitNot());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignExponent());
      assertEquals(Token.BLOCK, node0.getToken());
      assertFalse(node0.isDo());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isClass());
      assertFalse(node0.isNumber());
      assertFalse(node0.isImport());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isNeg());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNot());
      assertFalse(node0.isForIn());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isRoot());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isConst());
      assertFalse(node0.isExportSpecs());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isInc());
      assertTrue(node0.isNormalBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasParent());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSub());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isStringLit());
      assertFalse(node1.isRest());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isArrayPattern());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isExportSpec());
      assertFalse(node1.isComputedProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNormalBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isIndexSignature());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWith());
      assertFalse(node1.isHook());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isInc());
      assertFalse(node1.isYield());
      assertFalse(node1.isWhile());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isDefaultValue());
      assertFalse(node1.isString());
      assertFalse(node1.isConst());
      assertFalse(node1.isIn());
      assertFalse(node1.isAssignExponent());
      assertFalse(node1.isDestructuringLhs());
      assertFalse(node1.isMemberFunctionDef());
      assertFalse(node1.isTemplateLitString());
      assertFalse(node1.isMemberVariableDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isOptChainGetProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isImportSpecs());
      assertFalse(node1.isTrue());
      assertFalse(node1.isStringLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSub());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isAssignNullishCoalesce());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isRoot());
      assertFalse(node1.isCatch());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTemplateLitSub());
      assertFalse(node1.isClassMembers());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isExportSpecs());
      assertFalse(node1.isEQ());
      assertFalse(node1.isBlock());
      assertNull(node1.getOriginalName());
      assertFalse(node1.isDo());
      assertFalse(node1.isLet());
      assertFalse(node1.isAssignAnd());
      assertFalse(node1.isNullishCoalesce());
      assertFalse(node1.isTaggedTemplateLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isImportStar());
      assertFalse(node1.isOr());
      assertFalse(node1.isParamList());
      assertFalse(node1.isModuleBody());
      assertFalse(node1.isTemplateLit());
      assertFalse(node1.isForIn());
      assertFalse(node1.isSHNE());
      assertFalse(node1.hasTwoChildren());
      assertFalse(node1.isDestructuringPattern());
      assertFalse(node1.isVar());
      assertFalse(node1.isOptChainCall());
      assertFalse(node1.hasParent());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isSpread());
      assertFalse(node1.isObjectRest());
      assertFalse(node1.isThis());
      assertFalse(node1.isSHEQ());
      assertFalse(node1.isAwait());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isMemberFieldDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isImportMeta());
      assertFalse(node1.isSuper());
      assertFalse(node1.isComma());
      assertFalse(node1.isExponent());
      assertFalse(node1.isVanillaFor());
      assertFalse(node1.isBitNot());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isForAwaitOf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isExport());
      assertFalse(node1.isFunction());
      assertEquals(Token.STAR, node1.getToken());
      assertFalse(node1.isTry());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isRecordType());
      assertFalse(node1.isInterfaceMembers());
      assertFalse(node1.isForOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isCall());
      assertFalse(node1.isBigInt());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isObjectPattern());
      assertTrue(node1.hasZeroOrOneChild());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertFalse(node1.isAssignOr());
      assertFalse(node1.isComputedFieldDef());
      assertFalse(node1.isOptChainGetElem());
      assertFalse(node1.isCallSignature());
      assertFalse(node1.isClass());
      assertFalse(node1.isImport());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNeg());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isImportSpec());
      assertFalse(node1.isLabel());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.isNullable());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isTemplatizedType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.isVoidable());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNativeObjectType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertTrue(jSType0.hasDisplayName());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(token0, token1);
      assertNotSame(node0, node1);
      assertNotSame(token1, token0);
      assertNotSame(node1, node0);
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      TemplateTypeReplacer templateTypeReplacer0 = TemplateTypeReplacer.forInference(jSTypeRegistry0, hashMap0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(templateTypeReplacer0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(linkedHashSet0.contains("%qh?XuEDVw"));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      
      ImmutableList<TemplateType> immutableList0 = jSTypeRegistry0.maybeGetTemplateTypesOfBuiltin("%qh?XuEDVw");
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNull(immutableList0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("%qh?XuEDVw"));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(errorReporter0, treeSet0);
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertNotNull(jSTypeRegistry2);
      assertFalse(treeSet0.contains("%qh?XuEDVw"));
      
      JSType jSType1 = jSTypeRegistry2.createNullableType(jSType0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertFalse(token0.equals((Object)token1));
      assertFalse(node0.equals((Object)node1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(node1.equals((Object)node0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(jSType1.equals((Object)jSType0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSType1);
      assertFalse(node0.isExponent());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isVar());
      assertFalse(node0.isLet());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isExport());
      assertFalse(node0.isCast());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSuper());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isSpread());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCase());
      assertFalse(node0.isForOf());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isFalse());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isRest());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isBitNot());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignExponent());
      assertEquals(Token.BLOCK, node0.getToken());
      assertFalse(node0.isDo());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isClass());
      assertFalse(node0.isNumber());
      assertFalse(node0.isImport());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isNeg());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNot());
      assertFalse(node0.isForIn());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isRoot());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isConst());
      assertFalse(node0.isExportSpecs());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isInc());
      assertTrue(node0.isNormalBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasParent());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSub());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isStringLit());
      assertFalse(node1.isRest());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isArrayPattern());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isExportSpec());
      assertFalse(node1.isComputedProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNormalBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isIndexSignature());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWith());
      assertFalse(node1.isHook());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isInc());
      assertFalse(node1.isYield());
      assertFalse(node1.isWhile());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isDefaultValue());
      assertFalse(node1.isString());
      assertFalse(node1.isConst());
      assertFalse(node1.isIn());
      assertFalse(node1.isAssignExponent());
      assertFalse(node1.isDestructuringLhs());
      assertFalse(node1.isMemberFunctionDef());
      assertFalse(node1.isTemplateLitString());
      assertFalse(node1.isMemberVariableDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isOptChainGetProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isImportSpecs());
      assertFalse(node1.isTrue());
      assertFalse(node1.isStringLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSub());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isAssignNullishCoalesce());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isRoot());
      assertFalse(node1.isCatch());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTemplateLitSub());
      assertFalse(node1.isClassMembers());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isExportSpecs());
      assertFalse(node1.isEQ());
      assertFalse(node1.isBlock());
      assertNull(node1.getOriginalName());
      assertFalse(node1.isDo());
      assertFalse(node1.isLet());
      assertFalse(node1.isAssignAnd());
      assertFalse(node1.isNullishCoalesce());
      assertFalse(node1.isTaggedTemplateLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isImportStar());
      assertFalse(node1.isOr());
      assertFalse(node1.isParamList());
      assertFalse(node1.isModuleBody());
      assertFalse(node1.isTemplateLit());
      assertFalse(node1.isForIn());
      assertFalse(node1.isSHNE());
      assertFalse(node1.hasTwoChildren());
      assertFalse(node1.isDestructuringPattern());
      assertFalse(node1.isVar());
      assertFalse(node1.isOptChainCall());
      assertFalse(node1.hasParent());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isSpread());
      assertFalse(node1.isObjectRest());
      assertFalse(node1.isThis());
      assertFalse(node1.isSHEQ());
      assertFalse(node1.isAwait());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isMemberFieldDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isImportMeta());
      assertFalse(node1.isSuper());
      assertFalse(node1.isComma());
      assertFalse(node1.isExponent());
      assertFalse(node1.isVanillaFor());
      assertFalse(node1.isBitNot());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isForAwaitOf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isExport());
      assertFalse(node1.isFunction());
      assertEquals(Token.STAR, node1.getToken());
      assertFalse(node1.isTry());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isRecordType());
      assertFalse(node1.isInterfaceMembers());
      assertFalse(node1.isForOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isCall());
      assertFalse(node1.isBigInt());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isObjectPattern());
      assertTrue(node1.hasZeroOrOneChild());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertFalse(node1.isAssignOr());
      assertFalse(node1.isComputedFieldDef());
      assertFalse(node1.isOptChainGetElem());
      assertFalse(node1.isCallSignature());
      assertFalse(node1.isClass());
      assertFalse(node1.isImport());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNeg());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isImportSpec());
      assertFalse(node1.isLabel());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.isNullable());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isTemplatizedType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.isVoidable());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNativeObjectType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertTrue(jSType0.hasDisplayName());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertFalse(jSType1.isOrdinaryFunction());
      assertEquals("<Any Type>", jSType1.getDisplayName());
      assertTrue(jSType1.isResolved());
      assertFalse(jSType1.isFunctionType());
      assertTrue(jSType1.matchesObjectContext());
      assertFalse(jSType1.isBooleanValueType());
      assertFalse(jSType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType1.isRecordType());
      assertFalse(jSType1.isTemplateType());
      assertFalse(jSType1.isConstructor());
      assertFalse(jSType1.isStructuralInterface());
      assertFalse(jSType1.isNominalConstructorOrInterface());
      assertEquals(BooleanLiteralSet.BOTH, jSType1.getPossibleToBooleanOutcomes());
      assertEquals(0, jSType1.getTemplateParamCount());
      assertFalse(jSType1.isFunctionPrototypeType());
      assertFalse(jSType1.isNativeObjectType());
      assertFalse(jSType1.isVoidType());
      assertTrue(jSType1.isNullable());
      assertFalse(jSType1.isInterface());
      assertTrue(jSType1.isVoidable());
      assertFalse(jSType1.isStringValueType());
      assertTrue(jSType1.isSuccessfullyResolved());
      assertFalse(jSType1.isNoResolvedType());
      assertFalse(jSType1.isBigIntValueType());
      assertFalse(jSType1.isCheckedUnknownType());
      assertTrue(jSType1.isAllType());
      assertTrue(jSType1.matchesStringContext());
      assertFalse(jSType1.isEnumType());
      assertFalse(jSType1.isNamedType());
      assertFalse(jSType1.isUnionType());
      assertFalse(jSType1.isUnsuccessfullyResolved());
      assertFalse(jSType1.isNumberValueType());
      assertFalse(jSType1.isEnumElementType());
      assertTrue(jSType1.hasDisplayName());
      assertFalse(jSType1.isSymbolValueType());
      assertFalse(jSType1.isTemplatizedType());
      assertFalse(jSType1.isLiteralObject());
      assertFalse(jSType1.isRawTypeOfTemplatizedType());
      assertFalse(jSType1.isNullType());
      assertFalse(jSType1.isNoType());
      assertFalse(jSType1.isNoObjectType());
      assertFalse(treeSet0.contains("%qh?XuEDVw"));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry2);
      assertNotSame(token0, token1);
      assertNotSame(node0, node1);
      assertNotSame(token1, token0);
      assertNotSame(node1, node0);
      assertNotSame(jSType0, jSType1);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry1);
      assertNotSame(jSType1, jSType0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      Node node0 = Node.newString("NUSED_RETRN_T");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isBitNot());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.hasParent());
      assertFalse(node0.isAwait());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isComma());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSpread());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isEQ());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isForIn());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isNormalBlock());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isSub());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isNE());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isYield());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAssign());
      assertFalse(node0.isClass());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDec());
      assertFalse(node0.isImport());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOptChainGetElem());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isExport());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isRoot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isNeg());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, (String) null);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression0);
      assertFalse(node0.isBitNot());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.hasParent());
      assertFalse(node0.isAwait());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isComma());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSpread());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isEQ());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isForIn());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isNormalBlock());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isSub());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isNE());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isYield());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAssign());
      assertFalse(node0.isClass());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDec());
      assertFalse(node0.isImport());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOptChainGetElem());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isExport());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isRoot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isNeg());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      
      JSTypeExpression jSTypeExpression1 = JSTypeExpression.makeOptionalArg(jSTypeExpression0);
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression1);
      assertFalse(node0.isBitNot());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isAwait());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isComma());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSpread());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isEQ());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isForIn());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isNormalBlock());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.hasParent());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isSub());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isNE());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isYield());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAssign());
      assertFalse(node0.isClass());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDec());
      assertFalse(node0.isImport());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOptChainGetElem());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isExport());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isRoot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isNeg());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      ImmutableSet<String> immutableSet0 = jSTypeExpression1.getRecordPropertyNames();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(immutableSet0);
      assertFalse(node0.isBitNot());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isAwait());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isComma());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSpread());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isEQ());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isForIn());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isNormalBlock());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.hasParent());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isSub());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isNE());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isYield());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAssign());
      assertFalse(node0.isClass());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDec());
      assertFalse(node0.isImport());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOptChainGetElem());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isExport());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isRoot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isNeg());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("NUSED_RETRN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, immutableSet0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeRegistry0);
      assertFalse(node0.isBitNot());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isAwait());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isComma());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSpread());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isEQ());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isForIn());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isNormalBlock());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.hasParent());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isSub());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isNE());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isYield());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAssign());
      assertFalse(node0.isClass());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDec());
      assertFalse(node0.isImport());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOptChainGetElem());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isExport());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isRoot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isNeg());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("NUSED_RETRN_T"));
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      TemplateTypeReplacer templateTypeReplacer0 = TemplateTypeReplacer.forInference(jSTypeRegistry0, hashMap0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateTypeReplacer0);
      assertFalse(node0.isBitNot());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isAwait());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isComma());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSpread());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isEQ());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isForIn());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isNormalBlock());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.hasParent());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isSub());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isNE());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isYield());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAssign());
      assertFalse(node0.isClass());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDec());
      assertFalse(node0.isImport());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOptChainGetElem());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isExport());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isRoot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isNeg());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(immutableSet0.contains("NUSED_RETRN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Parameter{JSType=", node0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateType0);
      assertFalse(node0.isBitNot());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isAwait());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isComma());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSpread());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isEQ());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isForIn());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isNormalBlock());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.hasParent());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isSub());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isNE());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isYield());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAssign());
      assertFalse(node0.isClass());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDec());
      assertFalse(node0.isImport());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOptChainGetElem());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isExport());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isRoot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isNeg());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNoType());
      assertEquals("Parameter{JSType=", templateType0.getReferenceName());
      assertTrue(templateType0.isTypeTransformation());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(immutableSet0.contains("Parameter{JSType="));
      
      FunctionType functionType0 = templateType0.toMaybeFunctionType();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNull(functionType0);
      assertFalse(node0.isBitNot());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isAwait());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isComma());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSpread());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isEQ());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isForIn());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isNormalBlock());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.hasParent());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isSub());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isNE());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isYield());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAssign());
      assertFalse(node0.isClass());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDec());
      assertFalse(node0.isImport());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOptChainGetElem());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isExport());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isRoot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isNeg());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNoType());
      assertEquals("Parameter{JSType=", templateType0.getReferenceName());
      assertTrue(templateType0.isTypeTransformation());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(immutableSet0.contains("Parameter{JSType="));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.registerPropertyOnType("|AMgOEsSX", (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertNotNull(jSTypeRegistry0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("IOBJECT_VALUE");
      assertNotNull(templateType0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isObject());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isEnumType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      Token token0 = Token.TYPEOF;
      Token token1 = Token.OBJECT_PATTERN;
      Node node0 = new Node((Token) null);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isClass());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isImport());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isRest());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isRoot());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isConst());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNeg());
      assertFalse(node0.isMemberFieldDef());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isScript());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isSuper());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSpread());
      assertFalse(node0.isAwait());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertNull(node0.getToken());
      assertFalse(node0.isExport());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isNE());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVoid());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isYield());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isNull());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.hasParent());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isForIn());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLet());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isSub());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isArrayLit());
      
      Node node1 = new Node(token0, node0);
      assertFalse(token0.equals((Object)token1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node1);
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isClass());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isImport());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isRest());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isRoot());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isConst());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNeg());
      assertFalse(node0.isMemberFieldDef());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isScript());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isSuper());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSpread());
      assertFalse(node0.isAwait());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertNull(node0.getToken());
      assertFalse(node0.isExport());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertTrue(node0.hasParent());
      assertFalse(node0.isNE());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVoid());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isYield());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isNull());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isForIn());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLet());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isSub());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isCallSignature());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOptChainGetElem());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isForOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isSub());
      assertFalse(node1.isImportSpec());
      assertFalse(node1.isInc());
      assertNull(node1.getOriginalName());
      assertFalse(node1.isStringLit());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isYield());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isConst());
      assertFalse(node1.isString());
      assertFalse(node1.isExponent());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isExport());
      assertFalse(node1.isAnd());
      assertFalse(node1.isImportSpecs());
      assertFalse(node1.isForAwaitOf());
      assertFalse(node1.isNormalBlock());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isArrayPattern());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isIndexSignature());
      assertFalse(node1.isSuper());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isComputedProp());
      assertFalse(node1.isExportSpec());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isObjectRest());
      assertFalse(node1.isNullishCoalesce());
      assertFalse(node1.isName());
      assertFalse(node1.isClassMembers());
      assertFalse(node1.isImportStar());
      assertFalse(node1.isNull());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSHEQ());
      assertFalse(node1.isTaggedTemplateLit());
      assertFalse(node1.isTemplateLitSub());
      assertFalse(node1.hasParent());
      assertFalse(node1.isForIn());
      assertFalse(node1.isImportMeta());
      assertFalse(node1.isVar());
      assertFalse(node1.isModuleBody());
      assertFalse(node1.isLet());
      assertFalse(node1.isEQ());
      assertFalse(node1.isExportSpecs());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.hasTwoChildren());
      assertFalse(node1.isOptChainCall());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSHNE());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDestructuringPattern());
      assertFalse(node1.isTemplateLit());
      assertFalse(node1.isAssignAnd());
      assertFalse(node1.isBigInt());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isTrue());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isAssignNullishCoalesce());
      assertTrue(node1.hasChildren());
      assertEquals(Token.TYPEOF, node1.getToken());
      assertTrue(node1.isTypeOf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTemplateLitString());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDestructuringLhs());
      assertFalse(node1.isAwait());
      assertFalse(node1.isComma());
      assertFalse(node1.isBitNot());
      assertFalse(node1.isMemberVariableDef());
      assertFalse(node1.isRoot());
      assertFalse(node1.isInterfaceMembers());
      assertFalse(node1.isVanillaFor());
      assertFalse(node1.isDefaultValue());
      assertFalse(node1.isOptChainGetProp());
      assertFalse(node1.isCast());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isImport());
      assertFalse(node1.isClass());
      assertFalse(node1.isLabel());
      assertFalse(node1.isComputedFieldDef());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignExponent());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isMemberFunctionDef());
      assertFalse(node1.isRest());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWith());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isSpread());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isMemberFieldDef());
      assertTrue(node1.hasZeroOrOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isAdd());
      assertFalse(node1.isObjectPattern());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignOr());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isRecordType());
      assertFalse(node1.isNeg());
      assertFalse(node1.isLabelName());
      
      TemplateType templateType1 = jSTypeRegistry0.getIThenableTemplate();
      assertFalse(templateType1.equals((Object)templateType0));
      assertNotNull(templateType1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isTemplatizedType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isStringValueType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isInterface());
      assertTrue(templateType1.isObject());
      assertEquals("TYPE", templateType1.getReferenceName());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isStructuralInterface());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertNotSame(templateType1, templateType0);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createFunctionType((JSType) templateType0, (JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSType[] jSTypeArray0 = new JSType[3];
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      assertNotNull(unknownType0);
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isStructuralInterface());
      assertTrue(unknownType0.isResolved());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isSymbolValueType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isBigIntValueType());
      assertFalse(unknownType0.isEnumType());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isNamedType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.isObject());
      assertTrue(unknownType0.matchesObjectContext());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isLiteralObject());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplatizedType());
      assertFalse(unknownType0.isEnumElementType());
      
      ObjectType objectType0 = unknownType0.getImplicitPrototype();
      assertNull(objectType0);
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isStructuralInterface());
      assertTrue(unknownType0.isResolved());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isSymbolValueType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isBigIntValueType());
      assertFalse(unknownType0.isEnumType());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isNamedType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.isObject());
      assertTrue(unknownType0.matchesObjectContext());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isLiteralObject());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplatizedType());
      assertFalse(unknownType0.isEnumElementType());
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createTemplatizedType((ObjectType) null, (Map<TemplateType, JSType>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertNotNull(jSTypeRegistry0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      TemplateType templateType0 = jSTypeRegistry1.createTemplateType("%qh?XuEDVw");
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(templateType0);
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isLiteralObject());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isEnumType());
      assertEquals("%qh?XuEDVw", templateType0.getReferenceName());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      
      Token token0 = Token.BLOCK;
      Node node0 = new Node(token0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSub());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isTemplateLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isCall());
      assertTrue(node0.isBlock());
      assertFalse(node0.isYield());
      assertFalse(node0.isVar());
      assertFalse(node0.isLet());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isImport());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isClass());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExponent());
      assertFalse(node0.isExport());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isHook());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isCase());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isSetterDef());
      assertEquals(Token.BLOCK, node0.getToken());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isRest());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isTry());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isSHNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isForIn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNeg());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isAwait());
      assertFalse(node0.isNew());
      assertFalse(node0.isEQ());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isDo());
      assertFalse(node0.isRoot());
      assertFalse(node0.isAdd());
      assertTrue(node0.isNormalBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isOr());
      assertFalse(node0.isSuper());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSpread());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isCast());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasParent());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isImportStar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isNE());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isInstanceOf());
      
      Token token1 = Token.STAR;
      Node node1 = new Node(token1, node0);
      assertFalse(token0.equals((Object)token1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node1);
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSub());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isTemplateLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertTrue(node0.hasParent());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isCall());
      assertTrue(node0.isBlock());
      assertFalse(node0.isYield());
      assertFalse(node0.isVar());
      assertFalse(node0.isLet());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isImport());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isClass());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExponent());
      assertFalse(node0.isExport());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isHook());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isCase());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isSetterDef());
      assertEquals(Token.BLOCK, node0.getToken());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isRest());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isTry());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isSHNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isForIn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNeg());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isAwait());
      assertFalse(node0.isNew());
      assertFalse(node0.isEQ());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isDo());
      assertFalse(node0.isRoot());
      assertFalse(node0.isAdd());
      assertTrue(node0.isNormalBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isOr());
      assertFalse(node0.isSuper());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSpread());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isCast());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isImportStar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isNE());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isInstanceOf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isInterfaceMembers());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNE());
      assertFalse(node1.isAssignNullishCoalesce());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVanillaFor());
      assertFalse(node1.isTry());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBigInt());
      assertFalse(node1.isMemberFieldDef());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasZeroOrOneChild());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNeg());
      assertFalse(node1.isAssignAnd());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isObjectRest());
      assertFalse(node1.isNullishCoalesce());
      assertFalse(node1.isImportStar());
      assertFalse(node1.isDo());
      assertFalse(node1.hasTwoChildren());
      assertFalse(node1.isSHNE());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isModuleBody());
      assertFalse(node1.isForIn());
      assertFalse(node1.hasParent());
      assertFalse(node1.isEQ());
      assertFalse(node1.isClass());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isRest());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSuper());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isComma());
      assertFalse(node1.isBitNot());
      assertFalse(node1.isFalse());
      assertFalse(node1.isTemplateLitString());
      assertFalse(node1.isRoot());
      assertFalse(node1.isExport());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAwait());
      assertFalse(node1.isExponent());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOptChainGetProp());
      assertFalse(node1.isMemberFunctionDef());
      assertFalse(node1.isAssignExponent());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDestructuringPattern());
      assertFalse(node1.isForOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isOptChainGetElem());
      assertFalse(node1.isIn());
      assertFalse(node1.isImportSpecs());
      assertFalse(node1.isRecordType());
      assertFalse(node1.isCallSignature());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isExportSpecs());
      assertFalse(node1.isCatch());
      assertFalse(node1.isYield());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isStringLit());
      assertFalse(node1.isSub());
      assertFalse(node1.isHook());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isObjectPattern());
      assertFalse(node1.isSwitch());
      assertNull(node1.getOriginalName());
      assertFalse(node1.isTaggedTemplateLit());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isOptChainCall());
      assertFalse(node1.isImportSpec());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignOr());
      assertFalse(node1.isTemplateLit());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLet());
      assertFalse(node1.isVar());
      assertFalse(node1.isImport());
      assertFalse(node1.isArrayPattern());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNormalBlock());
      assertFalse(node1.isComputedProp());
      assertFalse(node1.isComputedFieldDef());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isIndexSignature());
      assertFalse(node1.isSpread());
      assertFalse(node1.isImportMeta());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isThis());
      assertFalse(node1.isSHEQ());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTemplateLitSub());
      assertFalse(node1.isBlock());
      assertFalse(node1.isClassMembers());
      assertFalse(node1.isDestructuringLhs());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDefaultValue());
      assertFalse(node1.isConst());
      assertFalse(node1.isExportSpec());
      assertFalse(node1.isMemberVariableDef());
      assertFalse(node1.isAnd());
      assertEquals(Token.STAR, node1.getToken());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isForAwaitOf());
      assertFalse(node1.isThrow());
      
      JSType jSType0 = jSTypeRegistry1.createTypeFromCommentNode(node1);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(token0.equals((Object)token1));
      assertFalse(node0.equals((Object)node1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSType0);
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSub());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isTemplateLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertTrue(node0.hasParent());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isCall());
      assertTrue(node0.isBlock());
      assertFalse(node0.isYield());
      assertFalse(node0.isVar());
      assertFalse(node0.isLet());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isImport());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isClass());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExponent());
      assertFalse(node0.isExport());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isHook());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isCase());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isSetterDef());
      assertEquals(Token.BLOCK, node0.getToken());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isRest());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isTry());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isSHNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isForIn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNeg());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isAwait());
      assertFalse(node0.isNew());
      assertFalse(node0.isEQ());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isDo());
      assertFalse(node0.isRoot());
      assertFalse(node0.isAdd());
      assertTrue(node0.isNormalBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isOr());
      assertFalse(node0.isSuper());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSpread());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isCast());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isImportStar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isNE());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isInstanceOf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isInterfaceMembers());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNE());
      assertFalse(node1.isAssignNullishCoalesce());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVanillaFor());
      assertFalse(node1.isTry());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBigInt());
      assertFalse(node1.isMemberFieldDef());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasZeroOrOneChild());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNeg());
      assertFalse(node1.isAssignAnd());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isObjectRest());
      assertFalse(node1.isNullishCoalesce());
      assertFalse(node1.isImportStar());
      assertFalse(node1.isDo());
      assertFalse(node1.hasTwoChildren());
      assertFalse(node1.isSHNE());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isModuleBody());
      assertFalse(node1.isForIn());
      assertFalse(node1.hasParent());
      assertFalse(node1.isEQ());
      assertFalse(node1.isClass());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isRest());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSuper());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isComma());
      assertFalse(node1.isBitNot());
      assertFalse(node1.isFalse());
      assertFalse(node1.isTemplateLitString());
      assertFalse(node1.isRoot());
      assertFalse(node1.isExport());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAwait());
      assertFalse(node1.isExponent());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOptChainGetProp());
      assertFalse(node1.isMemberFunctionDef());
      assertFalse(node1.isAssignExponent());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDestructuringPattern());
      assertFalse(node1.isForOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isOptChainGetElem());
      assertFalse(node1.isIn());
      assertFalse(node1.isImportSpecs());
      assertFalse(node1.isRecordType());
      assertFalse(node1.isCallSignature());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isExportSpecs());
      assertFalse(node1.isCatch());
      assertFalse(node1.isYield());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isStringLit());
      assertFalse(node1.isSub());
      assertFalse(node1.isHook());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isObjectPattern());
      assertFalse(node1.isSwitch());
      assertNull(node1.getOriginalName());
      assertFalse(node1.isTaggedTemplateLit());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isOptChainCall());
      assertFalse(node1.isImportSpec());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignOr());
      assertFalse(node1.isTemplateLit());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLet());
      assertFalse(node1.isVar());
      assertFalse(node1.isImport());
      assertFalse(node1.isArrayPattern());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNormalBlock());
      assertFalse(node1.isComputedProp());
      assertFalse(node1.isComputedFieldDef());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isIndexSignature());
      assertFalse(node1.isSpread());
      assertFalse(node1.isImportMeta());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isThis());
      assertFalse(node1.isSHEQ());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTemplateLitSub());
      assertFalse(node1.isBlock());
      assertFalse(node1.isClassMembers());
      assertFalse(node1.isDestructuringLhs());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDefaultValue());
      assertFalse(node1.isConst());
      assertFalse(node1.isExportSpec());
      assertFalse(node1.isMemberVariableDef());
      assertFalse(node1.isAnd());
      assertEquals(Token.STAR, node1.getToken());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isForAwaitOf());
      assertFalse(node1.isThrow());
      assertTrue(jSType0.isVoidable());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isBooleanValueType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isEnumType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNumberValueType());
      assertTrue(jSType0.hasDisplayName());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isBigIntValueType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNamedType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertTrue(jSType0.isNullable());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.isResolved());
      assertTrue(jSType0.matchesStringContext());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(token0, token1);
      assertNotSame(node0, node1);
      assertNotSame(token1, token0);
      assertNotSame(node1, node0);
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      TemplateTypeReplacer templateTypeReplacer0 = TemplateTypeReplacer.forInference(jSTypeRegistry0, hashMap0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(templateTypeReplacer0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(linkedHashSet0.contains("%qh?XuEDVw"));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      
      jSTypeRegistry1.registerPropertyOnType("|AMgOEsSX", templateType0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isLiteralObject());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isEnumType());
      assertEquals("%qh?XuEDVw", templateType0.getReferenceName());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      
      TemplateType templateType1 = jSTypeRegistry0.createTemplateType("&2eE.");
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(templateType1.equals((Object)templateType0));
      assertNotNull(templateType1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isStructuralInterface());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isTemplatizedType());
      assertTrue(templateType1.isObject());
      assertEquals("&2eE.", templateType1.getReferenceName());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isOrdinaryFunction());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isBigIntValueType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isInterface());
      assertFalse(linkedHashSet0.contains("%qh?XuEDVw"));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(templateType1, templateType0);
      
      boolean boolean0 = jSTypeRegistry1.isForwardDeclaredType("");
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(boolean0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      
      Token token2 = Token.SHEQ;
      Node node2 = new Node(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node2);
      assertFalse(node2.isVanillaFor());
      assertFalse(node2.isBitNot());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isObjectRest());
      assertFalse(node2.isMemberFieldDef());
      assertFalse(node2.isBigInt());
      assertFalse(node2.isNE());
      assertFalse(node2.isSpread());
      assertFalse(node2.isBreak());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isInterfaceMembers());
      assertFalse(node2.isSuper());
      assertFalse(node2.isAssignNullishCoalesce());
      assertEquals(Token.SHEQ, node2.getToken());
      assertFalse(node2.isMemberVariableDef());
      assertFalse(node2.isAwait());
      assertFalse(node2.isTemplateLitString());
      assertFalse(node2.isForAwaitOf());
      assertFalse(node2.isContinue());
      assertFalse(node2.isOptChainGetProp());
      assertFalse(node2.isCast());
      assertFalse(node2.isNew());
      assertFalse(node2.isDefaultValue());
      assertTrue(node2.hasZeroOrOneChild());
      assertFalse(node2.isAdd());
      assertFalse(node2.isObjectPattern());
      assertFalse(node2.isComputedFieldDef());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isReturn());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertTrue(node2.isSHEQ());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTry());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isRecordType());
      assertFalse(node2.isForOf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isScript());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCallSignature());
      assertFalse(node2.isNeg());
      assertFalse(node2.isLabel());
      assertFalse(node2.isImport());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isClass());
      assertFalse(node2.isLabelName());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isInc());
      assertFalse(node2.isAssignOr());
      assertEquals(0, node2.getLength());
      assertFalse(node2.isConst());
      assertFalse(node2.isHook());
      assertFalse(node2.isYield());
      assertNull(node2.getOriginalName());
      assertFalse(node2.isImportSpec());
      assertFalse(node2.isTaggedTemplateLit());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertFalse(node2.isIn());
      assertFalse(node2.isExportSpecs());
      assertFalse(node2.isOptChainGetElem());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isWith());
      assertFalse(node2.isIndexSignature());
      assertFalse(node2.isStringLit());
      assertFalse(node2.isComputedProp());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isImportSpecs());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRest());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isArrayPattern());
      assertFalse(node2.isExportSpec());
      assertFalse(node2.isNot());
      assertFalse(node2.isSetterDef());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isMemberFunctionDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isAssignExponent());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFalse());
      assertFalse(node2.isExport());
      assertFalse(node2.isExponent());
      assertFalse(node2.isLet());
      assertFalse(node2.isAssignAnd());
      assertFalse(node2.isWhile());
      assertFalse(node2.isTemplateLitSub());
      assertFalse(node2.isEQ());
      assertFalse(node2.isBlock());
      assertFalse(node2.isVar());
      assertFalse(node2.isNullishCoalesce());
      assertFalse(node2.isDo());
      assertFalse(node2.isDestructuringLhs());
      assertFalse(node2.isNormalBlock());
      assertFalse(node2.isOr());
      assertFalse(node2.isRoot());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isNull());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isClassMembers());
      assertFalse(node2.isCatch());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isSub());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isImportMeta());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isModuleBody());
      assertFalse(node2.isImportStar());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isTemplateLit());
      assertFalse(node2.hasTwoChildren());
      assertFalse(node2.isOptChainCall());
      assertFalse(node2.isForIn());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.hasParent());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isDestructuringPattern());
      assertFalse(node2.isSHNE());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "E(5yNCz%ar}Yx}";
      JSType jSType0 = jSTypeRegistry0.getGlobalType("E(5yNCz%ar}Yx}");
      assertNull(jSType0);
      
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<FunctionType.Parameter> immutableList0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      assertNotNull(immutableList0);
      assertEquals(0, immutableList0.size());
      assertEquals(0, jSTypeArray0.length);
      
      ImmutableList<TemplateType> immutableList1 = jSTypeRegistry0.maybeGetTemplateTypesOfBuiltin("com.google.javascript.jscomp.jarjar.com.google.common.collect.MultimapBuilder$3");
      assertNull(immutableList1);
      
      JSTypeRegistry.PropDefinitionKind[] jSTypeRegistry_PropDefinitionKindArray0 = JSTypeRegistry.PropDefinitionKind.values();
      assertNotNull(jSTypeRegistry_PropDefinitionKindArray0);
      assertEquals(4, jSTypeRegistry_PropDefinitionKindArray0.length);
      
      jSTypeRegistry0.registerLegacyClosureNamespace("com.google.javascript.jscomp.jarjar.com.google.common.collect.MultimapBuilder$3");
      Node node0 = Node.newString("W2U,%hb[");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSub());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isCase());
      assertFalse(node0.isLet());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isOptChainCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isSuper());
      assertFalse(node0.isRest());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isExport());
      assertFalse(node0.isYield());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAwait());
      assertFalse(node0.isRoot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isVoid());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isEQ());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isAdd());
      assertTrue(node0.isString());
      assertFalse(node0.isModuleBody());
      assertEquals("W2U,%hb[", node0.getString());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isForIn());
      assertFalse(node0.hasParent());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNeg());
      assertFalse(node0.isAssignAnd());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isCast());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isImport());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isClass());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSpread());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(node0.isFunction());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "IOBJECT_VALUE", node0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateType0);
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSub());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isCase());
      assertFalse(node0.isLet());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isOptChainCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isSuper());
      assertFalse(node0.isRest());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isExport());
      assertFalse(node0.isYield());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAwait());
      assertFalse(node0.isRoot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isVoid());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isEQ());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isAdd());
      assertTrue(node0.isString());
      assertFalse(node0.isModuleBody());
      assertEquals("W2U,%hb[", node0.getString());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isForIn());
      assertFalse(node0.hasParent());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNeg());
      assertFalse(node0.isAssignAnd());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isCast());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isImport());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isClass());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSpread());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(node0.isFunction());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTypeTransformation());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNativeObjectType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNoResolvedType());
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        node0.setIsAsyncFunction(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, set0);
      assertNotNull(jSTypeRegistry0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      ArrayList<ObjectType> arrayList0 = new ArrayList<ObjectType>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TemplateTypeMap templateTypeMap0 = jSTypeRegistry0.getEmptyTemplateTypeMap();
      assertNotNull(templateTypeMap0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.isNamedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isAnonymous());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      
      Node node0 = Node.newString("v0$%P~($XM9p/(n");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isTemplateLitSub());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isConst());
      assertFalse(node0.isExponent());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isExport());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isAwait());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasParent());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isYield());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isAssign());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isSuper());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isDo());
      assertFalse(node0.isForIn());
      assertFalse(node0.isEQ());
      assertFalse(node0.isVar());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isName());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInterfaceMembers());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBigInt());
      assertEquals("v0$%P~($XM9p/(n", node0.getString());
      assertFalse(node0.isRoot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNE());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSpread());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAnd());
      assertFalse(node0.isRest());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isForOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignOr());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isAssignAdd());
      
      boolean boolean0 = jSTypeRegistry0.isForwardDeclaredType("To2A5zBV9z5?+");
      assertFalse(boolean0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("v0$%P~($XM9p/(n"));
      
      Token token0 = Token.NULLABLE_TYPE;
      Node node1 = new Node(token0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node1);
      assertFalse(node1.isForOf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDestructuringPattern());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isSub());
      assertFalse(node1.isCallSignature());
      assertFalse(node1.isRecordType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isIn());
      assertFalse(node1.isOptChainGetElem());
      assertFalse(node1.isCase());
      assertNull(node1.getOriginalName());
      assertFalse(node1.isStringLit());
      assertFalse(node1.isYield());
      assertFalse(node1.isCatch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isTaggedTemplateLit());
      assertFalse(node1.isHook());
      assertFalse(node1.isTemplateLitSub());
      assertFalse(node1.isVar());
      assertFalse(node1.isObjectPattern());
      assertFalse(node1.isLet());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isExportSpecs());
      assertFalse(node1.isImportSpec());
      assertFalse(node1.isTemplateLit());
      assertFalse(node1.isOptChainCall());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAssignOr());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isForAwaitOf());
      assertFalse(node1.isClass());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isImport());
      assertFalse(node1.isComputedFieldDef());
      assertFalse(node1.isComputedProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isArrayPattern());
      assertFalse(node1.isNormalBlock());
      assertFalse(node1.isImportMeta());
      assertFalse(node1.isExportSpec());
      assertFalse(node1.isSpread());
      assertFalse(node1.isSHEQ());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isReturn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIndexSignature());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDefaultValue());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertEquals(Token.NULLABLE_TYPE, node1.getToken());
      assertFalse(node1.isVanillaFor());
      assertFalse(node1.isDestructuringLhs());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isConst());
      assertFalse(node1.isMemberVariableDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAssignNullishCoalesce());
      assertFalse(node1.isBigInt());
      assertFalse(node1.isNE());
      assertFalse(node1.isInterfaceMembers());
      assertFalse(node1.isTry());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isVoid());
      assertFalse(node1.isClassMembers());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isName());
      assertFalse(node1.isNullishCoalesce());
      assertFalse(node1.isBreak());
      assertFalse(node1.isMemberFieldDef());
      assertFalse(node1.isImportStar());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isObjectRest());
      assertTrue(node1.hasZeroOrOneChild());
      assertFalse(node1.hasTwoChildren());
      assertFalse(node1.isDo());
      assertFalse(node1.isForIn());
      assertFalse(node1.hasParent());
      assertFalse(node1.isModuleBody());
      assertFalse(node1.isEQ());
      assertFalse(node1.isNeg());
      assertFalse(node1.isAssignAnd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSHNE());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isMemberFunctionDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isSuper());
      assertFalse(node1.isRest());
      assertFalse(node1.isWhile());
      assertFalse(node1.isComma());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isTemplateLitString());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isRoot());
      assertFalse(node1.isAwait());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBitNot());
      assertFalse(node1.isImportSpecs());
      assertFalse(node1.isExponent());
      assertFalse(node1.isAssignExponent());
      assertFalse(node1.isExport());
      assertFalse(node1.isOptChainGetProp());
      assertFalse(node1.isContinue());
      
      JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
      assertNotNull(jSType0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.isNamedType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isAnonymous());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isStringValueType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isStructuralInterface());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isInterface());
      assertFalse(set0.contains("v0$%P~($XM9p/(n"));
      
      String string0 = jSTypeRegistry0.getReadableJSTypeName(node0, false);
      assertFalse(node0.equals((Object)node1));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(string0);
      assertEquals("?", string0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isTemplateLitSub());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isConst());
      assertFalse(node0.isExponent());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isExport());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isAwait());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasParent());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isYield());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isAssign());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isSuper());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isDo());
      assertFalse(node0.isForIn());
      assertFalse(node0.isEQ());
      assertFalse(node0.isVar());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isName());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInterfaceMembers());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBigInt());
      assertEquals("v0$%P~($XM9p/(n", node0.getString());
      assertFalse(node0.isRoot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNE());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSpread());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAnd());
      assertFalse(node0.isRest());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isForOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignOr());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isAssignAdd());
      assertFalse(set0.contains("To2A5zBV9z5?+"));
      
      NoResolvedType noResolvedType1 = new NoResolvedType(jSTypeRegistry0);
      assertTrue(noResolvedType1.equals((Object)noResolvedType0));
      assertNotNull(noResolvedType1);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(noResolvedType1.isVoidType());
      assertFalse(noResolvedType1.isEnumType());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isStringValueType());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertFalse(noResolvedType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType1.matchesSymbolContext());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertTrue(noResolvedType1.isNullable());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isInterface());
      assertTrue(noResolvedType1.isUnsuccessfullyResolved());
      assertFalse(noResolvedType1.isLiteralObject());
      assertFalse(noResolvedType1.isStructuralInterface());
      assertTrue(noResolvedType1.isVoidable());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType1.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType1.isNoObjectType());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertFalse(noResolvedType1.isNamedType());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertFalse(noResolvedType1.isTemplatizedType());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertFalse(noResolvedType1.isAbstract());
      assertFalse(noResolvedType1.isSuccessfullyResolved());
      assertFalse(noResolvedType1.isBigIntValueType());
      assertNull(noResolvedType1.getGoogModuleId());
      assertFalse(noResolvedType1.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType1.isSymbolValueType());
      assertFalse(noResolvedType1.isNullType());
      assertEquals(0, noResolvedType1.getTemplateParamCount());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.hasInstanceType());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertFalse(noResolvedType1.isUnionType());
      assertNull(noResolvedType1.getClosurePrimitive());
      assertFalse(noResolvedType1.isAnonymous());
      assertFalse(noResolvedType1.isNominalConstructorOrInterface());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isConstructor());
      assertTrue(noResolvedType1.isNativeObjectType());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.hasCachedValues());
      assertTrue(noResolvedType1.matchesStringContext());
      assertTrue(noResolvedType1.isResolved());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(set0.contains("To2A5zBV9z5?+"));
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) noResolvedType1, (Map<TemplateType, JSType>) hashMap0);
      assertTrue(noResolvedType1.equals((Object)noResolvedType0));
      assertNotNull(templatizedType0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(noResolvedType1.isVoidType());
      assertFalse(noResolvedType1.isEnumType());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isStringValueType());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertFalse(noResolvedType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType1.matchesSymbolContext());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertTrue(noResolvedType1.isNullable());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isInterface());
      assertTrue(noResolvedType1.isUnsuccessfullyResolved());
      assertFalse(noResolvedType1.isLiteralObject());
      assertFalse(noResolvedType1.isStructuralInterface());
      assertTrue(noResolvedType1.isVoidable());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType1.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType1.isNoObjectType());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertFalse(noResolvedType1.isNamedType());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertFalse(noResolvedType1.isTemplatizedType());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertFalse(noResolvedType1.isAbstract());
      assertFalse(noResolvedType1.isSuccessfullyResolved());
      assertFalse(noResolvedType1.isBigIntValueType());
      assertNull(noResolvedType1.getGoogModuleId());
      assertFalse(noResolvedType1.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType1.isSymbolValueType());
      assertFalse(noResolvedType1.isNullType());
      assertEquals(0, noResolvedType1.getTemplateParamCount());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.hasInstanceType());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertFalse(noResolvedType1.isUnionType());
      assertNull(noResolvedType1.getClosurePrimitive());
      assertFalse(noResolvedType1.isAnonymous());
      assertFalse(noResolvedType1.isNominalConstructorOrInterface());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isConstructor());
      assertTrue(noResolvedType1.isNativeObjectType());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.hasCachedValues());
      assertTrue(noResolvedType1.matchesStringContext());
      assertTrue(noResolvedType1.isResolved());
      assertNull(noResolvedType1.getReferenceName());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isFunctionType());
      assertTrue(templatizedType0.isResolved());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isRecordType());
      assertTrue(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isLiteralObject());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isEnumType());
      assertTrue(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isConstructor());
      assertTrue(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isNoType());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(set0.contains("To2A5zBV9z5?+"));
      assertNotSame(noResolvedType1, noResolvedType0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("IOBJECT_VALUE");
      assertNotNull(templateType0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      TemplateType templateType1 = (TemplateType)jSTypeRegistry0.findCommonSuperObject(templateType0, templateType0);
      assertNotNull(templateType1);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType1.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isSymbolValueType());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isAllType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isNoType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isNoObjectType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNumberValueType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isOrdinaryFunction());
      assertEquals("IOBJECT_VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isTemplatizedType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      NoObjectType noObjectType0 = (NoObjectType)jSTypeRegistry1.getNativeType(jSTypeNative0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(noObjectType0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(noObjectType0.isUnsuccessfullyResolved());
      assertFalse(noObjectType0.isLiteralObject());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isConstructor());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isStructuralInterface());
      assertFalse(noObjectType0.isNamedType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNominalConstructorOrInterface());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.matchesSymbolContext());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isTemplatizedType());
      assertFalse(noObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.isSuccessfullyResolved());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isRawTypeOfTemplatizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertNull(noObjectType0.getClosurePrimitive());
      assertEquals(0, noObjectType0.getTemplateParamCount());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isAnonymous());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.isResolved());
      assertFalse(noObjectType0.isBigIntValueType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertNull(noObjectType0.getGoogModuleId());
      assertTrue(noObjectType0.isNativeObjectType());
      assertFalse(noObjectType0.isAbstract());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isAllType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isSymbolValueType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      
      ImmutableList<TemplateType> immutableList0 = jSTypeRegistry1.maybeGetTemplateTypesOfBuiltin("g");
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNull(immutableList0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createNullableType(templateType1);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(unionType0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType1.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isSymbolValueType());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isAllType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isNoType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isNoObjectType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNumberValueType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isOrdinaryFunction());
      assertEquals("IOBJECT_VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isTemplatizedType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(unionType0.isUnsuccessfullyResolved());
      assertFalse(unionType0.isRawTypeOfTemplatizedType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isLiteralObject());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isNamedType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isVoidType());
      assertTrue(unionType0.isResolved());
      assertFalse(unionType0.isBigIntValueType());
      assertFalse(unionType0.isNominalConstructorOrInterface());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isSymbolValueType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNativeObjectType());
      assertFalse(unionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unionType0.isAllType());
      assertEquals(0, unionType0.getTemplateParamCount());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isStructuralInterface());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isTemplatizedType());
      assertFalse(unionType0.isEnumElementType());
      assertTrue(unionType0.isSuccessfullyResolved());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      
      TemplateType templateType2 = jSTypeRegistry0.createTemplateType("g");
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(templateType2.equals((Object)templateType0));
      assertFalse(templateType2.equals((Object)templateType1));
      assertNotNull(templateType2);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(templateType2.isVoidType());
      assertEquals("g", templateType2.getReferenceName());
      assertFalse(templateType2.isEnumType());
      assertFalse(templateType2.isOrdinaryFunction());
      assertFalse(templateType2.isTemplatizedType());
      assertTrue(templateType2.hasAnyTemplateTypesInternal());
      assertFalse(templateType2.isEnumElementType());
      assertFalse(templateType2.isNoResolvedType());
      assertFalse(templateType2.isStructuralInterface());
      assertFalse(templateType2.isUnionType());
      assertFalse(templateType2.isNamedType());
      assertFalse(templateType2.isConstructor());
      assertFalse(templateType2.isBooleanValueType());
      assertFalse(templateType2.isNumberValueType());
      assertTrue(templateType2.isObject());
      assertFalse(templateType2.isRawTypeOfTemplatizedType());
      assertFalse(templateType2.isNativeObjectType());
      assertFalse(templateType2.isTypeTransformation());
      assertFalse(templateType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType2.isSymbolValueType());
      assertFalse(templateType2.isFunctionType());
      assertTrue(templateType2.isTemplateType());
      assertTrue(templateType2.isSuccessfullyResolved());
      assertFalse(templateType2.isCheckedUnknownType());
      assertFalse(templateType2.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertEquals(0, templateType2.getTemplateParamCount());
      assertFalse(templateType2.isRecordType());
      assertFalse(templateType2.isLiteralObject());
      assertFalse(templateType2.hasCachedValues());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertFalse(templateType2.isUnsuccessfullyResolved());
      assertFalse(templateType2.isNoType());
      assertFalse(templateType2.isNoObjectType());
      assertFalse(templateType2.isBigIntValueType());
      assertTrue(templateType2.isResolved());
      assertFalse(templateType2.isNominalConstructorOrInterface());
      assertFalse(templateType2.isAllType());
      assertFalse(templateType2.isInterface());
      assertFalse(templateType2.isStringValueType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(templateType2, templateType0);
      assertNotSame(templateType2, templateType1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      Node node0 = Node.newString("NUSED_RETRN_T");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComma());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isAwait());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSuper());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNE());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSpread());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.hasZeroOrOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isForOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCase());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isYield());
      assertFalse(node0.isInc());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isIf());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isReturn());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isConst());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRoot());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.hasParent());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, (String) null);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression0);
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComma());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isAwait());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSuper());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNE());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSpread());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.hasZeroOrOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isForOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCase());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isYield());
      assertFalse(node0.isInc());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isIf());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isReturn());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isConst());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRoot());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.hasParent());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      
      JSTypeExpression jSTypeExpression1 = JSTypeExpression.makeOptionalArg(jSTypeExpression0);
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression1);
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComma());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isAwait());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSuper());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNE());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSpread());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.hasZeroOrOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isForOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCase());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isYield());
      assertFalse(node0.isInc());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isIf());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isReturn());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAnd());
      assertTrue(node0.hasParent());
      assertFalse(node0.isConst());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRoot());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      ImmutableSet<String> immutableSet0 = jSTypeExpression1.getRecordPropertyNames();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(immutableSet0);
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComma());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isAwait());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSuper());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNE());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSpread());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.hasZeroOrOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isForOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCase());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isYield());
      assertFalse(node0.isInc());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isIf());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isReturn());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAnd());
      assertTrue(node0.hasParent());
      assertFalse(node0.isConst());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRoot());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("NUSED_RETRN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      JSTypeExpression jSTypeExpression2 = jSTypeExpression0.copy();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression2.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression2.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression2);
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComma());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isAwait());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSuper());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNE());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSpread());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.hasZeroOrOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isForOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCase());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isYield());
      assertFalse(node0.isInc());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isIf());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isReturn());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAnd());
      assertTrue(node0.hasParent());
      assertFalse(node0.isConst());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRoot());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression2.isOptionalArg());
      assertFalse(jSTypeExpression2.isVarArgs());
      assertNull(jSTypeExpression2.getSourceName());
      assertNotSame(jSTypeExpression0, jSTypeExpression2);
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression2, jSTypeExpression1);
      assertNotSame(jSTypeExpression2, jSTypeExpression0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, immutableSet0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression2));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeRegistry0);
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComma());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isAwait());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSuper());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNE());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSpread());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.hasZeroOrOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isForOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCase());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isYield());
      assertFalse(node0.isInc());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isIf());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isReturn());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAnd());
      assertTrue(node0.hasParent());
      assertFalse(node0.isConst());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRoot());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("NUSED_RETRN_T"));
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      TemplateTypeReplacer templateTypeReplacer0 = TemplateTypeReplacer.forInference(jSTypeRegistry0, hashMap0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression2));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateTypeReplacer0);
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComma());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isAwait());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSuper());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNE());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSpread());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.hasZeroOrOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isForOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCase());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isYield());
      assertFalse(node0.isInc());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isIf());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isReturn());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAnd());
      assertTrue(node0.hasParent());
      assertFalse(node0.isConst());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRoot());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(immutableSet0.contains("NUSED_RETRN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression2);
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertNotSame(jSTypeExpression1, jSTypeExpression2);
      
      JSType jSType0 = templateTypeReplacer0.caseNumberType();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression2));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSType0);
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComma());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isAwait());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSuper());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNE());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSpread());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.hasZeroOrOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isForOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCase());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isYield());
      assertFalse(node0.isInc());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isIf());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isReturn());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAnd());
      assertTrue(node0.hasParent());
      assertFalse(node0.isConst());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRoot());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.isNumberValueType());
      assertTrue(jSType0.matchesStringContext());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isEnumType());
      assertEquals("number", jSType0.getDisplayName());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.isNamedType());
      assertTrue(jSType0.isResolved());
      assertFalse(immutableSet0.contains("NUSED_RETRN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression2);
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertNotSame(jSTypeExpression1, jSTypeExpression2);
      
      Outcome outcome0 = Outcome.NULLISH;
      NoType noType0 = (NoType)jSType0.getRestrictedTypeGivenOutcome(outcome0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression2));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(noType0);
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComma());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isAwait());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSuper());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNE());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSpread());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.hasZeroOrOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isForOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCase());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isYield());
      assertFalse(node0.isInc());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isIf());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isReturn());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAnd());
      assertTrue(node0.hasParent());
      assertFalse(node0.isConst());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRoot());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.isNumberValueType());
      assertTrue(jSType0.matchesStringContext());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isEnumType());
      assertEquals("number", jSType0.getDisplayName());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.isNamedType());
      assertTrue(jSType0.isResolved());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.hasCachedValues());
      assertNull(noType0.getClosurePrimitive());
      assertFalse(noType0.isRawTypeOfTemplatizedType());
      assertFalse(noType0.isAnonymous());
      assertFalse(noType0.isBigIntValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isRecordType());
      assertEquals(0, noType0.getTemplateParamCount());
      assertFalse(noType0.hasInstanceType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.isNativeObjectType());
      assertFalse(noType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.matchesSymbolContext());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.isResolved());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isNominalConstructorOrInterface());
      assertFalse(noType0.isLiteralObject());
      assertFalse(noType0.isUnsuccessfullyResolved());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isVoidable());
      assertTrue(noType0.isSuccessfullyResolved());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isSymbolValueType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isAbstract());
      assertEquals(BooleanLiteralSet.BOTH, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isTemplatizedType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isStructuralInterface());
      assertNull(noType0.getGoogModuleId());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNamedType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(immutableSet0.contains("NUSED_RETRN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression2);
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertNotSame(jSTypeExpression1, jSTypeExpression2);
      
      jSTypeRegistry0.registerPropertyOnType((String) null, jSType0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression2));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComma());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isAwait());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSuper());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNE());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSpread());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.hasZeroOrOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isForOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCase());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isYield());
      assertFalse(node0.isInc());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isIf());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isReturn());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAnd());
      assertTrue(node0.hasParent());
      assertFalse(node0.isConst());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRoot());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.isNumberValueType());
      assertTrue(jSType0.matchesStringContext());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isEnumType());
      assertEquals("number", jSType0.getDisplayName());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.isNamedType());
      assertTrue(jSType0.isResolved());
      assertFalse(immutableSet0.contains("NUSED_RETRN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression2);
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertNotSame(jSTypeExpression1, jSTypeExpression2);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.evaluateTypeExpressionInGlobalScope(jSTypeExpression1);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression2));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(unionType0);
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComma());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isAwait());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSuper());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNE());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSpread());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.hasZeroOrOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isForOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCase());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isYield());
      assertFalse(node0.isInc());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isIf());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isReturn());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAnd());
      assertTrue(node0.hasParent());
      assertFalse(node0.isConst());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRoot());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isNominalConstructorOrInterface());
      assertFalse(unionType0.isNativeObjectType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertTrue(unionType0.isResolved());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertEquals(0, unionType0.getTemplateParamCount());
      assertFalse(unionType0.isBigIntValueType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNamedType());
      assertFalse(unionType0.isStructuralInterface());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isSymbolValueType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isUnsuccessfullyResolved());
      assertFalse(unionType0.isRawTypeOfTemplatizedType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isTemplateType());
      assertTrue(unionType0.isSuccessfullyResolved());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isLiteralObject());
      assertFalse(unionType0.isTemplatizedType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(immutableSet0.contains("NUSED_RETRN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression2);
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertNotSame(jSTypeExpression1, jSTypeExpression2);
      
      boolean boolean0 = jSTypeRegistry0.isForwardDeclaredType((String) null);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression2));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(boolean0);
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComma());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isAwait());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSuper());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNE());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSpread());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.hasZeroOrOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isForOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCase());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isYield());
      assertFalse(node0.isInc());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isIf());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isReturn());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAnd());
      assertTrue(node0.hasParent());
      assertFalse(node0.isConst());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRoot());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("NUSED_RETRN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression2);
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertNotSame(jSTypeExpression1, jSTypeExpression2);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.I_ARRAY_LIKE_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression2));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(functionType0);
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isSuccessfullyResolved());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isBigIntValueType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplatizedType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.matchesObjectContext());
      assertFalse(functionType0.isSymbolValueType());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isUnionType());
      assertTrue(functionType0.isRawTypeOfTemplatizedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(functionType0.isNominalConstructorOrInterface());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isRecordType());
      assertNull(functionType0.getClosurePrimitive());
      assertFalse(functionType0.isAnonymous());
      assertFalse(functionType0.isLiteralObject());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isUnsuccessfullyResolved());
      assertNull(functionType0.getGoogModuleId());
      assertEquals(1, functionType0.getTemplateParamCount());
      assertTrue(functionType0.isNativeObjectType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNamedType());
      assertFalse(functionType0.isAbstract());
      assertTrue(functionType0.isStructuralInterface());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComma());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isAwait());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSuper());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNE());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSpread());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.hasZeroOrOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isForOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCase());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isYield());
      assertFalse(node0.isInc());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isIf());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isReturn());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAnd());
      assertTrue(node0.hasParent());
      assertFalse(node0.isConst());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRoot());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("NUSED_RETRN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression2);
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertNotSame(jSTypeExpression1, jSTypeExpression2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSType[] jSTypeArray0 = new JSType[5];
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isResolved());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isNamedType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNoObjectType());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(functionType0);
      assertTrue(functionType0.isObject());
      assertNull(functionType0.getGoogModuleId());
      assertFalse(functionType0.isUnionType());
      assertEquals(0, functionType0.getTemplateParamCount());
      assertFalse(functionType0.isBigIntValueType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isRawTypeOfTemplatizedType());
      assertTrue(functionType0.isSuccessfullyResolved());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.matchesObjectContext());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isResolved());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isSymbolValueType());
      assertFalse(functionType0.isStructuralInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isNativeObjectType());
      assertTrue(functionType0.isFunctionType());
      assertNull(functionType0.getClosurePrimitive());
      assertFalse(functionType0.isAnonymous());
      assertFalse(functionType0.isTemplatizedType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructorOrInterface());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isLiteralObject());
      assertFalse(functionType0.isAbstract());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isUnsuccessfullyResolved());
      assertFalse(functionType0.isNamedType());
      
      jSTypeArray0[1] = (JSType) noResolvedType0;
      UnknownType unknownType0 = (UnknownType)noResolvedType0.getPrototype();
      assertNotNull(unknownType0);
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isResolved());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isNamedType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertFalse(unknownType0.isLiteralObject());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNoType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isBigIntValueType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isStructuralInterface());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isSymbolValueType());
      assertFalse(unknownType0.isTemplatizedType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNamedType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      
      // Undeclared exception!
      try { 
        TemplateTypeMap.createEmpty(jSTypeRegistry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertNotNull(jSTypeRegistry0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("IOBJECT_VALUE");
      assertNotNull(templateType0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStructuralInterface());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isInterface());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      TypeStringBuilder typeStringBuilder0 = new TypeStringBuilder(false);
      assertNotNull(typeStringBuilder0);
      
      templateType0.appendTo(typeStringBuilder0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStructuralInterface());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isInterface());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      TemplateType templateType1 = (TemplateType)jSTypeRegistry0.findCommonSuperObject(templateType0, templateType0);
      assertNotNull(templateType1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStructuralInterface());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertEquals("IOBJECT_VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNoResolvedType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isBigIntValueType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isStructuralInterface());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isStringValueType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isEnumElementType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isTypeTransformation());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      ImmutableList<TemplateType> immutableList0 = jSTypeRegistry1.maybeGetTemplateTypesOfBuiltin("IOBJECT_VALUE");
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNull(immutableList0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createNullableType(templateType1);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(unionType0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStructuralInterface());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertEquals("IOBJECT_VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNoResolvedType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isBigIntValueType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isStructuralInterface());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isStringValueType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isEnumElementType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isTypeTransformation());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(unionType0.isBigIntValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertTrue(unionType0.isUnionType());
      assertTrue(unionType0.isSuccessfullyResolved());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isRawTypeOfTemplatizedType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isLiteralObject());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNominalConstructorOrInterface());
      assertFalse(unionType0.isTemplatizedType());
      assertTrue(unionType0.isResolved());
      assertFalse(unionType0.isUnsuccessfullyResolved());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isNamedType());
      assertFalse(unionType0.isStructuralInterface());
      assertFalse(unionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isSymbolValueType());
      assertFalse(unionType0.isNativeObjectType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isEnumType());
      assertEquals(0, unionType0.getTemplateParamCount());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isConstructor());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry1.createScopeWithTemplates((StaticTypedScope) null, (Iterable<TemplateType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry$SyntheticTemplateScope", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertNotNull(jSTypeRegistry0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("IOBJECT_VALUE");
      assertNotNull(templateType0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isEnumType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isConstructor());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNamedType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      TemplateType templateType1 = (TemplateType)jSTypeRegistry0.findCommonSuperObject(templateType0, templateType0);
      assertNotNull(templateType1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isEnumType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isConstructor());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isNoType());
      assertEquals("IOBJECT_VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isStringValueType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isOrdinaryFunction());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isEnumElementType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      ImmutableList<TemplateType> immutableList0 = jSTypeRegistry1.maybeGetTemplateTypesOfBuiltin("IOBJECT_VALUE");
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNull(immutableList0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createNullableType(templateType1);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(unionType0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isEnumType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isConstructor());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isNoType());
      assertEquals("IOBJECT_VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isStringValueType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isOrdinaryFunction());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isEnumElementType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isFunctionType());
      assertTrue(unionType0.isResolved());
      assertFalse(unionType0.isNativeObjectType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNominalConstructorOrInterface());
      assertFalse(unionType0.isStructuralInterface());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isLiteralObject());
      assertFalse(unionType0.isTemplatizedType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNamedType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isUnsuccessfullyResolved());
      assertFalse(unionType0.isCheckedUnknownType());
      assertTrue(unionType0.isSuccessfullyResolved());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isBigIntValueType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isRawTypeOfTemplatizedType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isStringValueType());
      assertEquals(0, unionType0.getTemplateParamCount());
      assertFalse(unionType0.isSymbolValueType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry1.createScopeWithTemplates((StaticTypedScope) null, (Iterable<TemplateType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry$SyntheticTemplateScope", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertNotNull(jSTypeRegistry0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("IOBJECT_VALUE");
      assertNotNull(templateType0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isTypeTransformation());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      TypeStringBuilder typeStringBuilder0 = new TypeStringBuilder(false);
      assertNotNull(typeStringBuilder0);
      
      templateType0.appendTo(typeStringBuilder0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isTypeTransformation());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      TemplateType templateType1 = (TemplateType)jSTypeRegistry0.findCommonSuperObject(templateType0, templateType0);
      assertNotNull(templateType1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isTypeTransformation());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.hasCachedValues());
      assertEquals("IOBJECT_VALUE", templateType1.getReferenceName());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isBigIntValueType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isNativeObjectType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isNamedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isNoResolvedType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isFunctionType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      TemplateType templateType2 = jSTypeRegistry1.getIteratorValueTemplate();
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(templateType2.equals((Object)templateType0));
      assertFalse(templateType2.equals((Object)templateType1));
      assertNotNull(templateType2);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(templateType2.hasAnyTemplateTypesInternal());
      assertFalse(templateType2.isOrdinaryFunction());
      assertFalse(templateType2.isConstructor());
      assertFalse(templateType2.isVoidType());
      assertTrue(templateType2.isSuccessfullyResolved());
      assertFalse(templateType2.isNamedType());
      assertFalse(templateType2.isUnionType());
      assertFalse(templateType2.isBigIntValueType());
      assertFalse(templateType2.isTemplatizedType());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isEnumElementType());
      assertFalse(templateType2.isNoResolvedType());
      assertFalse(templateType2.isEnumType());
      assertFalse(templateType2.isUnsuccessfullyResolved());
      assertFalse(templateType2.isInterface());
      assertFalse(templateType2.isStructuralInterface());
      assertFalse(templateType2.isNoType());
      assertFalse(templateType2.isAllType());
      assertFalse(templateType2.isNoObjectType());
      assertTrue(templateType2.isResolved());
      assertFalse(templateType2.isStringValueType());
      assertFalse(templateType2.isNominalConstructorOrInterface());
      assertFalse(templateType2.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertEquals(0, templateType2.getTemplateParamCount());
      assertFalse(templateType2.hasCachedValues());
      assertFalse(templateType2.isFunctionType());
      assertFalse(templateType2.isLiteralObject());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertEquals("VALUE", templateType2.getReferenceName());
      assertFalse(templateType2.isRecordType());
      assertFalse(templateType2.isNativeObjectType());
      assertFalse(templateType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType2.isSymbolValueType());
      assertFalse(templateType2.isNullType());
      assertTrue(templateType2.isTemplateType());
      assertFalse(templateType2.isBooleanValueType());
      assertFalse(templateType2.isRawTypeOfTemplatizedType());
      assertFalse(templateType2.isTypeTransformation());
      assertTrue(templateType2.isObject());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(templateType2, templateType0);
      assertNotSame(templateType2, templateType1);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[3];
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSTypeNative jSTypeNative2 = JSTypeNative.FUNCTION_PROTOTYPE;
      jSTypeNativeArray0[2] = jSTypeNative2;
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(prototypeObjectType0);
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isTemplatizedType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isStructuralInterface());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isNamedType());
      assertEquals(0, prototypeObjectType0.getTemplateParamCount());
      assertTrue(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isBigIntValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertTrue(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertTrue(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isAnonymous());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isLiteralObject());
      assertFalse(prototypeObjectType0.isNominalConstructorOrInterface());
      assertTrue(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isUnsuccessfullyResolved());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isSymbolValueType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isRawTypeOfTemplatizedType());
      assertTrue(prototypeObjectType0.isSuccessfullyResolved());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertEquals(3, jSTypeNativeArray0.length);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createUnionType((List<? extends JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.UnionType$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      Node node0 = Node.newString("NUSED_RETRN_T");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.hasParent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isSpread());
      assertFalse(node0.isSuper());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isAwait());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isExport());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCall());
      assertFalse(node0.isDefaultValue());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isRest());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isYield());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isConst());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTemplateLitString());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRoot());
      assertFalse(node0.isSub());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isLet());
      assertFalse(node0.isTrue());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isEQ());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertEquals("NUSED_RETRN_T", node0.getString());
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, (String) null);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression0);
      assertFalse(node0.hasParent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isSpread());
      assertFalse(node0.isSuper());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isAwait());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isExport());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCall());
      assertFalse(node0.isDefaultValue());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isRest());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isYield());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isConst());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTemplateLitString());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRoot());
      assertFalse(node0.isSub());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isLet());
      assertFalse(node0.isTrue());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isEQ());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isVarArgs());
      
      JSTypeExpression jSTypeExpression1 = JSTypeExpression.makeOptionalArg(jSTypeExpression0);
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression1);
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isSpread());
      assertFalse(node0.isSuper());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isAwait());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isExport());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCall());
      assertTrue(node0.hasParent());
      assertFalse(node0.isDefaultValue());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isRest());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isYield());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isConst());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTemplateLitString());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRoot());
      assertFalse(node0.isSub());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isLet());
      assertFalse(node0.isTrue());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isEQ());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      ImmutableSet<String> immutableSet0 = jSTypeExpression1.getRecordPropertyNames();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(immutableSet0);
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isSpread());
      assertFalse(node0.isSuper());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isAwait());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isExport());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCall());
      assertTrue(node0.hasParent());
      assertFalse(node0.isDefaultValue());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isRest());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isYield());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isConst());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTemplateLitString());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRoot());
      assertFalse(node0.isSub());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isLet());
      assertFalse(node0.isTrue());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isEQ());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("NUSED_RETRN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      JSTypeExpression jSTypeExpression2 = jSTypeExpression0.copy();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression2.equals((Object)jSTypeExpression0));
      assertFalse(jSTypeExpression2.equals((Object)jSTypeExpression1));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression2);
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isSpread());
      assertFalse(node0.isSuper());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isAwait());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isExport());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCall());
      assertTrue(node0.hasParent());
      assertFalse(node0.isDefaultValue());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isRest());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isYield());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isConst());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTemplateLitString());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRoot());
      assertFalse(node0.isSub());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isLet());
      assertFalse(node0.isTrue());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isEQ());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression2.isOptionalArg());
      assertNull(jSTypeExpression2.getSourceName());
      assertFalse(jSTypeExpression2.isVarArgs());
      assertNotSame(jSTypeExpression0, jSTypeExpression2);
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression2, jSTypeExpression0);
      assertNotSame(jSTypeExpression2, jSTypeExpression1);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, immutableSet0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression2));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeRegistry0);
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isSpread());
      assertFalse(node0.isSuper());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isAwait());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isExport());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCall());
      assertTrue(node0.hasParent());
      assertFalse(node0.isDefaultValue());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isRest());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isYield());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isConst());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTemplateLitString());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRoot());
      assertFalse(node0.isSub());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isLet());
      assertFalse(node0.isTrue());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isEQ());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("NUSED_RETRN_T"));
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      TemplateTypeReplacer templateTypeReplacer0 = TemplateTypeReplacer.forInference(jSTypeRegistry0, hashMap0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression2));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateTypeReplacer0);
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isSpread());
      assertFalse(node0.isSuper());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isAwait());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isExport());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCall());
      assertTrue(node0.hasParent());
      assertFalse(node0.isDefaultValue());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isRest());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isYield());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isConst());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTemplateLitString());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRoot());
      assertFalse(node0.isSub());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isLet());
      assertFalse(node0.isTrue());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isEQ());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(immutableSet0.contains("NUSED_RETRN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression2);
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertNotSame(jSTypeExpression1, jSTypeExpression2);
      
      JSType jSType0 = templateTypeReplacer0.caseNumberType();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression2));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSType0);
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isSpread());
      assertFalse(node0.isSuper());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isAwait());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isExport());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCall());
      assertTrue(node0.hasParent());
      assertFalse(node0.isDefaultValue());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isRest());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isYield());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isConst());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTemplateLitString());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRoot());
      assertFalse(node0.isSub());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isLet());
      assertFalse(node0.isTrue());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isEQ());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertTrue(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertEquals("number", jSType0.getDisplayName());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNativeObjectType());
      assertTrue(jSType0.matchesStringContext());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isLiteralObject());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(immutableSet0.contains("NUSED_RETRN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression2);
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertNotSame(jSTypeExpression1, jSTypeExpression2);
      
      Outcome outcome0 = Outcome.NULLISH;
      NoType noType0 = (NoType)jSType0.getRestrictedTypeGivenOutcome(outcome0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression2));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(noType0);
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isSpread());
      assertFalse(node0.isSuper());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isAwait());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isExport());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCall());
      assertTrue(node0.hasParent());
      assertFalse(node0.isDefaultValue());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isRest());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isYield());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isConst());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTemplateLitString());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRoot());
      assertFalse(node0.isSub());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isLet());
      assertFalse(node0.isTrue());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isEQ());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertTrue(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertEquals("number", jSType0.getDisplayName());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNativeObjectType());
      assertTrue(jSType0.matchesStringContext());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isLiteralObject());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertTrue(noType0.isVoidable());
      assertFalse(noType0.isNominalConstructorOrInterface());
      assertFalse(noType0.isUnsuccessfullyResolved());
      assertFalse(noType0.isConstructor());
      assertTrue(noType0.canBeCalled());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isLiteralObject());
      assertFalse(noType0.isNumberValueType());
      assertTrue(noType0.isSuccessfullyResolved());
      assertFalse(noType0.isSymbolValueType());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesSymbolContext());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isNativeObjectType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.isResolved());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.isNoType());
      assertNull(noType0.getClosurePrimitive());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isRawTypeOfTemplatizedType());
      assertFalse(noType0.isAnonymous());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isBooleanValueType());
      assertEquals(0, noType0.getTemplateParamCount());
      assertFalse(noType0.hasInstanceType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isAbstract());
      assertFalse(noType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isTemplatizedType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isBigIntValueType());
      assertFalse(noType0.isNamedType());
      assertFalse(noType0.isStructuralInterface());
      assertNull(noType0.getGoogModuleId());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(immutableSet0.contains("NUSED_RETRN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression2);
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertNotSame(jSTypeExpression1, jSTypeExpression2);
      
      jSTypeRegistry0.registerPropertyOnType((String) null, jSType0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression2));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isSpread());
      assertFalse(node0.isSuper());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isAwait());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isExport());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCall());
      assertTrue(node0.hasParent());
      assertFalse(node0.isDefaultValue());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isRest());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isYield());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isConst());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTemplateLitString());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRoot());
      assertFalse(node0.isSub());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isLet());
      assertFalse(node0.isTrue());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isEQ());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertTrue(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertEquals("number", jSType0.getDisplayName());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNativeObjectType());
      assertTrue(jSType0.matchesStringContext());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isLiteralObject());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(immutableSet0.contains("NUSED_RETRN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression2);
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertNotSame(jSTypeExpression1, jSTypeExpression2);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.evaluateTypeExpressionInGlobalScope(jSTypeExpression1);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression2));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(unionType0);
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isSpread());
      assertFalse(node0.isSuper());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isAwait());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isExport());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCall());
      assertTrue(node0.hasParent());
      assertFalse(node0.isDefaultValue());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isRest());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isYield());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isConst());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTemplateLitString());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRoot());
      assertFalse(node0.isSub());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isLet());
      assertFalse(node0.isTrue());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isEQ());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertEquals(0, unionType0.getTemplateParamCount());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isStructuralInterface());
      assertFalse(unionType0.isTemplatizedType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isSymbolValueType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isBigIntValueType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isNominalConstructorOrInterface());
      assertFalse(unionType0.isLiteralObject());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isRawTypeOfTemplatizedType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNamedType());
      assertFalse(unionType0.isNativeObjectType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isResolved());
      assertTrue(unionType0.isSuccessfullyResolved());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isUnsuccessfullyResolved());
      assertFalse(immutableSet0.contains("NUSED_RETRN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression2);
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertNotSame(jSTypeExpression1, jSTypeExpression2);
      
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) noType0;
      jSTypeArray0[2] = (JSType) unionType0;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = (JSType) unionType0;
      jSTypeArray0[5] = jSType0;
      ImmutableList<FunctionType.Parameter> immutableList0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression2));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(immutableList0);
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isSpread());
      assertFalse(node0.isSuper());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isAwait());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isExport());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCall());
      assertTrue(node0.hasParent());
      assertFalse(node0.isDefaultValue());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isRest());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isYield());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isConst());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTemplateLitString());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRoot());
      assertFalse(node0.isSub());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isLet());
      assertFalse(node0.isTrue());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isEQ());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertEquals(6, immutableList0.size());
      assertFalse(immutableSet0.contains("NUSED_RETRN_T"));
      assertEquals(6, jSTypeArray0.length);
      assertNotSame(jSTypeExpression0, jSTypeExpression2);
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertNotSame(jSTypeExpression1, jSTypeExpression2);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noType0, (List<FunctionType.Parameter>) immutableList0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression2));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(functionType0);
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isSpread());
      assertFalse(node0.isSuper());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isAwait());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isExport());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCall());
      assertTrue(node0.hasParent());
      assertFalse(node0.isDefaultValue());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isRest());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isYield());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isConst());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTemplateLitString());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRoot());
      assertFalse(node0.isSub());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVar());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isLet());
      assertFalse(node0.isTrue());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isEQ());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertEquals("NUSED_RETRN_T", node0.getString());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertTrue(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertEquals("number", jSType0.getDisplayName());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNativeObjectType());
      assertTrue(jSType0.matchesStringContext());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isLiteralObject());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertTrue(noType0.isVoidable());
      assertFalse(noType0.isNominalConstructorOrInterface());
      assertFalse(noType0.isUnsuccessfullyResolved());
      assertFalse(noType0.isConstructor());
      assertTrue(noType0.canBeCalled());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isLiteralObject());
      assertFalse(noType0.isNumberValueType());
      assertTrue(noType0.isSuccessfullyResolved());
      assertFalse(noType0.isSymbolValueType());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesSymbolContext());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isNativeObjectType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.isResolved());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.isNoType());
      assertNull(noType0.getClosurePrimitive());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isRawTypeOfTemplatizedType());
      assertFalse(noType0.isAnonymous());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isBooleanValueType());
      assertEquals(0, noType0.getTemplateParamCount());
      assertFalse(noType0.hasInstanceType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isAbstract());
      assertFalse(noType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isTemplatizedType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isBigIntValueType());
      assertFalse(noType0.isNamedType());
      assertFalse(noType0.isStructuralInterface());
      assertNull(noType0.getGoogModuleId());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(6, immutableList0.size());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStructuralInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.isResolved());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertNull(functionType0.getClosurePrimitive());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isAbstract());
      assertFalse(functionType0.isNominalConstructorOrInterface());
      assertFalse(functionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(functionType0.isBigIntValueType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNativeObjectType());
      assertFalse(functionType0.isStringValueType());
      assertNull(functionType0.getGoogModuleId());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isSuccessfullyResolved());
      assertFalse(functionType0.isNoResolvedType());
      assertTrue(functionType0.matchesObjectContext());
      assertFalse(functionType0.isNamedType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertEquals(0, functionType0.getTemplateParamCount());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnsuccessfullyResolved());
      assertFalse(functionType0.isSymbolValueType());
      assertFalse(functionType0.isLiteralObject());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAnonymous());
      assertFalse(functionType0.isTemplatizedType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isRawTypeOfTemplatizedType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(immutableSet0.contains("NUSED_RETRN_T"));
      assertEquals(6, jSTypeArray0.length);
      assertNotSame(jSTypeExpression0, jSTypeExpression2);
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertNotSame(jSTypeExpression1, jSTypeExpression2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isAnonymous());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      
      ImmutableSortedSet<String> immutableSortedSet0 = noResolvedType0.getPropertyNames();
      assertNotNull(immutableSortedSet0);
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isAnonymous());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, immutableSortedSet0.size());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, immutableSortedSet0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isAnonymous());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, immutableSortedSet0.size());
      
      TemplateType templateType0 = jSTypeRegistry1.getIterableTemplate();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(templateType0);
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isAnonymous());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, immutableSortedSet0.size());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNativeObjectType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isLiteralObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isOrdinaryFunction());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      
      RecordType recordType0 = templateType0.toMaybeRecordType();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNull(recordType0);
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isAnonymous());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, immutableSortedSet0.size());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNativeObjectType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isLiteralObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isOrdinaryFunction());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry1.registerDroppedPropertiesInUnion((RecordType) null, (RecordType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      String string0 = "UNUSED_RETURN_T";
      Node node0 = Node.newString("UNUSED_RETURN_T");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectPattern());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isExponent());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isExport());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isSpread());
      assertFalse(node0.isSuper());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAwait());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isCase());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNeg());
      assertFalse(node0.isRest());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isForOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isDefaultValue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isImport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isLabel());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isEQ());
      assertFalse(node0.isClass());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isRoot());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isYield());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isConst());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.hasParent());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSub());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isBlock());
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, (String) null);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression0);
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectPattern());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isExponent());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isExport());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isSpread());
      assertFalse(node0.isSuper());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAwait());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isCase());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNeg());
      assertFalse(node0.isRest());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isForOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isDefaultValue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isImport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isLabel());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isEQ());
      assertFalse(node0.isClass());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isRoot());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isYield());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isConst());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.hasParent());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSub());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isBlock());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      
      JSTypeExpression jSTypeExpression1 = JSTypeExpression.makeOptionalArg(jSTypeExpression0);
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression1);
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectPattern());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isExponent());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isExport());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isSpread());
      assertFalse(node0.isSuper());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasParent());
      assertFalse(node0.isAwait());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isCase());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNeg());
      assertFalse(node0.isRest());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isForOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isDefaultValue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isImport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isLabel());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isEQ());
      assertFalse(node0.isClass());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isRoot());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isYield());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isConst());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSub());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isBlock());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      Token token0 = Token.BOOLEAN_TYPE;
      Node node1 = new Node(token0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node1);
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCallSignature());
      assertFalse(node1.isRecordType());
      assertFalse(node1.isIn());
      assertFalse(node1.isImportSpec());
      assertFalse(node1.isForOf());
      assertFalse(node1.isCase());
      assertFalse(node1.isSub());
      assertFalse(node1.isOptChainGetElem());
      assertFalse(node1.isString());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignOr());
      assertFalse(node1.isConst());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isExportSpecs());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isImportSpecs());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isFalse());
      assertFalse(node1.isDestructuringPattern());
      assertFalse(node1.isTemplateLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isThrow());
      assertFalse(node1.isTaggedTemplateLit());
      assertFalse(node1.isObjectPattern());
      assertFalse(node1.isExportSpec());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isRest());
      assertFalse(node1.isComputedProp());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isHook());
      assertFalse(node1.isTemplateLitSub());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isStringLit());
      assertFalse(node1.isIndexSignature());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isAssignExponent());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isMemberFunctionDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isNormalBlock());
      assertFalse(node1.isEQ());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAnd());
      assertFalse(node1.isOptChainCall());
      assertFalse(node1.isExponent());
      assertFalse(node1.hasParent());
      assertFalse(node1.isContinue());
      assertFalse(node1.isExport());
      assertFalse(node1.isTemplateLitString());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isRoot());
      assertFalse(node1.isName());
      assertFalse(node1.isNullishCoalesce());
      assertFalse(node1.isVar());
      assertFalse(node1.isModuleBody());
      assertFalse(node1.isObjectRest());
      assertFalse(node1.isLet());
      assertFalse(node1.isAwait());
      assertFalse(node1.isSuper());
      assertFalse(node1.isVoid());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isYield());
      assertNull(node1.getOriginalName());
      assertFalse(node1.isBigInt());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isAssignNullishCoalesce());
      assertFalse(node1.isTry());
      assertFalse(node1.isVanillaFor());
      assertFalse(node1.isInterfaceMembers());
      assertFalse(node1.isMemberVariableDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isForIn());
      assertFalse(node1.isSHNE());
      assertFalse(node1.isNeg());
      assertFalse(node1.hasTwoChildren());
      assertFalse(node1.isOptChainGetProp());
      assertFalse(node1.isMemberFieldDef());
      assertFalse(node1.isClassMembers());
      assertFalse(node1.isImportStar());
      assertFalse(node1.isBitNot());
      assertFalse(node1.isSHEQ());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertTrue(node1.hasZeroOrOneChild());
      assertFalse(node1.isDestructuringLhs());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isImportMeta());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isComputedFieldDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isImport());
      assertFalse(node1.isForAwaitOf());
      assertFalse(node1.isClass());
      assertFalse(node1.isArrayPattern());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDefaultValue());
      assertFalse(node1.isCast());
      assertEquals(Token.BOOLEAN_TYPE, node1.getToken());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSpread());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_TYPE;
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      assertNotNull(instanceObjectType0);
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertEquals(0, instanceObjectType0.getTemplateParamCount());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      
      ObjectType objectType0 = null;
      try {
        objectType0 = new NoObjectType(jSTypeRegistry0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      assertNotNull(templateType0);
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNativeObjectType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isTemplatizedType());
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      assertNotNull(templatizedType0);
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNativeObjectType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isTemplatizedType());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.isRecordType());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isFunctionType());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isStringValueType());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isVoidType());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isNoType());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isSymbolValueType());
      
      Token token0 = Token.FUNCTION_TYPE;
      Node node0 = new Node(token0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isIn());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isInc());
      assertFalse(node0.isForOf());
      assertFalse(node0.isOptChainGetElem());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isCast());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isDec());
      assertFalse(node0.isSpread());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isSHNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isNeg());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isBitNot());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isTry());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isDo());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isOr());
      assertEquals(Token.FUNCTION_TYPE, node0.getToken());
      assertFalse(node0.isExport());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isExponent());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLet());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isEQ());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.hasParent());
      assertFalse(node0.isForIn());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isRoot());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAwait());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isYield());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSuper());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      
      Node node1 = new Node(token0, node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node1);
      assertFalse(node0.isIn());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isInc());
      assertFalse(node0.isForOf());
      assertFalse(node0.isOptChainGetElem());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isDestructuringPattern());
      assertTrue(node0.hasParent());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isCast());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isDec());
      assertFalse(node0.isSpread());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isSHNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isNeg());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isBitNot());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isTry());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isDo());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isOr());
      assertEquals(Token.FUNCTION_TYPE, node0.getToken());
      assertFalse(node0.isExport());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isExponent());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLet());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isEQ());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isForIn());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isRoot());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAwait());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isYield());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSuper());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isSHEQ());
      assertFalse(node1.isAwait());
      assertFalse(node1.isBitNot());
      assertFalse(node1.isObjectRest());
      assertFalse(node1.isImportStar());
      assertFalse(node1.hasParent());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSpread());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVanillaFor());
      assertFalse(node1.isSuper());
      assertFalse(node1.isImportMeta());
      assertFalse(node1.isMemberFieldDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isForAwaitOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAssignNullishCoalesce());
      assertFalse(node1.isMemberVariableDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isDestructuringLhs());
      assertFalse(node1.isClassMembers());
      assertFalse(node1.isNullishCoalesce());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isOptChainGetProp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isExport());
      assertFalse(node1.isTemplateLitString());
      assertFalse(node1.isName());
      assertFalse(node1.isAssignAnd());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isImportSpecs());
      assertFalse(node1.isExponent());
      assertFalse(node1.isStringLit());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTemplateLitSub());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSub());
      assertFalse(node1.isRoot());
      assertFalse(node1.isNormalBlock());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTemplateLit());
      assertFalse(node1.isSHNE());
      assertFalse(node1.isDestructuringPattern());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isEQ());
      assertNull(node1.getOriginalName());
      assertEquals(Token.FUNCTION_TYPE, node1.getToken());
      assertFalse(node1.isOptChainCall());
      assertFalse(node1.hasTwoChildren());
      assertFalse(node1.isForIn());
      assertFalse(node1.isVar());
      assertFalse(node1.isModuleBody());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isLet());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isTaggedTemplateLit());
      assertFalse(node1.isIndexSignature());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isExportSpecs());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isYield());
      assertFalse(node1.isString());
      assertFalse(node1.isWith());
      assertFalse(node1.isConst());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isAssignExponent());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIf());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRest());
      assertFalse(node1.isExportSpec());
      assertFalse(node1.isComputedProp());
      assertFalse(node1.isArrayPattern());
      assertFalse(node1.isThrow());
      assertFalse(node1.isMemberFunctionDef());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertFalse(node1.isDefaultValue());
      assertFalse(node1.isNeg());
      assertFalse(node1.isObjectPattern());
      assertFalse(node1.isRecordType());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInterfaceMembers());
      assertTrue(node1.hasZeroOrOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isComputedFieldDef());
      assertFalse(node1.isCallSignature());
      assertFalse(node1.isOptChainGetElem());
      assertFalse(node1.isClass());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isBigInt());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isForOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssignOr());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isImportSpec());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isImport());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      
      Node node2 = Node.newString("]!f[:");
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node2);
      assertFalse(node2.isTemplateLitSub());
      assertFalse(node2.isCall());
      assertEquals("]!f[:", node2.getString());
      assertFalse(node2.isExport());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isObjectPattern());
      assertFalse(node2.isLet());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isExponent());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isForAwaitOf());
      assertFalse(node2.isOptChainCall());
      assertFalse(node2.isFunction());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCast());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isOptChainGetElem());
      assertFalse(node2.isImportSpecs());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isComputedFieldDef());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isSpread());
      assertFalse(node2.isBreak());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isSuper());
      assertFalse(node2.isComma());
      assertEquals(0, node2.getLength());
      assertFalse(node2.isHook());
      assertFalse(node2.isYield());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAwait());
      assertFalse(node2.isBitNot());
      assertFalse(node2.isIn());
      assertFalse(node2.isImportSpec());
      assertFalse(node2.isAssignOr());
      assertFalse(node2.isFalse());
      assertFalse(node2.isTry());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isIf());
      assertFalse(node2.isRest());
      assertFalse(node2.isCallSignature());
      assertFalse(node2.isRecordType());
      assertFalse(node2.isForOf());
      assertFalse(node2.isCase());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isMemberFieldDef());
      assertFalse(node2.isWith());
      assertFalse(node2.isDefaultValue());
      assertTrue(node2.hasZeroOrOneChild());
      assertFalse(node2.isNullishCoalesce());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertTrue(node2.isString());
      assertFalse(node2.isName());
      assertFalse(node2.isRoot());
      assertFalse(node2.isAssignAnd());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isDestructuringLhs());
      assertFalse(node2.isForIn());
      assertFalse(node2.isMemberVariableDef());
      assertFalse(node2.isOptChainGetProp());
      assertFalse(node2.isNeg());
      assertFalse(node2.isAssignExponent());
      assertFalse(node2.isMemberFunctionDef());
      assertFalse(node2.isDo());
      assertFalse(node2.isTemplateLitString());
      assertFalse(node2.isEQ());
      assertFalse(node2.isImport());
      assertFalse(node2.isClass());
      assertFalse(node2.isLabel());
      assertTrue(node2.isStringLit());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isVoid());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isTrue());
      assertFalse(node2.isInterfaceMembers());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isOr());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isBigInt());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isThrow());
      assertFalse(node2.isExportSpecs());
      assertFalse(node2.isConst());
      assertFalse(node2.isImportStar());
      assertFalse(node2.isInc());
      assertNull(node2.getOriginalName());
      assertFalse(node2.isVanillaFor());
      assertFalse(node2.isObjectRest());
      assertFalse(node2.isTaggedTemplateLit());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasParent());
      assertFalse(node2.isSHNE());
      assertFalse(node2.isAnd());
      assertFalse(node2.isTemplateLit());
      assertFalse(node2.isModuleBody());
      assertFalse(node2.hasTwoChildren());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssignNullishCoalesce());
      assertFalse(node2.isArrayPattern());
      assertFalse(node2.isSub());
      assertFalse(node2.isDestructuringPattern());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNE());
      assertFalse(node2.isExportSpec());
      assertFalse(node2.isNormalBlock());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isComputedProp());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isImportMeta());
      assertEquals(Token.STRINGLIT, node2.getToken());
      assertFalse(node2.isThis());
      assertFalse(node2.isClassMembers());
      assertFalse(node2.isSHEQ());
      assertFalse(node2.isBlock());
      assertFalse(node2.isIndexSignature());
      
      int int0 = node2.getChangeTime();
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, int0);
      assertFalse(node2.isTemplateLitSub());
      assertFalse(node2.isCall());
      assertEquals("]!f[:", node2.getString());
      assertFalse(node2.isExport());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isObjectPattern());
      assertFalse(node2.isLet());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isExponent());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isForAwaitOf());
      assertFalse(node2.isOptChainCall());
      assertFalse(node2.isFunction());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCast());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isOptChainGetElem());
      assertFalse(node2.isImportSpecs());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isComputedFieldDef());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isSpread());
      assertFalse(node2.isBreak());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isSuper());
      assertFalse(node2.isComma());
      assertEquals(0, node2.getLength());
      assertFalse(node2.isHook());
      assertFalse(node2.isYield());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAwait());
      assertFalse(node2.isBitNot());
      assertFalse(node2.isIn());
      assertFalse(node2.isImportSpec());
      assertFalse(node2.isAssignOr());
      assertFalse(node2.isFalse());
      assertFalse(node2.isTry());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isIf());
      assertFalse(node2.isRest());
      assertFalse(node2.isCallSignature());
      assertFalse(node2.isRecordType());
      assertFalse(node2.isForOf());
      assertFalse(node2.isCase());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isMemberFieldDef());
      assertFalse(node2.isWith());
      assertFalse(node2.isDefaultValue());
      assertTrue(node2.hasZeroOrOneChild());
      assertFalse(node2.isNullishCoalesce());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertTrue(node2.isString());
      assertFalse(node2.isName());
      assertFalse(node2.isRoot());
      assertFalse(node2.isAssignAnd());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isDestructuringLhs());
      assertFalse(node2.isForIn());
      assertFalse(node2.isMemberVariableDef());
      assertFalse(node2.isOptChainGetProp());
      assertFalse(node2.isNeg());
      assertFalse(node2.isAssignExponent());
      assertFalse(node2.isMemberFunctionDef());
      assertFalse(node2.isDo());
      assertFalse(node2.isTemplateLitString());
      assertFalse(node2.isEQ());
      assertFalse(node2.isImport());
      assertFalse(node2.isClass());
      assertFalse(node2.isLabel());
      assertTrue(node2.isStringLit());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isVoid());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isTrue());
      assertFalse(node2.isInterfaceMembers());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isOr());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isBigInt());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isThrow());
      assertFalse(node2.isExportSpecs());
      assertFalse(node2.isConst());
      assertFalse(node2.isImportStar());
      assertFalse(node2.isInc());
      assertNull(node2.getOriginalName());
      assertFalse(node2.isVanillaFor());
      assertFalse(node2.isObjectRest());
      assertFalse(node2.isTaggedTemplateLit());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasParent());
      assertFalse(node2.isSHNE());
      assertFalse(node2.isAnd());
      assertFalse(node2.isTemplateLit());
      assertFalse(node2.isModuleBody());
      assertFalse(node2.hasTwoChildren());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssignNullishCoalesce());
      assertFalse(node2.isArrayPattern());
      assertFalse(node2.isSub());
      assertFalse(node2.isDestructuringPattern());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNE());
      assertFalse(node2.isExportSpec());
      assertFalse(node2.isNormalBlock());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isComputedProp());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isImportMeta());
      assertEquals(Token.STRINGLIT, node2.getToken());
      assertFalse(node2.isThis());
      assertFalse(node2.isClassMembers());
      assertFalse(node2.isSHEQ());
      assertFalse(node2.isBlock());
      assertFalse(node2.isIndexSignature());
      
      JSType jSType0 = jSTypeRegistry0.createTypeFromCommentNode(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSType0);
      assertFalse(node2.isTemplateLitSub());
      assertFalse(node2.isCall());
      assertEquals("]!f[:", node2.getString());
      assertFalse(node2.isExport());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isObjectPattern());
      assertFalse(node2.isLet());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isExponent());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isForAwaitOf());
      assertFalse(node2.isOptChainCall());
      assertFalse(node2.isFunction());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCast());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isOptChainGetElem());
      assertFalse(node2.isImportSpecs());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isComputedFieldDef());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isSpread());
      assertFalse(node2.isBreak());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isSuper());
      assertFalse(node2.isComma());
      assertEquals(0, node2.getLength());
      assertFalse(node2.isHook());
      assertFalse(node2.isYield());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAwait());
      assertFalse(node2.isBitNot());
      assertFalse(node2.isIn());
      assertFalse(node2.isImportSpec());
      assertFalse(node2.isAssignOr());
      assertFalse(node2.isFalse());
      assertFalse(node2.isTry());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isIf());
      assertFalse(node2.isRest());
      assertFalse(node2.isCallSignature());
      assertFalse(node2.isRecordType());
      assertFalse(node2.isForOf());
      assertFalse(node2.isCase());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isMemberFieldDef());
      assertFalse(node2.isWith());
      assertFalse(node2.isDefaultValue());
      assertTrue(node2.hasZeroOrOneChild());
      assertFalse(node2.isNullishCoalesce());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertTrue(node2.isString());
      assertFalse(node2.isName());
      assertFalse(node2.isRoot());
      assertFalse(node2.isAssignAnd());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isDestructuringLhs());
      assertFalse(node2.isForIn());
      assertFalse(node2.isMemberVariableDef());
      assertFalse(node2.isOptChainGetProp());
      assertFalse(node2.isNeg());
      assertFalse(node2.isAssignExponent());
      assertFalse(node2.isMemberFunctionDef());
      assertFalse(node2.isDo());
      assertFalse(node2.isTemplateLitString());
      assertFalse(node2.isEQ());
      assertFalse(node2.isImport());
      assertFalse(node2.isClass());
      assertFalse(node2.isLabel());
      assertTrue(node2.isStringLit());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isVoid());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isTrue());
      assertFalse(node2.isInterfaceMembers());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isOr());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isBigInt());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isThrow());
      assertFalse(node2.isExportSpecs());
      assertFalse(node2.isConst());
      assertFalse(node2.isImportStar());
      assertFalse(node2.isInc());
      assertNull(node2.getOriginalName());
      assertFalse(node2.isVanillaFor());
      assertFalse(node2.isObjectRest());
      assertFalse(node2.isTaggedTemplateLit());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasParent());
      assertFalse(node2.isSHNE());
      assertFalse(node2.isAnd());
      assertFalse(node2.isTemplateLit());
      assertFalse(node2.isModuleBody());
      assertFalse(node2.hasTwoChildren());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssignNullishCoalesce());
      assertFalse(node2.isArrayPattern());
      assertFalse(node2.isSub());
      assertFalse(node2.isDestructuringPattern());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNE());
      assertFalse(node2.isExportSpec());
      assertFalse(node2.isNormalBlock());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isComputedProp());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isImportMeta());
      assertEquals(Token.STRINGLIT, node2.getToken());
      assertFalse(node2.isThis());
      assertFalse(node2.isClassMembers());
      assertFalse(node2.isSHEQ());
      assertFalse(node2.isBlock());
      assertFalse(node2.isIndexSignature());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isLiteralObject());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isBigIntValueType());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry0.findCommonSuperObject(templatizedType0, (ObjectType) null);
      assertNotNull(instanceObjectType0);
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNativeObjectType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isTemplatizedType());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.isRecordType());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isFunctionType());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isStringValueType());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isVoidType());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isNoType());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isVoidType());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      
      ErrorReporter errorReporter1 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter1);
      assertSame(errorReporter1, errorReporter0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, treeSet0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(treeSet0.contains("]!f[:"));
      
      ImmutableList<TemplateType> immutableList0 = jSTypeRegistry1.maybeGetTemplateTypesOfBuiltin("IS_NAMESPACE");
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNull(immutableList0);
      assertFalse(treeSet0.contains("IS_NAMESPACE"));
      assertSame(errorReporter0, errorReporter1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createNullableType(templateType0);
      assertFalse(unionType0.equals((Object)jSType0));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(unionType0);
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isLiteralObject());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNominalConstructorOrInterface());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isBigIntValueType());
      assertFalse(unionType0.isSymbolValueType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isEnumElementType());
      assertEquals(0, unionType0.getTemplateParamCount());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isTemplatizedType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertTrue(unionType0.isSuccessfullyResolved());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNativeObjectType());
      assertFalse(unionType0.isRawTypeOfTemplatizedType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertTrue(unionType0.isResolved());
      assertFalse(unionType0.isStructuralInterface());
      assertFalse(unionType0.isNamedType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNativeObjectType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isTemplatizedType());
      assertNotSame(unionType0, jSType0);
      assertSame(errorReporter0, errorReporter1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[0] = (JSType) instanceObjectType0;
      jSTypeArray0[1] = (JSType) instanceObjectType0;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(unknownType0);
      assertFalse(unknownType0.isEnumType());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isTemplatizedType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isBigIntValueType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isAllType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertTrue(unknownType0.isNullable());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isStructuralInterface());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertTrue(unknownType0.isResolved());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isNamedType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isLiteralObject());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isSymbolValueType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertEquals("?", unknownType0.getReferenceName());
      
      jSTypeArray0[2] = (JSType) unknownType0;
      jSTypeArray0[3] = (JSType) null;
      jSTypeArray0[4] = (JSType) instanceObjectType0;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createTemplatizedType((ObjectType) null, jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 3
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      assertNotNull(templateType0);
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isSymbolValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isLiteralObject());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      assertNotNull(templatizedType0);
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isSymbolValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isLiteralObject());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isStructuralInterface());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isNoType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isRecordType());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertTrue(templatizedType0.isResolved());
      assertTrue(templatizedType0.isObject());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isFunctionType());
      assertFalse(templatizedType0.isLiteralObject());
      assertTrue(templatizedType0.isTemplateType());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, treeSet0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      HashMap<TemplateType, JSType> hashMap1 = new HashMap<TemplateType, JSType>();
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(errorReporter0);
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertNotNull(jSTypeRegistry2);
      
      JSTypeRegistry jSTypeRegistry3 = new JSTypeRegistry(errorReporter0, treeSet0);
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry1));
      assertNotNull(jSTypeRegistry3);
      
      TemplateType templateType1 = jSTypeRegistry0.getObjectElementKey();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry3));
      assertFalse(templateType1.equals((Object)templateType0));
      assertNotNull(templateType1);
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isNoType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isBigIntValueType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isStructuralInterface());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isEnumType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isInterface());
      assertEquals("IOBJECT_VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isConstructor());
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry2);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry3);
      assertNotSame(templateType1, templateType0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap2 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap2);
      assertTrue(hashMap2.isEmpty());
      assertEquals(0, hashMap2.size());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry3, hashMap2, true);
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry1));
      assertNotNull(recordType0);
      assertTrue(hashMap2.isEmpty());
      assertEquals(0, hashMap2.size());
      assertFalse(recordType0.isAnonymous());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isNominalConstructorOrInterface());
      assertFalse(recordType0.isLiteralObject());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isRawTypeOfTemplatizedType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNullType());
      assertEquals(0, recordType0.getTemplateParamCount());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isSymbolValueType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isTemplatizedType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.isSuccessfullyResolved());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isBigIntValueType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isUnsuccessfullyResolved());
      assertTrue(recordType0.isResolved());
      assertTrue(recordType0.isStructuralType());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isStructuralInterface());
      
      RecordType recordType1 = new RecordType(jSTypeRegistry3, hashMap2, true);
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry1));
      assertTrue(recordType1.equals((Object)recordType0));
      assertNotNull(recordType1);
      assertTrue(hashMap2.isEmpty());
      assertEquals(0, hashMap2.size());
      assertFalse(recordType1.isNoObjectType());
      assertFalse(recordType1.isNoType());
      assertFalse(recordType1.isRawTypeOfTemplatizedType());
      assertFalse(recordType1.isBigIntValueType());
      assertFalse(recordType1.isNumberValueType());
      assertFalse(recordType1.isUnionType());
      assertFalse(recordType1.isLiteralObject());
      assertFalse(recordType1.isFunctionPrototypeType());
      assertFalse(recordType1.isNamedType());
      assertFalse(recordType1.isNoResolvedType());
      assertFalse(recordType1.isConstructor());
      assertTrue(recordType1.matchesObjectContext());
      assertFalse(recordType1.isUnsuccessfullyResolved());
      assertEquals(0, recordType1.getTemplateParamCount());
      assertFalse(recordType1.isCheckedUnknownType());
      assertFalse(recordType1.isAnonymous());
      assertFalse(recordType1.isTemplatizedType());
      assertFalse(recordType1.isEnumElementType());
      assertFalse(recordType1.isFunctionType());
      assertTrue(recordType1.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertTrue(recordType1.isObject());
      assertFalse(recordType1.isNullType());
      assertFalse(recordType1.isSymbolValueType());
      assertFalse(recordType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType1.isAllType());
      assertFalse(recordType1.isNativeObjectType());
      assertTrue(recordType1.hasCachedValues());
      assertFalse(recordType1.isStructuralInterface());
      assertTrue(recordType1.isStructuralType());
      assertFalse(recordType1.isEnumType());
      assertFalse(recordType1.isTemplateType());
      assertFalse(recordType1.isBooleanValueType());
      assertFalse(recordType1.isOrdinaryFunction());
      assertTrue(recordType1.isRecordType());
      assertFalse(recordType1.isVoidType());
      assertTrue(recordType1.isResolved());
      assertFalse(recordType1.isNominalConstructorOrInterface());
      assertFalse(recordType1.isInterface());
      assertFalse(recordType1.isStringValueType());
      
      jSTypeRegistry1.registerDroppedPropertiesInUnion(recordType0, recordType1);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry3));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry1));
      assertTrue(recordType0.equals((Object)recordType1));
      assertTrue(recordType1.equals((Object)recordType0));
      assertTrue(hashMap2.isEmpty());
      assertEquals(0, hashMap2.size());
      assertFalse(recordType0.isAnonymous());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isNominalConstructorOrInterface());
      assertFalse(recordType0.isLiteralObject());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isRawTypeOfTemplatizedType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNullType());
      assertEquals(0, recordType0.getTemplateParamCount());
      assertTrue(recordType0.isObject());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isSymbolValueType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isTemplatizedType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.isSuccessfullyResolved());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isBigIntValueType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isUnsuccessfullyResolved());
      assertTrue(recordType0.isResolved());
      assertTrue(recordType0.isStructuralType());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isStructuralInterface());
      assertFalse(recordType1.isNoObjectType());
      assertFalse(recordType1.isNoType());
      assertFalse(recordType1.isRawTypeOfTemplatizedType());
      assertFalse(recordType1.isBigIntValueType());
      assertFalse(recordType1.isNumberValueType());
      assertFalse(recordType1.isUnionType());
      assertFalse(recordType1.isLiteralObject());
      assertFalse(recordType1.isFunctionPrototypeType());
      assertFalse(recordType1.isNamedType());
      assertFalse(recordType1.isNoResolvedType());
      assertFalse(recordType1.isConstructor());
      assertTrue(recordType1.matchesObjectContext());
      assertFalse(recordType1.isUnsuccessfullyResolved());
      assertEquals(0, recordType1.getTemplateParamCount());
      assertFalse(recordType1.isCheckedUnknownType());
      assertFalse(recordType1.isAnonymous());
      assertFalse(recordType1.isTemplatizedType());
      assertFalse(recordType1.isEnumElementType());
      assertFalse(recordType1.isFunctionType());
      assertTrue(recordType1.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertTrue(recordType1.isObject());
      assertFalse(recordType1.isNullType());
      assertFalse(recordType1.isSymbolValueType());
      assertFalse(recordType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType1.isAllType());
      assertFalse(recordType1.isNativeObjectType());
      assertTrue(recordType1.hasCachedValues());
      assertFalse(recordType1.isStructuralInterface());
      assertTrue(recordType1.isStructuralType());
      assertFalse(recordType1.isEnumType());
      assertFalse(recordType1.isTemplateType());
      assertFalse(recordType1.isBooleanValueType());
      assertFalse(recordType1.isOrdinaryFunction());
      assertTrue(recordType1.isRecordType());
      assertFalse(recordType1.isVoidType());
      assertTrue(recordType1.isResolved());
      assertFalse(recordType1.isNominalConstructorOrInterface());
      assertFalse(recordType1.isInterface());
      assertFalse(recordType1.isStringValueType());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry3);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry2);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry3, jSTypeRegistry2);
      assertNotSame(jSTypeRegistry3, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry3, jSTypeRegistry1);
      assertNotSame(recordType0, recordType1);
      assertNotSame(recordType1, recordType0);
      
      boolean boolean0 = jSTypeRegistry2.isForwardDeclaredType("IOBJECT_VALUE");
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry3));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(boolean0);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry3);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      Node node0 = Node.newString("UNUSED_RETURN_T");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isImportStar());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isAwait());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isBreak());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSuper());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isExponent());
      assertFalse(node0.isBlock());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isRoot());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSub());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isForIn());
      assertFalse(node0.isVar());
      assertFalse(node0.isDestructuringPattern());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasParent());
      assertFalse(node0.isSHNE());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isYield());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCase());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isConst());
      assertFalse(node0.isIn());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isRest());
      assertFalse(node0.isAnd());
      assertFalse(node0.isArrayPattern());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isExport());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isDefaultValue());
      assertTrue(node0.isString());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isSpread());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isForOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isNeg());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isImportSpec());
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, (String) null);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression0);
      assertFalse(node0.isImportStar());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isAwait());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isBreak());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSuper());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isExponent());
      assertFalse(node0.isBlock());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isRoot());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSub());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isForIn());
      assertFalse(node0.isVar());
      assertFalse(node0.isDestructuringPattern());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasParent());
      assertFalse(node0.isSHNE());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isYield());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCase());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isConst());
      assertFalse(node0.isIn());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isRest());
      assertFalse(node0.isAnd());
      assertFalse(node0.isArrayPattern());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isExport());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isDefaultValue());
      assertTrue(node0.isString());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isSpread());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isForOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isNeg());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isImportSpec());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      
      JSTypeExpression jSTypeExpression1 = JSTypeExpression.makeOptionalArg(jSTypeExpression0);
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression1);
      assertFalse(node0.isImportStar());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isAwait());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isBreak());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSuper());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isExponent());
      assertFalse(node0.isBlock());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isRoot());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSub());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isForIn());
      assertFalse(node0.isVar());
      assertFalse(node0.isDestructuringPattern());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSHNE());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isYield());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCase());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isConst());
      assertFalse(node0.isIn());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isRest());
      assertFalse(node0.isAnd());
      assertFalse(node0.isArrayPattern());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertTrue(node0.hasParent());
      assertFalse(node0.isExport());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isDefaultValue());
      assertTrue(node0.isString());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isSpread());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isForOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isNeg());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isImportSpec());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      ImmutableSet<String> immutableSet0 = jSTypeExpression1.getRecordPropertyNames();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(immutableSet0);
      assertFalse(node0.isImportStar());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isAwait());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isBreak());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSuper());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isExponent());
      assertFalse(node0.isBlock());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isRoot());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSub());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isForIn());
      assertFalse(node0.isVar());
      assertFalse(node0.isDestructuringPattern());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSHNE());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isYield());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCase());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isConst());
      assertFalse(node0.isIn());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isRest());
      assertFalse(node0.isAnd());
      assertFalse(node0.isArrayPattern());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertTrue(node0.hasParent());
      assertFalse(node0.isExport());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isDefaultValue());
      assertTrue(node0.isString());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isSpread());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isForOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isNeg());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isImportSpec());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, immutableSet0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeRegistry0);
      assertFalse(node0.isImportStar());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isAwait());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isBreak());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSuper());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isExponent());
      assertFalse(node0.isBlock());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isRoot());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSub());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isForIn());
      assertFalse(node0.isVar());
      assertFalse(node0.isDestructuringPattern());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSHNE());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isYield());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCase());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isConst());
      assertFalse(node0.isIn());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isRest());
      assertFalse(node0.isAnd());
      assertFalse(node0.isArrayPattern());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertTrue(node0.hasParent());
      assertFalse(node0.isExport());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isDefaultValue());
      assertTrue(node0.isString());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isSpread());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isForOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isNeg());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isImportSpec());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateType0);
      assertFalse(node0.isImportStar());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isAwait());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isBreak());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSuper());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isExponent());
      assertFalse(node0.isBlock());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isRoot());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSub());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isForIn());
      assertFalse(node0.isVar());
      assertFalse(node0.isDestructuringPattern());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSHNE());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isYield());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCase());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isConst());
      assertFalse(node0.isIn());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isRest());
      assertFalse(node0.isAnd());
      assertFalse(node0.isArrayPattern());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertTrue(node0.hasParent());
      assertFalse(node0.isExport());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isDefaultValue());
      assertTrue(node0.isString());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isSpread());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isForOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isNeg());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isImportSpec());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isBigIntValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(recordType0);
      assertFalse(node0.isImportStar());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isAwait());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isBreak());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSuper());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isExponent());
      assertFalse(node0.isBlock());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isRoot());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSub());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isForIn());
      assertFalse(node0.isVar());
      assertFalse(node0.isDestructuringPattern());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSHNE());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isYield());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCase());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isConst());
      assertFalse(node0.isIn());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isRest());
      assertFalse(node0.isAnd());
      assertFalse(node0.isArrayPattern());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertTrue(node0.hasParent());
      assertFalse(node0.isExport());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isDefaultValue());
      assertTrue(node0.isString());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isSpread());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isForOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isNeg());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isImportSpec());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(recordType0.isStructuralType());
      assertFalse(recordType0.isStructuralInterface());
      assertFalse(recordType0.isTemplatizedType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.isRecordType());
      assertTrue(recordType0.isResolved());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNominalConstructorOrInterface());
      assertFalse(recordType0.isUnsuccessfullyResolved());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isRawTypeOfTemplatizedType());
      assertFalse(recordType0.isAnonymous());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isBigIntValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertEquals(0, recordType0.getTemplateParamCount());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isLiteralObject());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertTrue(recordType0.isSuccessfullyResolved());
      assertFalse(recordType0.isFunctionType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isSymbolValueType());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      
      jSTypeRegistry0.registerDroppedPropertiesInUnion(recordType0, recordType0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node0.isImportStar());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isAwait());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isBreak());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSuper());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isExponent());
      assertFalse(node0.isBlock());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isRoot());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSub());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isForIn());
      assertFalse(node0.isVar());
      assertFalse(node0.isDestructuringPattern());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSHNE());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isYield());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCase());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isConst());
      assertFalse(node0.isIn());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isRest());
      assertFalse(node0.isAnd());
      assertFalse(node0.isArrayPattern());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertTrue(node0.hasParent());
      assertFalse(node0.isExport());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isDefaultValue());
      assertTrue(node0.isString());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isSpread());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isForOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isNeg());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isImportSpec());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(recordType0.isStructuralType());
      assertFalse(recordType0.isStructuralInterface());
      assertFalse(recordType0.isTemplatizedType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.isRecordType());
      assertTrue(recordType0.isResolved());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNominalConstructorOrInterface());
      assertFalse(recordType0.isUnsuccessfullyResolved());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isRawTypeOfTemplatizedType());
      assertFalse(recordType0.isAnonymous());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isBigIntValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertEquals(0, recordType0.getTemplateParamCount());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isLiteralObject());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertTrue(recordType0.isSuccessfullyResolved());
      assertFalse(recordType0.isFunctionType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isSymbolValueType());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.ASYNC_ITERABLE_TYPE;
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(instanceObjectType0);
      assertFalse(node0.isImportStar());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isAwait());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isBreak());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSuper());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isExponent());
      assertFalse(node0.isBlock());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isRoot());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSub());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isForIn());
      assertFalse(node0.isVar());
      assertFalse(node0.isDestructuringPattern());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSHNE());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isYield());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCase());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isConst());
      assertFalse(node0.isIn());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isRest());
      assertFalse(node0.isAnd());
      assertFalse(node0.isArrayPattern());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertTrue(node0.hasParent());
      assertFalse(node0.isExport());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isDefaultValue());
      assertTrue(node0.isString());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isSpread());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isForOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isNeg());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isImportSpec());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertFalse(instanceObjectType0.isTemplateType());
      assertEquals(1, instanceObjectType0.getTemplateParamCount());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashMap<String, EnumType> hashMap0 = new HashMap<String, EnumType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry0.createRecordType(hashMap0);
      assertNotNull(instanceObjectType0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isNativeObjectType());
      
      TypeStringBuilder typeStringBuilder0 = new TypeStringBuilder(false);
      assertNotNull(typeStringBuilder0);
      
      TemplateType templateType0 = jSTypeRegistry0.getAsyncIterableTemplate();
      assertNotNull(templateType0);
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isInterface());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      
      templateType0.appendTo(typeStringBuilder0);
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isInterface());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      
      InstanceObjectType instanceObjectType1 = (InstanceObjectType)jSTypeRegistry0.findCommonSuperObject(instanceObjectType0, templateType0);
      assertNotNull(instanceObjectType1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isInterface());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertTrue(instanceObjectType1.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType1.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType1.isLiteralObject());
      assertFalse(instanceObjectType1.isNoType());
      assertTrue(instanceObjectType1.isInstanceType());
      assertTrue(instanceObjectType1.isObject());
      assertFalse(instanceObjectType1.isNoObjectType());
      assertFalse(instanceObjectType1.isInterface());
      assertFalse(instanceObjectType1.isStringValueType());
      assertFalse(instanceObjectType1.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType1.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType1.isNamedType());
      assertTrue(instanceObjectType1.isSuccessfullyResolved());
      assertTrue(instanceObjectType1.isResolved());
      assertFalse(instanceObjectType1.isFunctionType());
      assertFalse(instanceObjectType1.isAllType());
      assertFalse(instanceObjectType1.isAnonymous());
      assertFalse(instanceObjectType1.isTemplatizedType());
      assertFalse(instanceObjectType1.isTemplateType());
      assertFalse(instanceObjectType1.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType1.isStructuralInterface());
      assertFalse(instanceObjectType1.isEnumElementType());
      assertFalse(instanceObjectType1.isSymbolValueType());
      assertTrue(instanceObjectType1.isNativeObjectType());
      assertFalse(instanceObjectType1.isNullType());
      assertFalse(instanceObjectType1.hasCachedValues());
      assertFalse(instanceObjectType1.isCheckedUnknownType());
      assertFalse(instanceObjectType1.isBigIntValueType());
      assertFalse(instanceObjectType1.isVoidType());
      assertFalse(instanceObjectType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType1.isRecordType());
      assertFalse(instanceObjectType1.isBooleanValueType());
      assertFalse(instanceObjectType1.isConstructor());
      assertEquals(2, instanceObjectType1.getTemplateParamCount());
      assertTrue(instanceObjectType1.matchesObjectContext());
      assertFalse(instanceObjectType1.isNoResolvedType());
      assertFalse(instanceObjectType1.isNumberValueType());
      assertFalse(instanceObjectType1.isFunctionPrototypeType());
      assertFalse(instanceObjectType1.isEnumType());
      assertFalse(instanceObjectType1.isUnionType());
      assertSame(instanceObjectType0, instanceObjectType1);
      assertSame(instanceObjectType1, instanceObjectType0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean0 = hashSet0.add("p336");
      assertTrue(boolean0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(hashSet0.contains("p336"));
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, hashSet0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(hashSet0.contains("p336"));
      
      ImmutableList<TemplateType> immutableList0 = jSTypeRegistry1.maybeGetTemplateTypesOfBuiltin("modifies");
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNull(immutableList0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(hashSet0.contains("modifies"));
      assertTrue(hashSet0.contains("p336"));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(nullType0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNamedType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isBigIntValueType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertEquals(0, nullType0.getTemplateParamCount());
      assertFalse(nullType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isNominalConstructorOrInterface());
      assertTrue(nullType0.isResolved());
      assertFalse(nullType0.isSymbolValueType());
      assertFalse(nullType0.isNativeObjectType());
      assertFalse(nullType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isRawTypeOfTemplatizedType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isStructuralInterface());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.isSuccessfullyResolved());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isLiteralObject());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isTemplatizedType());
      assertFalse(hashSet0.contains("modifies"));
      assertTrue(hashSet0.contains("p336"));
      
      ImmutableList<NullType> immutableList1 = ImmutableList.of(nullType0, nullType0, nullType0, nullType0, nullType0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(immutableList1);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNamedType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isBigIntValueType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertEquals(0, nullType0.getTemplateParamCount());
      assertFalse(nullType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isNominalConstructorOrInterface());
      assertTrue(nullType0.isResolved());
      assertFalse(nullType0.isSymbolValueType());
      assertFalse(nullType0.isNativeObjectType());
      assertFalse(nullType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isRawTypeOfTemplatizedType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isStructuralInterface());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.isSuccessfullyResolved());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isLiteralObject());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isTemplatizedType());
      assertEquals(5, immutableList1.size());
      assertFalse(hashSet0.contains("modifies"));
      assertTrue(hashSet0.contains("p336"));
      assertTrue(immutableList1.contains(nullType0));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      
      NullType nullType1 = (NullType)jSTypeRegistry1.createUnionType((List<? extends JSType>) immutableList1);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(nullType1);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNamedType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isBigIntValueType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertEquals(0, nullType0.getTemplateParamCount());
      assertFalse(nullType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isNominalConstructorOrInterface());
      assertTrue(nullType0.isResolved());
      assertFalse(nullType0.isSymbolValueType());
      assertFalse(nullType0.isNativeObjectType());
      assertFalse(nullType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isRawTypeOfTemplatizedType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isStructuralInterface());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.isSuccessfullyResolved());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isLiteralObject());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isTemplatizedType());
      assertEquals(5, immutableList1.size());
      assertFalse(nullType1.isFunctionPrototypeType());
      assertTrue(nullType1.matchesNumberContext());
      assertFalse(nullType1.isEnumType());
      assertFalse(nullType1.isTemplatizedType());
      assertFalse(nullType1.isEnumElementType());
      assertFalse(nullType1.isVoidType());
      assertEquals(0, nullType1.getTemplateParamCount());
      assertFalse(nullType1.isStringValueType());
      assertTrue(nullType1.isSuccessfullyResolved());
      assertFalse(nullType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(nullType1.isBigIntValueType());
      assertTrue(nullType1.matchesStringContext());
      assertFalse(nullType1.isBooleanValueType());
      assertFalse(nullType1.isUnionType());
      assertFalse(nullType1.isSymbolValueType());
      assertTrue(nullType1.isNullable());
      assertFalse(nullType1.isNoResolvedType());
      assertFalse(nullType1.isCheckedUnknownType());
      assertFalse(nullType1.isNumberValueType());
      assertEquals("null", nullType1.getDisplayName());
      assertFalse(nullType1.isConstructor());
      assertTrue(nullType1.isNullType());
      assertFalse(nullType1.isInterface());
      assertFalse(nullType1.isRecordType());
      assertFalse(nullType1.isNominalConstructorOrInterface());
      assertFalse(nullType1.isLiteralObject());
      assertFalse(nullType1.isFunctionType());
      assertFalse(nullType1.isNoObjectType());
      assertFalse(nullType1.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, nullType1.getPossibleToBooleanOutcomes());
      assertFalse(nullType1.isRawTypeOfTemplatizedType());
      assertFalse(nullType1.matchesObjectContext());
      assertFalse(nullType1.isNativeObjectType());
      assertFalse(nullType1.isAllType());
      assertFalse(nullType1.isTemplateType());
      assertFalse(nullType1.isOrdinaryFunction());
      assertFalse(nullType1.isUnsuccessfullyResolved());
      assertTrue(nullType1.isResolved());
      assertFalse(nullType1.isNamedType());
      assertFalse(nullType1.isStructuralInterface());
      assertFalse(hashSet0.contains("modifies"));
      assertTrue(hashSet0.contains("p336"));
      assertTrue(immutableList1.contains(nullType0));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(nullType0, nullType1);
      assertSame(nullType1, nullType0);
      
      RecordType recordType0 = templateType0.toMaybeRecordType();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNull(recordType0);
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isInterface());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createNullableType((JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      Node node0 = Node.newString("UNUSED_RETURN_T");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isComma());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAwait());
      assertFalse(node0.hasParent());
      assertFalse(node0.isSuper());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNE());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTemplateLitString());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isSub());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isExport());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isSHNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLet());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNull());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isExportSpec());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isRest());
      assertFalse(node0.isNeg());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isInterfaceMembers());
      assertTrue(node0.isString());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isImport());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isClass());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isSpread());
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, (String) null);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression0);
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isComma());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAwait());
      assertFalse(node0.hasParent());
      assertFalse(node0.isSuper());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNE());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTemplateLitString());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isSub());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isExport());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isSHNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLet());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNull());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isExportSpec());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isRest());
      assertFalse(node0.isNeg());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isInterfaceMembers());
      assertTrue(node0.isString());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isImport());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isClass());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isSpread());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      
      JSTypeExpression jSTypeExpression1 = JSTypeExpression.makeOptionalArg(jSTypeExpression0);
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression1);
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isComma());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAwait());
      assertFalse(node0.isSuper());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNE());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTemplateLitString());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isSub());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isExport());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isSHNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLet());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNull());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isExportSpec());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isRest());
      assertFalse(node0.isNeg());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isInterfaceMembers());
      assertTrue(node0.isString());
      assertTrue(node0.hasParent());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isImport());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isClass());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isSpread());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      ImmutableSet<String> immutableSet0 = jSTypeExpression1.getRecordPropertyNames();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(immutableSet0);
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isComma());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAwait());
      assertFalse(node0.isSuper());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNE());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTemplateLitString());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isSub());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isExport());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isSHNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLet());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNull());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isExportSpec());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isRest());
      assertFalse(node0.isNeg());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isInterfaceMembers());
      assertTrue(node0.isString());
      assertTrue(node0.hasParent());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isImport());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isClass());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isSpread());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      JSTypeExpression jSTypeExpression2 = jSTypeExpression0.replaceNamesWithUnknownType(immutableSet0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(jSTypeExpression2.equals((Object)jSTypeExpression0));
      assertFalse(jSTypeExpression2.equals((Object)jSTypeExpression1));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression2);
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isComma());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAwait());
      assertFalse(node0.isSuper());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNE());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTemplateLitString());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isSub());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isExport());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isSHNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLet());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNull());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isExportSpec());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isRest());
      assertFalse(node0.isNeg());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isInterfaceMembers());
      assertTrue(node0.isString());
      assertTrue(node0.hasParent());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isImport());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isClass());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isSpread());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertFalse(jSTypeExpression2.isOptionalArg());
      assertFalse(jSTypeExpression2.isVarArgs());
      assertNull(jSTypeExpression2.getSourceName());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression2);
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression2);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertNotSame(jSTypeExpression2, jSTypeExpression0);
      assertNotSame(jSTypeExpression2, jSTypeExpression1);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, immutableSet0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeRegistry0);
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isComma());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAwait());
      assertFalse(node0.isSuper());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNE());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTemplateLitString());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isSub());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isExport());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isSHNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLet());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNull());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isExportSpec());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isRest());
      assertFalse(node0.isNeg());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isInterfaceMembers());
      assertTrue(node0.isString());
      assertTrue(node0.hasParent());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isImport());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isClass());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isSpread());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      TemplateTypeReplacer templateTypeReplacer0 = TemplateTypeReplacer.forInference(jSTypeRegistry0, hashMap0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateTypeReplacer0);
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isComma());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAwait());
      assertFalse(node0.isSuper());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNE());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTemplateLitString());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isSub());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isExport());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isSHNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLet());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNull());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isExportSpec());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isRest());
      assertFalse(node0.isNeg());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isInterfaceMembers());
      assertTrue(node0.isString());
      assertTrue(node0.hasParent());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isImport());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isClass());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isSpread());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression2);
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression2);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      JSType jSType0 = templateTypeReplacer0.caseNumberType();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSType0);
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isComma());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAwait());
      assertFalse(node0.isSuper());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNE());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTemplateLitString());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isSub());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isExport());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isSHNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLet());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNull());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isExportSpec());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isRest());
      assertFalse(node0.isNeg());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isInterfaceMembers());
      assertTrue(node0.isString());
      assertTrue(node0.hasParent());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isImport());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isClass());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isSpread());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertTrue(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isNoType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isEnumType());
      assertEquals("number", jSType0.getDisplayName());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isStringValueType());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression2);
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression2);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      Outcome outcome0 = Outcome.NULLISH;
      NoType noType0 = (NoType)jSType0.getRestrictedTypeGivenOutcome(outcome0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(noType0);
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isComma());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAwait());
      assertFalse(node0.isSuper());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNE());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTemplateLitString());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isSub());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isExport());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isSHNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLet());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNull());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isExportSpec());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isRest());
      assertFalse(node0.isNeg());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isInterfaceMembers());
      assertTrue(node0.isString());
      assertTrue(node0.hasParent());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isImport());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isClass());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isSpread());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertTrue(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isNoType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isEnumType());
      assertEquals("number", jSType0.getDisplayName());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isStringValueType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isSymbolValueType());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isNominalConstructorOrInterface());
      assertFalse(noType0.isAbstract());
      assertFalse(noType0.isStructuralInterface());
      assertTrue(noType0.isVoidable());
      assertNull(noType0.getGoogModuleId());
      assertTrue(noType0.matchesObjectContext());
      assertEquals(0, noType0.getTemplateParamCount());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNamedType());
      assertFalse(noType0.isTemplatizedType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isLiteralObject());
      assertTrue(noType0.isSuccessfullyResolved());
      assertFalse(noType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.isResolved());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.matchesSymbolContext());
      assertTrue(noType0.isNativeObjectType());
      assertFalse(noType0.isBigIntValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.hasInstanceType());
      assertFalse(noType0.isConstructor());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isUnsuccessfullyResolved());
      assertFalse(noType0.isAnonymous());
      assertTrue(noType0.isNoType());
      assertNull(noType0.getClosurePrimitive());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isRawTypeOfTemplatizedType());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression2);
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression2);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      jSTypeRegistry0.registerPropertyOnType((String) null, jSType0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isComma());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAwait());
      assertFalse(node0.isSuper());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNE());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTemplateLitString());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isSub());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isExport());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isSHNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLet());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNull());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isExportSpec());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isRest());
      assertFalse(node0.isNeg());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isInterfaceMembers());
      assertTrue(node0.isString());
      assertTrue(node0.hasParent());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isImport());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isClass());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isSpread());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertTrue(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isNoType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isEnumType());
      assertEquals("number", jSType0.getDisplayName());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isStringValueType());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression2);
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression2);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.evaluateTypeExpressionInGlobalScope(jSTypeExpression1);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(unionType0);
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isComma());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAwait());
      assertFalse(node0.isSuper());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNE());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTemplateLitString());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isSub());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isExport());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isSHNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLet());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNull());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isExportSpec());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isRest());
      assertFalse(node0.isNeg());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isInterfaceMembers());
      assertTrue(node0.isString());
      assertTrue(node0.hasParent());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isImport());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isClass());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isSpread());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertFalse(unionType0.isStructuralInterface());
      assertFalse(unionType0.isNativeObjectType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isSymbolValueType());
      assertTrue(unionType0.isResolved());
      assertTrue(unionType0.isSuccessfullyResolved());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isNamedType());
      assertFalse(unionType0.isTemplatizedType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isUnsuccessfullyResolved());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isRawTypeOfTemplatizedType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isLiteralObject());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNominalConstructorOrInterface());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isBigIntValueType());
      assertFalse(unionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isNumberValueType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNoResolvedType());
      assertEquals(0, unionType0.getTemplateParamCount());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression2);
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression2);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("IOBJECT_VALUE");
      assertNotNull(templateType0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      TypeStringBuilder typeStringBuilder0 = new TypeStringBuilder(false);
      assertNotNull(typeStringBuilder0);
      
      templateType0.appendTo(typeStringBuilder0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      TemplateType templateType1 = (TemplateType)jSTypeRegistry0.findCommonSuperObject(templateType0, templateType0);
      assertNotNull(templateType1);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isInterface());
      assertTrue(templateType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isEnumElementType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isBigIntValueType());
      assertEquals("IOBJECT_VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isNoType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertTrue(templateType1.isObject());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isEnumType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ErrorReporter errorReporter1 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertFalse(errorReporter1.equals((Object)errorReporter0));
      assertNotNull(errorReporter1);
      
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(errorReporter1, linkedHashSet0);
      assertFalse(errorReporter1.equals((Object)errorReporter0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertNotNull(jSTypeRegistry2);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry1, false);
      assertFalse(errorReporter0.equals((Object)errorReporter1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertNotNull(unknownType0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isRecordType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isLiteralObject());
      assertTrue(unknownType0.isResolved());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.isBigIntValueType());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isEnumElementType());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertFalse(unknownType0.isTemplatizedType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isStructuralInterface());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNamedType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isSymbolValueType());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      UnknownType unknownType1 = (UnknownType)jSTypeRegistry2.createOptionalType(unknownType0);
      assertFalse(errorReporter0.equals((Object)errorReporter1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertFalse(errorReporter1.equals((Object)errorReporter0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertNotNull(unknownType1);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isRecordType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isLiteralObject());
      assertTrue(unknownType0.isResolved());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.isBigIntValueType());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isEnumElementType());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertFalse(unknownType0.isTemplatizedType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isStructuralInterface());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNamedType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isSymbolValueType());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType1.isSymbolValueType());
      assertTrue(unknownType1.canBeCalled());
      assertFalse(unknownType1.isNullType());
      assertEquals(0, unknownType1.getTemplateParamCount());
      assertFalse(unknownType1.isTemplatizedType());
      assertTrue(unknownType1.isVoidable());
      assertFalse(unknownType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unknownType1.isEnumElementType());
      assertFalse(unknownType1.isAllType());
      assertTrue(unknownType1.matchesSymbolContext());
      assertFalse(unknownType1.isFunctionType());
      assertFalse(unknownType1.isVoidType());
      assertFalse(unknownType1.isCheckedUnknownType());
      assertTrue(unknownType1.matchesStringContext());
      assertFalse(unknownType1.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertTrue(unknownType1.matchesNumberContext());
      assertFalse(unknownType1.isTemplateType());
      assertTrue(unknownType1.matchesObjectContext());
      assertFalse(unknownType1.isStructuralInterface());
      assertTrue(unknownType1.isResolved());
      assertFalse(unknownType1.isNamedType());
      assertFalse(unknownType1.isOrdinaryFunction());
      assertFalse(unknownType1.isUnsuccessfullyResolved());
      assertFalse(unknownType1.isNominalConstructorOrInterface());
      assertFalse(unknownType1.isNoObjectType());
      assertTrue(unknownType1.isUnknownType());
      assertTrue(unknownType1.isNullable());
      assertFalse(unknownType1.isBigIntValueType());
      assertEquals("Unknown", unknownType1.getDisplayName());
      assertFalse(unknownType1.isInterface());
      assertTrue(unknownType1.isSuccessfullyResolved());
      assertFalse(unknownType1.isLiteralObject());
      assertFalse(unknownType1.isNoType());
      assertFalse(unknownType1.isRawTypeOfTemplatizedType());
      assertFalse(unknownType1.hasCachedValues());
      assertFalse(unknownType1.isNoResolvedType());
      assertFalse(unknownType1.isUnionType());
      assertTrue(unknownType1.hasDisplayName());
      assertFalse(unknownType1.isNativeObjectType());
      assertTrue(unknownType1.isObject());
      assertFalse(unknownType1.isEnumType());
      assertFalse(unknownType1.isConstructor());
      assertEquals("?", unknownType1.getReferenceName());
      assertFalse(unknownType1.isRecordType());
      assertFalse(unknownType1.isBooleanValueType());
      assertFalse(unknownType1.isNumberValueType());
      assertFalse(unknownType1.isFunctionPrototypeType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry2);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry1);
      assertSame(unknownType0, unknownType1);
      assertSame(unknownType1, unknownType0);
      
      boolean boolean0 = jSTypeRegistry2.isForwardDeclaredType("IOBJECT_VALUE");
      assertFalse(errorReporter1.equals((Object)errorReporter0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertNotSame(jSTypeRegistry2, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry1);
      
      Stack<RecordType> stack0 = new Stack<RecordType>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) stack0);
      assertNotNull(immutableList0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, immutableList0.size());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry2, (String) null, immutableList0);
      assertFalse(errorReporter1.equals((Object)errorReporter0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertNotNull(noResolvedType0);
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isAnonymous());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isVoidable());
      assertNull(noResolvedType0.getGoogModuleId());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, immutableList0.size());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      Node node0 = noResolvedType0.getSource();
      assertFalse(errorReporter1.equals((Object)errorReporter0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertNull(node0);
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isAnonymous());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isVoidable());
      assertNull(noResolvedType0.getGoogModuleId());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, immutableList0.size());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertNotSame(jSTypeRegistry2, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry1);
      
      TemplateType templateType2 = jSTypeRegistry0.createTemplateTypeWithTransformation("IOBJECT_VALUE", (Node) null);
      assertFalse(errorReporter0.equals((Object)errorReporter1));
      assertFalse(templateType2.equals((Object)templateType1));
      assertFalse(templateType2.equals((Object)templateType0));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(templateType2);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(templateType2.isLiteralObject());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertEquals(0, templateType2.getTemplateParamCount());
      assertEquals("IOBJECT_VALUE", templateType2.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertFalse(templateType2.isNominalConstructorOrInterface());
      assertFalse(templateType2.isCheckedUnknownType());
      assertTrue(templateType2.isObject());
      assertFalse(templateType2.isNamedType());
      assertTrue(templateType2.isResolved());
      assertFalse(templateType2.isFunctionType());
      assertFalse(templateType2.isRawTypeOfTemplatizedType());
      assertTrue(templateType2.isSuccessfullyResolved());
      assertFalse(templateType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType2.isUnsuccessfullyResolved());
      assertTrue(templateType2.isTemplateType());
      assertFalse(templateType2.isNoResolvedType());
      assertFalse(templateType2.isEnumElementType());
      assertFalse(templateType2.isTemplatizedType());
      assertFalse(templateType2.isInterface());
      assertFalse(templateType2.isVoidType());
      assertFalse(templateType2.isStructuralInterface());
      assertFalse(templateType2.isAllType());
      assertFalse(templateType2.isNativeObjectType());
      assertTrue(templateType2.hasAnyTemplateTypesInternal());
      assertFalse(templateType2.isOrdinaryFunction());
      assertFalse(templateType2.isSymbolValueType());
      assertFalse(templateType2.isNullType());
      assertFalse(templateType2.isTypeTransformation());
      assertFalse(templateType2.isUnionType());
      assertFalse(templateType2.isBigIntValueType());
      assertFalse(templateType2.isStringValueType());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isNoObjectType());
      assertFalse(templateType2.isNoType());
      assertFalse(templateType2.hasCachedValues());
      assertFalse(templateType2.isBooleanValueType());
      assertFalse(templateType2.isRecordType());
      assertFalse(templateType2.isConstructor());
      assertFalse(templateType2.isEnumType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertNotSame(templateType2, templateType1);
      assertNotSame(templateType2, templateType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry2);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, set0);
      assertNotNull(jSTypeRegistry0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.isNamedType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertNull(noResolvedType0.getGoogModuleId());
      
      jSTypeRegistry0.registerPropertyOnType("B", noResolvedType0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.isNamedType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(set0.contains("B"));
      
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("&2eE.");
      assertNotNull(templateType0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isTemplatizedType());
      assertEquals("&2eE.", templateType0.getReferenceName());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(set0.contains("B"));
      
      JSType jSType0 = jSTypeRegistry0.createNullableType(templateType0);
      assertNotNull(jSType0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isTemplatizedType());
      assertEquals("&2eE.", templateType0.getReferenceName());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isNumberValueType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isConstructor());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(set0.contains("B"));
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSType jSType1 = jSTypeRegistry0.createOptionalType(jSType0);
      assertFalse(jSType1.equals((Object)jSType0));
      assertNotNull(jSType1);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isTemplatizedType());
      assertEquals("&2eE.", templateType0.getReferenceName());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isNumberValueType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isConstructor());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType1.isTemplateType());
      assertFalse(jSType1.isSymbolValueType());
      assertFalse(jSType1.isNullType());
      assertFalse(jSType1.isAllType());
      assertFalse(jSType1.isNativeObjectType());
      assertFalse(jSType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType1.isFunctionType());
      assertFalse(jSType1.isTemplatizedType());
      assertFalse(jSType1.isInterface());
      assertFalse(jSType1.isEnumElementType());
      assertFalse(jSType1.isNominalConstructorOrInterface());
      assertFalse(jSType1.isLiteralObject());
      assertFalse(jSType1.isOrdinaryFunction());
      assertTrue(jSType1.isResolved());
      assertFalse(jSType1.isUnsuccessfullyResolved());
      assertFalse(jSType1.isNamedType());
      assertFalse(jSType1.isStructuralInterface());
      assertFalse(jSType1.isBigIntValueType());
      assertTrue(jSType1.isUnionType());
      assertFalse(jSType1.isNoResolvedType());
      assertFalse(jSType1.isNoObjectType());
      assertFalse(jSType1.isNoType());
      assertFalse(jSType1.isStringValueType());
      assertTrue(jSType1.isSuccessfullyResolved());
      assertFalse(jSType1.isRawTypeOfTemplatizedType());
      assertFalse(jSType1.isEnumType());
      assertFalse(jSType1.isFunctionPrototypeType());
      assertFalse(jSType1.isRecordType());
      assertFalse(jSType1.isVoidType());
      assertEquals(0, jSType1.getTemplateParamCount());
      assertFalse(jSType1.isCheckedUnknownType());
      assertFalse(jSType1.isBooleanValueType());
      assertFalse(jSType1.isNumberValueType());
      assertFalse(jSType1.isConstructor());
      assertFalse(set0.contains("B"));
      assertNotSame(jSType0, jSType1);
      assertNotSame(jSType1, jSType0);
      
      boolean boolean0 = jSTypeRegistry0.isForwardDeclaredType((String) null);
      assertFalse(boolean0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("B"));
      
      String string0 = "&2eE.";
      // Undeclared exception!
      try { 
        noResolvedType0.getOwnPropertyDefSite((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNullable());
      
      Node node0 = noResolvedType0.getPropertyDefSite("IOBJECT_VALUE");
      assertNull(node0);
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNullable());
      
      TemplateType templateType0 = jSTypeRegistry0.getAsyncIterableTemplate();
      assertNotNull(templateType0);
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isStructuralInterface());
      
      jSTypeRegistry0.registerNonLegacyClosureNamespace("AsyncIterable", (Node) null, noResolvedType0);
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNullable());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry0.buildRecordTypeFromObject(templateType0);
      assertNotNull(instanceObjectType0);
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertTrue(instanceObjectType0.isObject());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isConstructor());
      
      String string0 = instanceObjectType0.toString();
      assertNotNull(string0);
      assertEquals("Object", string0);
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertTrue(instanceObjectType0.isObject());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isConstructor());
      
      boolean boolean0 = jSTypeRegistry0.isForwardDeclaredType((String) null);
      assertFalse(boolean0);
      
      HashMap<TemplateType, TemplateType> hashMap0 = new HashMap<TemplateType, TemplateType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<TemplateType, JSType> hashMap1 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      JSType jSType0 = hashMap1.put(templateType0, instanceObjectType0);
      assertNull(jSType0);
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertTrue(instanceObjectType0.isObject());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      
      UnknownType unknownType0 = (UnknownType)noResolvedType0.getReturnType();
      assertNotNull(unknownType0);
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertFalse(unknownType0.isBigIntValueType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isLiteralObject());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.isResolved());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNamedType());
      assertFalse(unknownType0.isStructuralInterface());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unknownType0.isSymbolValueType());
      assertTrue(unknownType0.canBeCalled());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isTemplatizedType());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isRecordType());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      
      InstanceObjectType instanceObjectType1 = (InstanceObjectType)hashMap1.put(templateType0, unknownType0);
      assertNotNull(instanceObjectType1);
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertFalse(unknownType0.isBigIntValueType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isLiteralObject());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.isResolved());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNamedType());
      assertFalse(unknownType0.isStructuralInterface());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unknownType0.isSymbolValueType());
      assertTrue(unknownType0.canBeCalled());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isTemplatizedType());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isRecordType());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(instanceObjectType1.isTemplateType());
      assertFalse(instanceObjectType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType1.isOrdinaryFunction());
      assertFalse(instanceObjectType1.isFunctionType());
      assertTrue(instanceObjectType1.isResolved());
      assertFalse(instanceObjectType1.isSymbolValueType());
      assertFalse(instanceObjectType1.isAllType());
      assertFalse(instanceObjectType1.hasCachedValues());
      assertFalse(instanceObjectType1.isBooleanValueType());
      assertFalse(instanceObjectType1.isRecordType());
      assertFalse(instanceObjectType1.isStructuralInterface());
      assertFalse(instanceObjectType1.isInterface());
      assertFalse(instanceObjectType1.isEnumType());
      assertFalse(instanceObjectType1.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType1.isVoidType());
      assertTrue(instanceObjectType1.isNativeObjectType());
      assertFalse(instanceObjectType1.isStringValueType());
      assertFalse(instanceObjectType1.isNamedType());
      assertFalse(instanceObjectType1.isBigIntValueType());
      assertFalse(instanceObjectType1.isNoResolvedType());
      assertFalse(instanceObjectType1.isUnionType());
      assertTrue(instanceObjectType1.isSuccessfullyResolved());
      assertTrue(instanceObjectType1.isObject());
      assertFalse(instanceObjectType1.isCheckedUnknownType());
      assertFalse(instanceObjectType1.isUnsuccessfullyResolved());
      assertTrue(instanceObjectType1.matchesObjectContext());
      assertEquals(2, instanceObjectType1.getTemplateParamCount());
      assertFalse(instanceObjectType1.isNumberValueType());
      assertFalse(instanceObjectType1.isFunctionPrototypeType());
      assertFalse(instanceObjectType1.isEnumElementType());
      assertFalse(instanceObjectType1.isConstructor());
      assertFalse(instanceObjectType1.isAnonymous());
      assertFalse(instanceObjectType1.isTemplatizedType());
      assertFalse(instanceObjectType1.isLiteralObject());
      assertFalse(instanceObjectType1.isNullType());
      assertTrue(instanceObjectType1.isRawTypeOfTemplatizedType());
      assertTrue(instanceObjectType1.isInstanceType());
      assertFalse(instanceObjectType1.isNoType());
      assertFalse(instanceObjectType1.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType1.getPossibleToBooleanOutcomes());
      assertSame(instanceObjectType1, instanceObjectType0);
      
      boolean boolean1 = jSTypeRegistry0.isForwardDeclaredType("Object");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      TemplateType templateType1 = jSTypeRegistry0.getIteratorValueTemplate();
      assertFalse(templateType1.equals((Object)templateType0));
      assertNotNull(templateType1);
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isBooleanValueType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isAllType());
      assertEquals("VALUE", templateType1.getReferenceName());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isOrdinaryFunction());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isTypeTransformation());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isNamedType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.hasCachedValues());
      assertNotSame(templateType1, templateType0);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createObjectType((String) null, unknownType0);
      assertNotNull(prototypeObjectType0);
      assertFalse(prototypeObjectType0.isSymbolValueType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertEquals(0, prototypeObjectType0.getTemplateParamCount());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(prototypeObjectType0.isBigIntValueType());
      assertTrue(prototypeObjectType0.isSuccessfullyResolved());
      assertFalse(prototypeObjectType0.isNominalConstructorOrInterface());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isAnonymous());
      assertFalse(prototypeObjectType0.isTemplatizedType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertTrue(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isLiteralObject());
      assertFalse(prototypeObjectType0.isNamedType());
      assertFalse(prototypeObjectType0.isStructuralInterface());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isUnsuccessfullyResolved());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertFalse(unknownType0.isBigIntValueType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isLiteralObject());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.isResolved());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNamedType());
      assertFalse(unknownType0.isStructuralInterface());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unknownType0.isSymbolValueType());
      assertTrue(unknownType0.canBeCalled());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isTemplatizedType());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isRecordType());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) prototypeObjectType0;
      jSTypeArray0[1] = null;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      assertNotNull(templateType0);
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isSymbolValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isConstructor());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isOrdinaryFunction());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      assertNotNull(templatizedType0);
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isSymbolValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isConstructor());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isOrdinaryFunction());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isRecordType());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isFunctionType());
      assertFalse(templatizedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.hasCachedValues());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isConstructor());
      assertTrue(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isNoResolvedType());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isNoType());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      
      FunctionType functionType0 = templatizedType0.getSuperClassConstructor();
      assertNull(functionType0);
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isSymbolValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isConstructor());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isOrdinaryFunction());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isRecordType());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isFunctionType());
      assertFalse(templatizedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.hasCachedValues());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isConstructor());
      assertTrue(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isNoResolvedType());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isNoType());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createOptionalParameters((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      Node node0 = Node.newTemplateLitString("UNUSED_RETURN_T", "UNUSED_RETURN_T");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAnd());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isNull());
      assertEquals("UNUSED_RETURN_T", node0.getCookedString());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isRoot());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isRest());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isThrow());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isYield());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isInc());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isAwait());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isSub());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isObjectRest());
      assertTrue(node0.isTemplateLitString());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isDo());
      assertEquals(Token.TEMPLATELIT_STRING, node0.getToken());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isForIn());
      assertFalse(node0.isVar());
      assertFalse(node0.hasParent());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLet());
      assertFalse(node0.isExponent());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isForAwaitOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isString());
      assertEquals("UNUSED_RETURN_T", node0.getRawString());
      assertFalse(node0.isConst());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSpread());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isForOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isNeg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImport());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isClass());
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, (String) null);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression0);
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAnd());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isNull());
      assertEquals("UNUSED_RETURN_T", node0.getCookedString());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isRoot());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isRest());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isThrow());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isYield());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isInc());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isAwait());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isSub());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isObjectRest());
      assertTrue(node0.isTemplateLitString());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isDo());
      assertEquals(Token.TEMPLATELIT_STRING, node0.getToken());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isForIn());
      assertFalse(node0.isVar());
      assertFalse(node0.hasParent());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLet());
      assertFalse(node0.isExponent());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isForAwaitOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isString());
      assertEquals("UNUSED_RETURN_T", node0.getRawString());
      assertFalse(node0.isConst());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSpread());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isForOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isNeg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImport());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isClass());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      
      JSTypeExpression jSTypeExpression1 = JSTypeExpression.makeOptionalArg(jSTypeExpression0);
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression1);
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAnd());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isNull());
      assertEquals("UNUSED_RETURN_T", node0.getCookedString());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isRoot());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isRest());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isThrow());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isYield());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isInc());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isAwait());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isSub());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isObjectRest());
      assertTrue(node0.isTemplateLitString());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isDo());
      assertEquals(Token.TEMPLATELIT_STRING, node0.getToken());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isForIn());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLet());
      assertFalse(node0.isExponent());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertTrue(node0.hasParent());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isForAwaitOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isString());
      assertEquals("UNUSED_RETURN_T", node0.getRawString());
      assertFalse(node0.isConst());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSpread());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isForOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isNeg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImport());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isClass());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      ImmutableSet<String> immutableSet0 = jSTypeExpression0.getRecordPropertyNames();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(immutableSet0);
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAnd());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isNull());
      assertEquals("UNUSED_RETURN_T", node0.getCookedString());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isRoot());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isRest());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isThrow());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isYield());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isInc());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isAwait());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isSub());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isObjectRest());
      assertTrue(node0.isTemplateLitString());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isDo());
      assertEquals(Token.TEMPLATELIT_STRING, node0.getToken());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isForIn());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLet());
      assertFalse(node0.isExponent());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertTrue(node0.hasParent());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isForAwaitOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isString());
      assertEquals("UNUSED_RETURN_T", node0.getRawString());
      assertFalse(node0.isConst());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSpread());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isForOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isNeg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImport());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isClass());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      
      ImmutableSet<String> immutableSet1 = jSTypeExpression1.getRecordPropertyNames();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(immutableSet1);
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAnd());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isNull());
      assertEquals("UNUSED_RETURN_T", node0.getCookedString());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isRoot());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isRest());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isThrow());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isYield());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isInc());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isAwait());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isSub());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isObjectRest());
      assertTrue(node0.isTemplateLitString());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isDo());
      assertEquals(Token.TEMPLATELIT_STRING, node0.getToken());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isForIn());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLet());
      assertFalse(node0.isExponent());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertTrue(node0.hasParent());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isForAwaitOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isString());
      assertEquals("UNUSED_RETURN_T", node0.getRawString());
      assertFalse(node0.isConst());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSpread());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isForOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isNeg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImport());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isClass());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet1.size());
      assertFalse(immutableSet1.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertSame(immutableSet1, immutableSet0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, immutableSet1);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeRegistry0);
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAnd());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isNull());
      assertEquals("UNUSED_RETURN_T", node0.getCookedString());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isRoot());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isRest());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isThrow());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isYield());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isInc());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isAwait());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isSub());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isObjectRest());
      assertTrue(node0.isTemplateLitString());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isDo());
      assertEquals(Token.TEMPLATELIT_STRING, node0.getToken());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isForIn());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLet());
      assertFalse(node0.isExponent());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertTrue(node0.hasParent());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isForAwaitOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isString());
      assertEquals("UNUSED_RETURN_T", node0.getRawString());
      assertFalse(node0.isConst());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSpread());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isForOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isNeg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImport());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isClass());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet1.size());
      assertFalse(immutableSet1.contains("UNUSED_RETURN_T"));
      
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateType0);
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAnd());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isNull());
      assertEquals("UNUSED_RETURN_T", node0.getCookedString());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isRoot());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isRest());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isThrow());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isYield());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isInc());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isAwait());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isSub());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isObjectRest());
      assertTrue(node0.isTemplateLitString());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isDo());
      assertEquals(Token.TEMPLATELIT_STRING, node0.getToken());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isForIn());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLet());
      assertFalse(node0.isExponent());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertTrue(node0.hasParent());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isForAwaitOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isString());
      assertEquals("UNUSED_RETURN_T", node0.getRawString());
      assertFalse(node0.isConst());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSpread());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isForOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isNeg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImport());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isClass());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet1.size());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isAllType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(immutableSet1.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertSame(immutableSet1, immutableSet0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(recordType0);
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAnd());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isNull());
      assertEquals("UNUSED_RETURN_T", node0.getCookedString());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isRoot());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isRest());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isThrow());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isYield());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isInc());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isAwait());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isSub());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isObjectRest());
      assertTrue(node0.isTemplateLitString());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isDo());
      assertEquals(Token.TEMPLATELIT_STRING, node0.getToken());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isForIn());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLet());
      assertFalse(node0.isExponent());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertTrue(node0.hasParent());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isForAwaitOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isString());
      assertEquals("UNUSED_RETURN_T", node0.getRawString());
      assertFalse(node0.isConst());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSpread());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isForOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isNeg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImport());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isClass());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet1.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isRawTypeOfTemplatizedType());
      assertFalse(recordType0.isBigIntValueType());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isLiteralObject());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isAnonymous());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.matchesObjectContext());
      assertEquals(0, recordType0.getTemplateParamCount());
      assertFalse(recordType0.isUnsuccessfullyResolved());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.isSuccessfullyResolved());
      assertFalse(recordType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isSymbolValueType());
      assertTrue(recordType0.isStructuralType());
      assertFalse(recordType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isTemplatizedType());
      assertFalse(recordType0.isStructuralInterface());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isTemplateType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertTrue(recordType0.isResolved());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isNominalConstructorOrInterface());
      assertFalse(recordType0.isStringValueType());
      assertFalse(immutableSet1.contains("UNUSED_RETURN_T"));
      
      jSTypeRegistry0.registerDroppedPropertiesInUnion(recordType0, recordType0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAnd());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isNull());
      assertEquals("UNUSED_RETURN_T", node0.getCookedString());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isRoot());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isRest());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isThrow());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isYield());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isInc());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isAwait());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isSub());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isObjectRest());
      assertTrue(node0.isTemplateLitString());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isDo());
      assertEquals(Token.TEMPLATELIT_STRING, node0.getToken());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isForIn());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLet());
      assertFalse(node0.isExponent());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertTrue(node0.hasParent());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isForAwaitOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isString());
      assertEquals("UNUSED_RETURN_T", node0.getRawString());
      assertFalse(node0.isConst());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSpread());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isForOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isNeg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImport());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isClass());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet1.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isRawTypeOfTemplatizedType());
      assertFalse(recordType0.isBigIntValueType());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isLiteralObject());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isAnonymous());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.matchesObjectContext());
      assertEquals(0, recordType0.getTemplateParamCount());
      assertFalse(recordType0.isUnsuccessfullyResolved());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.isSuccessfullyResolved());
      assertFalse(recordType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isSymbolValueType());
      assertTrue(recordType0.isStructuralType());
      assertFalse(recordType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isTemplatizedType());
      assertFalse(recordType0.isStructuralInterface());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isTemplateType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertTrue(recordType0.isResolved());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isNominalConstructorOrInterface());
      assertFalse(recordType0.isStringValueType());
      assertFalse(immutableSet1.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertSame(immutableSet1, immutableSet0);
      
      HashMap<TemplateType, JSType> hashMap1 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) recordType0, (Map<TemplateType, JSType>) hashMap1);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templatizedType0);
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAnd());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isNull());
      assertEquals("UNUSED_RETURN_T", node0.getCookedString());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isRoot());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isRest());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isThrow());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isYield());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isInc());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isAwait());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isSub());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isObjectRest());
      assertTrue(node0.isTemplateLitString());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isDo());
      assertEquals(Token.TEMPLATELIT_STRING, node0.getToken());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isForIn());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLet());
      assertFalse(node0.isExponent());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertTrue(node0.hasParent());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isForAwaitOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isString());
      assertEquals("UNUSED_RETURN_T", node0.getRawString());
      assertFalse(node0.isConst());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSpread());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isForOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isNeg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImport());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isClass());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet1.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isRawTypeOfTemplatizedType());
      assertFalse(recordType0.isBigIntValueType());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isLiteralObject());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isAnonymous());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.matchesObjectContext());
      assertEquals(0, recordType0.getTemplateParamCount());
      assertFalse(recordType0.isUnsuccessfullyResolved());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.isSuccessfullyResolved());
      assertFalse(recordType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isSymbolValueType());
      assertTrue(recordType0.isStructuralType());
      assertFalse(recordType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isTemplatizedType());
      assertFalse(recordType0.isStructuralInterface());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isTemplateType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertTrue(recordType0.isResolved());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isNominalConstructorOrInterface());
      assertFalse(recordType0.isStringValueType());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertFalse(templatizedType0.isNoObjectType());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isNoType());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.hasCachedValues());
      assertTrue(templatizedType0.isRecordType());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isNullType());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isNoResolvedType());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isFunctionType());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(immutableSet1.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertSame(immutableSet1, immutableSet0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      assertNotNull(templateType0);
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNoObjectType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      assertNotNull(templatizedType0);
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNoObjectType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.isInterface());
      assertTrue(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isFunctionType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertTrue(templatizedType0.isObject());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isNoType());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isRecordType());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isNativeObjectType());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(noResolvedType0.isSymbolValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isVoidable());
      assertNull(noResolvedType0.getGoogModuleId());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNamedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isTemplateType());
      
      FunctionType functionType0 = templatizedType0.getSuperClassConstructor();
      assertNull(functionType0);
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNoObjectType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.isInterface());
      assertTrue(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isFunctionType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertTrue(templatizedType0.isObject());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isNoType());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isRecordType());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isNativeObjectType());
      
      ImmutableList<JSType> immutableList0 = noResolvedType0.getTemplateTypes();
      assertNull(immutableList0);
      assertFalse(noResolvedType0.isSymbolValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isVoidable());
      assertNull(noResolvedType0.getGoogModuleId());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNamedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isTemplateType());
      
      String string0 = "AsyncGenerator";
      ImmutableList<TemplateType> immutableList1 = jSTypeRegistry0.maybeGetTemplateTypesOfBuiltin("AsyncGenerator");
      assertNotNull(immutableList1);
      assertEquals(3, immutableList1.size());
      assertFalse(immutableList1.contains(templateType0));
      
      ImmutableList<TemplateType> immutableList2 = jSTypeRegistry0.maybeGetTemplateTypesOfBuiltin("iwCj~LTE8CE");
      assertNull(immutableList2);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string0));
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, set0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string0));
      
      // Undeclared exception!
      try { 
        jSTypeRegistry1.createOptionalType((JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      Node node0 = Node.newString("UNUSED_RETURN_T");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isAwait());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.hasParent());
      assertFalse(node0.isCast());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isLet());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isForIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isEQ());
      assertFalse(node0.isExponent());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExport());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSuper());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isYield());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isNot());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isConst());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isForOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isIn());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isMemberVariableDef());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isNeg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImport());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isStringLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClass());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isSpread());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      
      node0.makeNonIndexableRecursive();
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isAwait());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.hasParent());
      assertFalse(node0.isCast());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isLet());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isForIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isEQ());
      assertFalse(node0.isExponent());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExport());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSuper());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isYield());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isNot());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isConst());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isForOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isIn());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isMemberVariableDef());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isNeg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImport());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isStringLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClass());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isSpread());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, (String) null);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression0);
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isAwait());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.hasParent());
      assertFalse(node0.isCast());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isLet());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isForIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isEQ());
      assertFalse(node0.isExponent());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExport());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSuper());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isYield());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isNot());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isConst());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isForOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isIn());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isMemberVariableDef());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isNeg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImport());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isStringLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClass());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isSpread());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      
      JSTypeExpression jSTypeExpression1 = JSTypeExpression.makeOptionalArg(jSTypeExpression0);
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression1);
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isAwait());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isLet());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isForIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isEQ());
      assertFalse(node0.isExponent());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExport());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSuper());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isYield());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isNot());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isConst());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isForOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isIn());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isMemberVariableDef());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isNeg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFunction());
      assertTrue(node0.hasParent());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImport());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isStringLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClass());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isSpread());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      ImmutableSet<String> immutableSet0 = jSTypeExpression1.getRecordPropertyNames();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(immutableSet0);
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isAwait());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isLet());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isForIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isEQ());
      assertFalse(node0.isExponent());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExport());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSuper());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isYield());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isNot());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isConst());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isForOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isIn());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isMemberVariableDef());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isNeg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFunction());
      assertTrue(node0.hasParent());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImport());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isStringLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClass());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isSpread());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, immutableSet0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeRegistry0);
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isAwait());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isLet());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isForIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isEQ());
      assertFalse(node0.isExponent());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExport());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSuper());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isYield());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isNot());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isConst());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isForOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isIn());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isMemberVariableDef());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isNeg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFunction());
      assertTrue(node0.hasParent());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImport());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isStringLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClass());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isSpread());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      TemplateTypeReplacer templateTypeReplacer0 = TemplateTypeReplacer.forInference(jSTypeRegistry0, hashMap0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateTypeReplacer0);
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isAwait());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isLet());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isForIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isEQ());
      assertFalse(node0.isExponent());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExport());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSuper());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isYield());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isNot());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isConst());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isForOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isIn());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isMemberVariableDef());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isNeg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFunction());
      assertTrue(node0.hasParent());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImport());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isStringLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClass());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isSpread());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      JSType jSType0 = templateTypeReplacer0.caseNumberType();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSType0);
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isAwait());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isLet());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isForIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isEQ());
      assertFalse(node0.isExponent());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExport());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSuper());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isYield());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isNot());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isConst());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isForOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isIn());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isMemberVariableDef());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isNeg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFunction());
      assertTrue(node0.hasParent());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImport());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isStringLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClass());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isSpread());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isBigIntValueType());
      assertTrue(jSType0.isNumberValueType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isStructuralInterface());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isInterface());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isAllType());
      assertEquals("number", jSType0.getDisplayName());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isLiteralObject());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      jSTypeRegistry0.registerPropertyOnType((String) null, jSType0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isAwait());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isLet());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isForIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isEQ());
      assertFalse(node0.isExponent());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExport());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSuper());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isYield());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isNot());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isConst());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isForOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isIn());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isMemberVariableDef());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isNeg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFunction());
      assertTrue(node0.hasParent());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImport());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isStringLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClass());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isSpread());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isBigIntValueType());
      assertTrue(jSType0.isNumberValueType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isStructuralInterface());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isInterface());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isAllType());
      assertEquals("number", jSType0.getDisplayName());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isLiteralObject());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      boolean boolean0 = jSTypeRegistry0.isNonNullableName((StaticScope) null, "?\"[!|L2gU9Hx=R");
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(boolean0);
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isAwait());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isLet());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isForIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isEQ());
      assertFalse(node0.isExponent());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExport());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSuper());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isYield());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isNot());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isConst());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isForOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isIn());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isMemberVariableDef());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isNeg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFunction());
      assertTrue(node0.hasParent());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImport());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isStringLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClass());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isSpread());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("?\"[!|L2gU9Hx=R"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      JSType[] jSTypeArray0 = new JSType[7];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = jSType0;
      jSTypeArray0[6] = jSType0;
      ImmutableList<FunctionType.Parameter> immutableList0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(immutableList0);
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isAwait());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isLet());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isForIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isEQ());
      assertFalse(node0.isExponent());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExport());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSuper());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isYield());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isNot());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isConst());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isForOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isIn());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isMemberVariableDef());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isNeg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFunction());
      assertTrue(node0.hasParent());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImport());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isStringLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClass());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isSpread());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertEquals(7, immutableList0.size());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("?\"[!|L2gU9Hx=R"));
      assertEquals(7, jSTypeArray0.length);
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, treeSet0);
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      assertNotNull(templateType0);
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isBooleanValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isBigIntValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(treeSet0.contains(""));
      
      TypeStringBuilder typeStringBuilder0 = new TypeStringBuilder(false);
      assertNotNull(typeStringBuilder0);
      
      templateType0.appendTo(typeStringBuilder0);
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isBooleanValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isBigIntValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(treeSet0.contains(""));
      
      TemplateType templateType1 = (TemplateType)jSTypeRegistry0.findCommonSuperObject(templateType0, templateType0);
      assertNotNull(templateType1);
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isBooleanValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isBigIntValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNoType());
      assertTrue(templateType1.isObject());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isEnumType());
      assertEquals("", templateType1.getReferenceName());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isResolved());
      assertTrue(templateType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isNamedType());
      assertFalse(treeSet0.contains(""));
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      
      ErrorReporter errorReporter1 = ErrorReporter.NULL_INSTANCE;
      assertFalse(errorReporter1.equals((Object)errorReporter0));
      assertNotNull(errorReporter1);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter1, set0);
      assertFalse(errorReporter1.equals((Object)errorReporter0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(""));
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.maybeGetTemplateTypesOfBuiltin((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, set0);
      assertNotNull(jSTypeRegistry0);
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNamedType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isStructuralInterface());
      
      Node node0 = noResolvedType0.getOwnPropertyDefSite("B");
      assertNull(node0);
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNamedType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(set0.contains("B"));
      
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      assertNotNull(templateType0);
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isTypeTransformation());
      assertTrue(templateType0.isObject());
      assertFalse(set0.contains("B"));
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      NoType noType0 = (NoType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(noType0);
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.isSuccessfullyResolved());
      assertFalse(noType0.isNamedType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNominalConstructorOrInterface());
      assertTrue(noType0.isNativeObjectType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.isVoidable());
      assertTrue(noType0.matchesSymbolContext());
      assertFalse(noType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noType0.isStructuralInterface());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isLiteralObject());
      assertFalse(noType0.isTemplatizedType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.matchesObjectContext());
      assertNull(noType0.getGoogModuleId());
      assertTrue(noType0.isObject());
      assertFalse(noType0.hasInstanceType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isAbstract());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isRecordType());
      assertEquals(0, noType0.getTemplateParamCount());
      assertFalse(noType0.isBigIntValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.isResolved());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isSymbolValueType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isUnsuccessfullyResolved());
      assertNull(noType0.getClosurePrimitive());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isRawTypeOfTemplatizedType());
      assertFalse(noType0.isConstructor());
      assertFalse(noType0.isAnonymous());
      assertFalse(set0.contains("B"));
      assertEquals(0, jSTypeNativeArray0.length);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.javascript.rhino.jstype.NumberType cannot be cast to com.google.javascript.rhino.jstype.ObjectType
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      assertNotNull(templateType0);
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isLiteralObject());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isTypeTransformation());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isSymbolValueType());
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      assertNotNull(templatizedType0);
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isLiteralObject());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isTypeTransformation());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isSymbolValueType());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.isFunctionType());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isRecordType());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isNoType());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isLiteralObject());
      assertTrue(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, treeSet0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      HashMap<TemplateType, JSType> hashMap1 = new HashMap<TemplateType, JSType>();
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(errorReporter0);
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertNotNull(jSTypeRegistry2);
      
      TypeStringBuilder typeStringBuilder0 = new TypeStringBuilder(false);
      assertNotNull(typeStringBuilder0);
      
      TemplateType templateType1 = jSTypeRegistry1.getAsyncIterableTemplate();
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(templateType1.equals((Object)templateType0));
      assertNotNull(templateType1);
      assertFalse(templateType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isFunctionType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isRecordType());
      assertEquals("VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isNullType());
      assertTrue(templateType1.isObject());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isNoResolvedType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isStringValueType());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry2);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(templateType1, templateType0);
      
      templateType1.appendTo(typeStringBuilder0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(templateType1.equals((Object)templateType0));
      assertFalse(templateType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isFunctionType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isRecordType());
      assertEquals("VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isNullType());
      assertTrue(templateType1.isObject());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isNoResolvedType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isStringValueType());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry2);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(templateType1, templateType0);
      
      ObjectType objectType0 = jSTypeRegistry2.findCommonSuperObject(templatizedType0, templatizedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertFalse(templateType0.equals((Object)templateType1));
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertNotNull(objectType0);
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isLiteralObject());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isTypeTransformation());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isSymbolValueType());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.isFunctionType());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isRecordType());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isNoType());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isLiteralObject());
      assertTrue(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isLiteralObject());
      assertFalse(objectType0.isNominalConstructorOrInterface());
      assertFalse(objectType0.isUnsuccessfullyResolved());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isNamedType());
      assertTrue(objectType0.isSuccessfullyResolved());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isNoResolvedType());
      assertTrue(objectType0.isObject());
      assertTrue(objectType0.isTemplateType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(objectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isRawTypeOfTemplatizedType());
      assertTrue(objectType0.isTemplatizedType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isSymbolValueType());
      assertFalse(objectType0.isNativeObjectType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isStructuralInterface());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isBigIntValueType());
      assertTrue(objectType0.isResolved());
      assertFalse(objectType0.isStringValueType());
      assertEquals(0, objectType0.getTemplateParamCount());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isNoObjectType());
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry2);
      assertNotSame(templateType0, templateType1);
      assertNotSame(hashMap0, hashMap1);
      assertSame(templatizedType0, objectType0);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry1);
      assertSame(objectType0, templatizedType0);
      
      JSTypeRegistry jSTypeRegistry3 = new JSTypeRegistry(errorReporter0, treeSet0);
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry1));
      assertNotNull(jSTypeRegistry3);
      
      Node node0 = Node.newString("IOBJECT_VALUE");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isSub());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isCall());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isForOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSwitch());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isRecordType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isVar());
      assertFalse(node0.hasParent());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSpread());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isConst());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isInc());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isVoid());
      assertTrue(node0.isString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isImport());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isForIn());
      assertFalse(node0.isEQ());
      assertFalse(node0.isClass());
      assertFalse(node0.isAwait());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isBreak());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isRest());
      assertFalse(node0.isYield());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isScript());
      assertEquals("IOBJECT_VALUE", node0.getString());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCase());
      assertFalse(node0.isSuper());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isIn());
      assertFalse(node0.isIf());
      assertFalse(node0.isExponent());
      assertFalse(node0.isExport());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      
      TemplateType templateType2 = jSTypeRegistry0.createTemplateTypeWithTransformation("IOBJECT_VALUE", node0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry3));
      assertFalse(templateType2.equals((Object)templateType1));
      assertFalse(templateType2.equals((Object)templateType0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateType2);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isSub());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isCall());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isForOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSwitch());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isRecordType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isVar());
      assertFalse(node0.hasParent());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSpread());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isConst());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isInc());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isVoid());
      assertTrue(node0.isString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isImport());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isForIn());
      assertFalse(node0.isEQ());
      assertFalse(node0.isClass());
      assertFalse(node0.isAwait());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isBreak());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isRest());
      assertFalse(node0.isYield());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isScript());
      assertEquals("IOBJECT_VALUE", node0.getString());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCase());
      assertFalse(node0.isSuper());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isIn());
      assertFalse(node0.isIf());
      assertFalse(node0.isExponent());
      assertFalse(node0.isExport());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(templateType2.isNativeObjectType());
      assertFalse(templateType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType2.isTemplateType());
      assertFalse(templateType2.isAllType());
      assertFalse(templateType2.isSymbolValueType());
      assertFalse(templateType2.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertFalse(templateType2.isNullType());
      assertFalse(templateType2.hasCachedValues());
      assertEquals(0, templateType2.getTemplateParamCount());
      assertFalse(templateType2.isVoidType());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isRecordType());
      assertFalse(templateType2.isBooleanValueType());
      assertFalse(templateType2.isEnumType());
      assertTrue(templateType2.isTypeTransformation());
      assertFalse(templateType2.isConstructor());
      assertFalse(templateType2.isUnionType());
      assertEquals("IOBJECT_VALUE", templateType2.getReferenceName());
      assertFalse(templateType2.isRawTypeOfTemplatizedType());
      assertFalse(templateType2.isNoObjectType());
      assertFalse(templateType2.isNoType());
      assertFalse(templateType2.isLiteralObject());
      assertFalse(templateType2.isBigIntValueType());
      assertTrue(templateType2.isObject());
      assertFalse(templateType2.isNominalConstructorOrInterface());
      assertFalse(templateType2.isStringValueType());
      assertFalse(templateType2.isCheckedUnknownType());
      assertTrue(templateType2.hasAnyTemplateTypesInternal());
      assertFalse(templateType2.isOrdinaryFunction());
      assertTrue(templateType2.isResolved());
      assertTrue(templateType2.isSuccessfullyResolved());
      assertFalse(templateType2.isFunctionType());
      assertFalse(templateType2.isNamedType());
      assertFalse(templateType2.isEnumElementType());
      assertFalse(templateType2.isStructuralInterface());
      assertFalse(templateType2.isTemplatizedType());
      assertFalse(templateType2.isNoResolvedType());
      assertFalse(templateType2.isUnsuccessfullyResolved());
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry2);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry3);
      assertNotSame(templateType2, templateType1);
      assertNotSame(templateType2, templateType0);
      
      ImmutableList<TemplateType> immutableList0 = jSTypeRegistry3.maybeGetTemplateTypesOfBuiltin("\b{zHtD~Z-U,{MQ");
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry1));
      assertNull(immutableList0);
      assertFalse(treeSet0.contains("IOBJECT_VALUE"));
      assertNotSame(jSTypeRegistry3, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry3, jSTypeRegistry2);
      assertNotSame(jSTypeRegistry3, jSTypeRegistry1);
      
      JSType jSType0 = jSTypeRegistry0.createNullableType(templateType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry3));
      assertFalse(templateType0.equals((Object)templateType2));
      assertFalse(templateType0.equals((Object)templateType1));
      assertNotNull(jSType0);
      assertFalse(jSType0.isStructuralInterface());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isConstructor());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.isInterface());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isLiteralObject());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isTypeTransformation());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isSymbolValueType());
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry2);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry3);
      assertNotSame(templateType0, templateType2);
      assertNotSame(templateType0, templateType1);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry3.getNativeFunctionType(jSTypeNative0);
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry3.equals((Object)jSTypeRegistry1));
      assertNotNull(functionType0);
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplatizedType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNoResolvedType());
      assertTrue(functionType0.matchesObjectContext());
      assertTrue(functionType0.isObject());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isSuccessfullyResolved());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isRawTypeOfTemplatizedType());
      assertFalse(functionType0.isSymbolValueType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isNominalConstructorOrInterface());
      assertFalse(functionType0.isAnonymous());
      assertFalse(functionType0.isRecordType());
      assertNull(functionType0.getClosurePrimitive());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isUnsuccessfullyResolved());
      assertFalse(functionType0.isLiteralObject());
      assertTrue(functionType0.canBeCalled());
      assertEquals(1, functionType0.getTemplateParamCount());
      assertFalse(functionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertNull(functionType0.getGoogModuleId());
      assertFalse(functionType0.isBigIntValueType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isNativeObjectType());
      assertFalse(functionType0.isNamedType());
      assertFalse(functionType0.isStructuralInterface());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isAbstract());
      assertFalse(treeSet0.contains("IOBJECT_VALUE"));
      assertNotSame(jSTypeRegistry3, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry3, jSTypeRegistry2);
      assertNotSame(jSTypeRegistry3, jSTypeRegistry1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertNotNull(jSTypeRegistry0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("IOBJECT_VALUE");
      assertNotNull(templateType0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isRecordType());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      Token token0 = Token.TYPEOF;
      Token token1 = Token.OBJECT_PATTERN;
      Node node0 = new Node(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isSub());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isForOf());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLet());
      assertFalse(node0.isOptChainCall());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isVar());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isComma());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSuper());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertTrue(node0.isObjectPattern());
      assertFalse(node0.isCase());
      assertFalse(node0.isAwait());
      assertFalse(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isRest());
      assertFalse(node0.isIn());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isNeg());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isNull());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isForIn());
      assertFalse(node0.isName());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNormalBlock());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isImport());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClass());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSHNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEQ());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNullishCoalesce());
      assertEquals(Token.OBJECT_PATTERN, node0.getToken());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isThis());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isThrow());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasParent());
      assertFalse(node0.isSpread());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExportSpecs());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isConst());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isDestructuringPattern());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isDestructuringLhs());
      
      Node node1 = new Node(token0, node0);
      assertFalse(token0.equals((Object)token1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node1);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertTrue(node0.hasParent());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isSub());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isForOf());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLet());
      assertFalse(node0.isOptChainCall());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isVar());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isComma());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSuper());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertTrue(node0.isObjectPattern());
      assertFalse(node0.isCase());
      assertFalse(node0.isAwait());
      assertFalse(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isRest());
      assertFalse(node0.isIn());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isNeg());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isNull());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isForIn());
      assertFalse(node0.isName());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNormalBlock());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isImport());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClass());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSHNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEQ());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNullishCoalesce());
      assertEquals(Token.OBJECT_PATTERN, node0.getToken());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isThis());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isThrow());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSpread());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExportSpecs());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isConst());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isDestructuringPattern());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node1.isMemberFunctionDef());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignExponent());
      assertFalse(node1.isNormalBlock());
      assertFalse(node1.isDo());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isArrayPattern());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDefaultValue());
      assertFalse(node1.isEQ());
      assertFalse(node1.isAssignAnd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isImport());
      assertFalse(node1.isClass());
      assertFalse(node1.isNeg());
      assertFalse(node1.isMemberVariableDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDestructuringLhs());
      assertFalse(node1.isScript());
      assertFalse(node1.isTaggedTemplateLit());
      assertFalse(node1.isComputedProp());
      assertFalse(node1.isExportSpec());
      assertFalse(node1.isAssignNullishCoalesce());
      assertTrue(node1.hasZeroOrOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isRest());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isTry());
      assertFalse(node1.isWith());
      assertFalse(node1.isIndexSignature());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isClassMembers());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.isTypeOf());
      assertFalse(node1.isTemplateLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExportSpecs());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isImportSpecs());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDestructuringPattern());
      assertFalse(node1.isOptChainGetProp());
      assertFalse(node1.isForIn());
      assertFalse(node1.isSHNE());
      assertFalse(node1.isFalse());
      assertFalse(node1.hasTwoChildren());
      assertFalse(node1.isModuleBody());
      assertFalse(node1.isObjectRest());
      assertFalse(node1.isAwait());
      assertFalse(node1.isTemplateLitString());
      assertFalse(node1.isRoot());
      assertEquals(Token.TYPEOF, node1.getToken());
      assertFalse(node1.isNullishCoalesce());
      assertFalse(node1.isNull());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isYield());
      assertFalse(node1.isTrue());
      assertNull(node1.getOriginalName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSuper());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isComputedFieldDef());
      assertFalse(node1.isLet());
      assertFalse(node1.isExport());
      assertFalse(node1.isVar());
      assertFalse(node1.isExponent());
      assertFalse(node1.isOptChainCall());
      assertFalse(node1.isForAwaitOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasParent());
      assertFalse(node1.isSHEQ());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isMemberFieldDef());
      assertFalse(node1.isImportStar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBitNot());
      assertFalse(node1.isStringLit());
      assertFalse(node1.isTemplateLitSub());
      assertFalse(node1.isObjectPattern());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSub());
      assertFalse(node1.isImportMeta());
      assertFalse(node1.isThis());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCallSignature());
      assertFalse(node1.isNE());
      assertFalse(node1.isImportSpec());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isConst());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOptChainGetElem());
      assertFalse(node1.isVanillaFor());
      assertFalse(node1.isForOf());
      assertFalse(node1.isInterfaceMembers());
      assertFalse(node1.isRecordType());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAssignOr());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isSpread());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isBigInt());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isDec());
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createTypeFromCommentNode(node1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.javascript.rhino.Node cannot be cast to com.google.javascript.rhino.Node$StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      Node node0 = Node.newString("UNUSED_RETURN_T");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSub());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isForOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSuper());
      assertFalse(node0.hasParent());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isBreak());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isRest());
      assertFalse(node0.isYield());
      assertFalse(node0.isExport());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertFalse(node0.isRoot());
      assertFalse(node0.isComma());
      assertFalse(node0.isAwait());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTry());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isBigInt());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAnd());
      assertTrue(node0.isString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNeg());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isImport());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isClass());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSpread());
      assertFalse(node0.isExportSpec());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, (String) null);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression0);
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSub());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isForOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSuper());
      assertFalse(node0.hasParent());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isBreak());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isRest());
      assertFalse(node0.isYield());
      assertFalse(node0.isExport());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertFalse(node0.isRoot());
      assertFalse(node0.isComma());
      assertFalse(node0.isAwait());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTry());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isBigInt());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAnd());
      assertTrue(node0.isString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNeg());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isImport());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isClass());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSpread());
      assertFalse(node0.isExportSpec());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      
      JSTypeExpression jSTypeExpression1 = JSTypeExpression.makeOptionalArg(jSTypeExpression0);
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression1);
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSub());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDestructuringPattern());
      assertTrue(node0.hasParent());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isForOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSuper());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isBreak());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isRest());
      assertFalse(node0.isYield());
      assertFalse(node0.isExport());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertFalse(node0.isRoot());
      assertFalse(node0.isComma());
      assertFalse(node0.isAwait());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTry());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isBigInt());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAnd());
      assertTrue(node0.isString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNeg());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isImport());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isClass());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSpread());
      assertFalse(node0.isExportSpec());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      ImmutableSet<String> immutableSet0 = jSTypeExpression1.getRecordPropertyNames();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(immutableSet0);
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSub());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDestructuringPattern());
      assertTrue(node0.hasParent());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isForOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSuper());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isBreak());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isRest());
      assertFalse(node0.isYield());
      assertFalse(node0.isExport());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertFalse(node0.isRoot());
      assertFalse(node0.isComma());
      assertFalse(node0.isAwait());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTry());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isBigInt());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAnd());
      assertTrue(node0.isString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNeg());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isImport());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isClass());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSpread());
      assertFalse(node0.isExportSpec());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, immutableSet0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeRegistry0);
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSub());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDestructuringPattern());
      assertTrue(node0.hasParent());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isForOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSuper());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isBreak());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isRest());
      assertFalse(node0.isYield());
      assertFalse(node0.isExport());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertFalse(node0.isRoot());
      assertFalse(node0.isComma());
      assertFalse(node0.isAwait());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTry());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isBigInt());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAnd());
      assertTrue(node0.isString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNeg());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isImport());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isClass());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSpread());
      assertFalse(node0.isExportSpec());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateType0);
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSub());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDestructuringPattern());
      assertTrue(node0.hasParent());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isForOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSuper());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isBreak());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isRest());
      assertFalse(node0.isYield());
      assertFalse(node0.isExport());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertFalse(node0.isRoot());
      assertFalse(node0.isComma());
      assertFalse(node0.isAwait());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTry());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isBigInt());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAnd());
      assertTrue(node0.isString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNeg());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isImport());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isClass());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSpread());
      assertFalse(node0.isExportSpec());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isTemplatizedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isSymbolValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isEnumType());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(recordType0);
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSub());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDestructuringPattern());
      assertTrue(node0.hasParent());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isForOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSuper());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isBreak());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isRest());
      assertFalse(node0.isYield());
      assertFalse(node0.isExport());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertFalse(node0.isRoot());
      assertFalse(node0.isComma());
      assertFalse(node0.isAwait());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTry());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isBigInt());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAnd());
      assertTrue(node0.isString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNeg());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isImport());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isClass());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSpread());
      assertFalse(node0.isExportSpec());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isTemplatizedType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isVoidType());
      assertTrue(recordType0.isSuccessfullyResolved());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isStringValueType());
      assertTrue(recordType0.isResolved());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isUnsuccessfullyResolved());
      assertTrue(recordType0.isStructuralType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isStructuralInterface());
      assertFalse(recordType0.isAnonymous());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isLiteralObject());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isNominalConstructorOrInterface());
      assertTrue(recordType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isRawTypeOfTemplatizedType());
      assertFalse(recordType0.isBigIntValueType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertEquals(0, recordType0.getTemplateParamCount());
      assertFalse(recordType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isSymbolValueType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isConstructor());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      
      jSTypeRegistry0.registerDroppedPropertiesInUnion(recordType0, recordType0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSub());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDestructuringPattern());
      assertTrue(node0.hasParent());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isForOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSuper());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isBreak());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isRest());
      assertFalse(node0.isYield());
      assertFalse(node0.isExport());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertFalse(node0.isRoot());
      assertFalse(node0.isComma());
      assertFalse(node0.isAwait());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTry());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isBigInt());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAnd());
      assertTrue(node0.isString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNeg());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isImport());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isClass());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSpread());
      assertFalse(node0.isExportSpec());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isTemplatizedType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isVoidType());
      assertTrue(recordType0.isSuccessfullyResolved());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isStringValueType());
      assertTrue(recordType0.isResolved());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isUnsuccessfullyResolved());
      assertTrue(recordType0.isStructuralType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isStructuralInterface());
      assertFalse(recordType0.isAnonymous());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isLiteralObject());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isNominalConstructorOrInterface());
      assertTrue(recordType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isRawTypeOfTemplatizedType());
      assertFalse(recordType0.isBigIntValueType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertEquals(0, recordType0.getTemplateParamCount());
      assertFalse(recordType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isSymbolValueType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isConstructor());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      TemplateType templateType1 = new TemplateType(jSTypeRegistry0, "Duplicate module paths after resolving: %s", recordType0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(templateType1.equals((Object)templateType0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateType1);
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSub());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDestructuringPattern());
      assertTrue(node0.hasParent());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isForOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSuper());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isBreak());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isRest());
      assertFalse(node0.isYield());
      assertFalse(node0.isExport());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertFalse(node0.isRoot());
      assertFalse(node0.isComma());
      assertFalse(node0.isAwait());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTry());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isBigInt());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAnd());
      assertTrue(node0.isString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNeg());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isImport());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isClass());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSpread());
      assertFalse(node0.isExportSpec());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isTemplatizedType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isVoidType());
      assertTrue(recordType0.isSuccessfullyResolved());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isStringValueType());
      assertTrue(recordType0.isResolved());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isUnsuccessfullyResolved());
      assertTrue(recordType0.isStructuralType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isStructuralInterface());
      assertFalse(recordType0.isAnonymous());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isLiteralObject());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isNominalConstructorOrInterface());
      assertTrue(recordType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isRawTypeOfTemplatizedType());
      assertFalse(recordType0.isBigIntValueType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertEquals(0, recordType0.getTemplateParamCount());
      assertFalse(recordType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isSymbolValueType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isConstructor());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isSymbolValueType());
      assertTrue(templateType1.isResolved());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isBooleanValueType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isEnumType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isOrdinaryFunction());
      assertTrue(templateType1.isRecordType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isAllType());
      assertEquals("Duplicate module paths after resolving: %s", templateType1.getReferenceName());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isNoObjectType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      
      FunctionType.Parameter functionType_Parameter0 = FunctionType.Parameter.create(templateType1, false, false);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(templateType1.equals((Object)templateType0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(functionType_Parameter0);
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSub());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDestructuringPattern());
      assertTrue(node0.hasParent());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isForOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSuper());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isBreak());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isRest());
      assertFalse(node0.isYield());
      assertFalse(node0.isExport());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertFalse(node0.isRoot());
      assertFalse(node0.isComma());
      assertFalse(node0.isAwait());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTry());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isBigInt());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAnd());
      assertTrue(node0.isString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNeg());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isImport());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isClass());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSpread());
      assertFalse(node0.isExportSpec());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isTemplatizedType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isVoidType());
      assertTrue(recordType0.isSuccessfullyResolved());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isStringValueType());
      assertTrue(recordType0.isResolved());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isUnsuccessfullyResolved());
      assertTrue(recordType0.isStructuralType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isStructuralInterface());
      assertFalse(recordType0.isAnonymous());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isLiteralObject());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isNominalConstructorOrInterface());
      assertTrue(recordType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isRawTypeOfTemplatizedType());
      assertFalse(recordType0.isBigIntValueType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertEquals(0, recordType0.getTemplateParamCount());
      assertFalse(recordType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isSymbolValueType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isConstructor());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isSymbolValueType());
      assertTrue(templateType1.isResolved());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isBooleanValueType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isEnumType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isOrdinaryFunction());
      assertTrue(templateType1.isRecordType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isAllType());
      assertEquals("Duplicate module paths after resolving: %s", templateType1.getReferenceName());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isNoObjectType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType_Parameter0.isOptional());
      assertFalse(functionType_Parameter0.isVariadic());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertNotSame(templateType1, templateType0);
      
      ImmutableList<FunctionType.Parameter> immutableList0 = ImmutableList.of(functionType_Parameter0, functionType_Parameter0, functionType_Parameter0, functionType_Parameter0, functionType_Parameter0, functionType_Parameter0, functionType_Parameter0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(templateType1.equals((Object)templateType0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(immutableList0);
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSub());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDestructuringPattern());
      assertTrue(node0.hasParent());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isForOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSuper());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isBreak());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isRest());
      assertFalse(node0.isYield());
      assertFalse(node0.isExport());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertFalse(node0.isRoot());
      assertFalse(node0.isComma());
      assertFalse(node0.isAwait());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTry());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isBigInt());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAnd());
      assertTrue(node0.isString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNeg());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isImport());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isClass());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSpread());
      assertFalse(node0.isExportSpec());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isTemplatizedType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isVoidType());
      assertTrue(recordType0.isSuccessfullyResolved());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isStringValueType());
      assertTrue(recordType0.isResolved());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isUnsuccessfullyResolved());
      assertTrue(recordType0.isStructuralType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isStructuralInterface());
      assertFalse(recordType0.isAnonymous());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isLiteralObject());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isNominalConstructorOrInterface());
      assertTrue(recordType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isRawTypeOfTemplatizedType());
      assertFalse(recordType0.isBigIntValueType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertEquals(0, recordType0.getTemplateParamCount());
      assertFalse(recordType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isSymbolValueType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isConstructor());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isSymbolValueType());
      assertTrue(templateType1.isResolved());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isBooleanValueType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isEnumType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isOrdinaryFunction());
      assertTrue(templateType1.isRecordType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isAllType());
      assertEquals("Duplicate module paths after resolving: %s", templateType1.getReferenceName());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isNoObjectType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType_Parameter0.isOptional());
      assertFalse(functionType_Parameter0.isVariadic());
      assertEquals(7, immutableList0.size());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertNotSame(templateType1, templateType0);
      
      ImmutableList<String> immutableList1 = ImmutableList.of("?He|{ Q{m'", "Null JSType", "", "l|MeE0uSac8^ ]Xn", "l|MeE0uSac8^ ]Xn");
      assertNotNull(immutableList1);
      assertEquals(5, immutableList1.size());
      assertFalse(immutableList1.contains("Duplicate module paths after resolving: %s"));
      assertTrue(immutableList1.contains(""));
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) recordType0, (List<FunctionType.Parameter>) immutableList0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(templateType1.equals((Object)templateType0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(functionType0);
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSub());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDestructuringPattern());
      assertTrue(node0.hasParent());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isForOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSuper());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isBreak());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isRest());
      assertFalse(node0.isYield());
      assertFalse(node0.isExport());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertFalse(node0.isRoot());
      assertFalse(node0.isComma());
      assertFalse(node0.isAwait());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTry());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isBigInt());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAnd());
      assertTrue(node0.isString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNeg());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isImport());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isClass());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSpread());
      assertFalse(node0.isExportSpec());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isTemplatizedType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isVoidType());
      assertTrue(recordType0.isSuccessfullyResolved());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isStringValueType());
      assertTrue(recordType0.isResolved());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isUnsuccessfullyResolved());
      assertTrue(recordType0.isStructuralType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isStructuralInterface());
      assertFalse(recordType0.isAnonymous());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isLiteralObject());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isNominalConstructorOrInterface());
      assertTrue(recordType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isRawTypeOfTemplatizedType());
      assertFalse(recordType0.isBigIntValueType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertEquals(0, recordType0.getTemplateParamCount());
      assertFalse(recordType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isSymbolValueType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isConstructor());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isSymbolValueType());
      assertTrue(templateType1.isResolved());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isBooleanValueType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isEnumType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isOrdinaryFunction());
      assertTrue(templateType1.isRecordType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isAllType());
      assertEquals("Duplicate module paths after resolving: %s", templateType1.getReferenceName());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isNoObjectType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType_Parameter0.isOptional());
      assertFalse(functionType_Parameter0.isVariadic());
      assertEquals(7, immutableList0.size());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(functionType0.isSymbolValueType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.isResolved());
      assertNull(functionType0.getClosurePrimitive());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAnonymous());
      assertFalse(functionType0.isTemplatizedType());
      assertTrue(functionType0.canBeCalled());
      assertTrue(functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isLiteralObject());
      assertFalse(functionType0.isRawTypeOfTemplatizedType());
      assertTrue(functionType0.isSuccessfullyResolved());
      assertTrue(functionType0.matchesObjectContext());
      assertEquals(0, functionType0.getTemplateParamCount());
      assertFalse(functionType0.isNoType());
      assertNull(functionType0.getGoogModuleId());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isUnsuccessfullyResolved());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNamedType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isAbstract());
      assertFalse(functionType0.isNominalConstructorOrInterface());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isStructuralInterface());
      assertFalse(functionType0.isBigIntValueType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNativeObjectType());
      assertFalse(immutableSet0.contains(""));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertNotSame(templateType1, templateType0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      assertNotNull(templateType0);
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isLiteralObject());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      assertNotNull(templatizedType0);
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isLiteralObject());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isNoType());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertFalse(templatizedType0.isStringValueType());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertFalse(templatizedType0.hasCachedValues());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isFunctionType());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isRecordType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertTrue(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isNativeObjectType());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertTrue(templatizedType0.isObject());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, treeSet0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      HashMap<TemplateType, JSType> hashMap1 = new HashMap<TemplateType, JSType>();
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(errorReporter0);
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertNotNull(jSTypeRegistry2);
      
      Token token0 = Token.TYPEOF;
      Node node0 = new Node(token0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isCallSignature());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isConst());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isForOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSub());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRest());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isExport());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRoot());
      assertFalse(node0.isLet());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isEQ());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isForIn());
      assertFalse(node0.isOptChainCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isSuper());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNull());
      assertNull(node0.getOriginalName());
      assertEquals(Token.TYPEOF, node0.getToken());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isSHNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.hasParent());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isAwait());
      assertFalse(node0.isImportStar());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isMemberVariableDef());
      assertTrue(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNE());
      assertFalse(node0.isCall());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isNew());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isNeg());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isImport());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isClass());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isSpread());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOptChainGetElem());
      
      Node node1 = new Node(token0, node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node1);
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isCallSignature());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isConst());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isForOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSub());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRest());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isName());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isExport());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRoot());
      assertFalse(node0.isLet());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isEQ());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isForIn());
      assertFalse(node0.isOptChainCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isSuper());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNull());
      assertNull(node0.getOriginalName());
      assertEquals(Token.TYPEOF, node0.getToken());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isSHNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isAwait());
      assertFalse(node0.isImportStar());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isMemberVariableDef());
      assertTrue(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNE());
      assertFalse(node0.isCall());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isNew());
      assertTrue(node0.hasParent());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isNeg());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isImport());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isClass());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isSpread());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node1.isImportMeta());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasParent());
      assertFalse(node1.isSuper());
      assertFalse(node1.isObjectRest());
      assertFalse(node1.isSHEQ());
      assertFalse(node1.isAwait());
      assertFalse(node1.isThis());
      assertFalse(node1.isMemberFieldDef());
      assertFalse(node1.isModuleBody());
      assertFalse(node1.isComma());
      assertFalse(node1.isBitNot());
      assertFalse(node1.isComputedFieldDef());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSpread());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOptChainCall());
      assertFalse(node1.hasTwoChildren());
      assertFalse(node1.isSHNE());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isObjectPattern());
      assertFalse(node1.isLet());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isImportStar());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isMemberVariableDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSub());
      assertFalse(node1.isCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDestructuringLhs());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignNullishCoalesce());
      assertFalse(node1.isTemplateLitSub());
      assertFalse(node1.isClassMembers());
      assertFalse(node1.isBigInt());
      assertFalse(node1.isStringLit());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isString());
      assertFalse(node1.isConst());
      assertFalse(node1.isVanillaFor());
      assertFalse(node1.isReturn());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isForAwaitOf());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isInterfaceMembers());
      assertFalse(node1.isDefaultValue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIndexSignature());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isComputedProp());
      assertFalse(node1.isExportSpec());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayPattern());
      assertFalse(node1.isDec());
      assertFalse(node1.isHook());
      assertFalse(node1.isAssign());
      assertNull(node1.getOriginalName());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isRest());
      assertFalse(node1.isCase());
      assertFalse(node1.isTemplateLit());
      assertFalse(node1.isExportSpecs());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertFalse(node1.isNew());
      assertFalse(node1.isNormalBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOptChainGetElem());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEQ());
      assertTrue(node1.hasZeroOrOneChild());
      assertFalse(node1.isImportSpec());
      assertFalse(node1.isDo());
      assertFalse(node1.isDestructuringPattern());
      assertFalse(node1.isTaggedTemplateLit());
      assertFalse(node1.isImport());
      assertFalse(node1.isClass());
      assertFalse(node1.isNumber());
      assertFalse(node1.isRecordType());
      assertFalse(node1.isForOf());
      assertFalse(node1.isNeg());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCallSignature());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssignOr());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignAnd());
      assertEquals(Token.TYPEOF, node1.getToken());
      assertFalse(node1.isOptChainGetProp());
      assertFalse(node1.isForIn());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isRoot());
      assertFalse(node1.isName());
      assertFalse(node1.isNullishCoalesce());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isIf());
      assertTrue(node1.isTypeOf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isIn());
      assertFalse(node1.isAssignExponent());
      assertFalse(node1.isYield());
      assertFalse(node1.isMemberFunctionDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isImportSpecs());
      assertFalse(node1.isExponent());
      assertFalse(node1.isExport());
      assertFalse(node1.isTemplateLitString());
      
      // Undeclared exception!
      try { 
        jSTypeRegistry2.createTypeFromCommentNode(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      assertNotNull(templateType0);
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isLiteralObject());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isAllType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isEnumType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      assertNotNull(templatizedType0);
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isLiteralObject());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isAllType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isEnumType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templatizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.isFunctionType());
      assertTrue(templatizedType0.isResolved());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertFalse(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isNoType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isRecordType());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isEnumType());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isVoidType());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isStringValueType());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertTrue(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isNoResolvedType());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isLiteralObject());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isAnonymous());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, treeSet0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      Token token0 = Token.TYPEOF;
      Node node0 = new Node(token0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isForIn());
      assertFalse(node0.isNull());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isRest());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNeg());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isNumber());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isScript());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isConst());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isNE());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isSpread());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isExponent());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExport());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isLet());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isSub());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isForOf());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isYield());
      assertFalse(node0.isHook());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isSHNE());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasTwoChildren());
      assertTrue(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.hasParent());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSuper());
      assertFalse(node0.isOptChainGetProp());
      assertEquals(Token.TYPEOF, node0.getToken());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isAwait());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isRoot());
      
      // Undeclared exception!
      try { 
        jSTypeRegistry1.createTypeFromCommentNode(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      Token token0 = Token.FOR_AWAIT_OF;
      Node node0 = Node.newTemplateLitString("IOBJECT_VALUE", "IOBJECT_VALUE");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isObjectPattern());
      assertEquals("IOBJECT_VALUE", node0.getRawString());
      assertFalse(node0.isLet());
      assertFalse(node0.isExponent());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isExport());
      assertFalse(node0.hasParent());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isObjectRest());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSuper());
      assertFalse(node0.isComma());
      assertFalse(node0.isSpread());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIn());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBitNot());
      assertEquals(0, node0.getLength());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isRest());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertEquals(Token.TEMPLATELIT_STRING, node0.getToken());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isEQ());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isNeg());
      assertFalse(node0.isForIn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isRoot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isName());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isTrue());
      assertFalse(node0.isYield());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isConst());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVanillaFor());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isMemberVariableDef());
      assertTrue(node0.isTemplateLitString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isSub());
      assertEquals("IOBJECT_VALUE", node0.getCookedString());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isCatch());
      
      Node node1 = new Node(token0, node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node1);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isObjectPattern());
      assertEquals("IOBJECT_VALUE", node0.getRawString());
      assertFalse(node0.isLet());
      assertFalse(node0.isExponent());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isExport());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isObjectRest());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSuper());
      assertFalse(node0.isComma());
      assertFalse(node0.isSpread());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIn());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBitNot());
      assertEquals(0, node0.getLength());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isRest());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertEquals(Token.TEMPLATELIT_STRING, node0.getToken());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isEQ());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isNeg());
      assertFalse(node0.isForIn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isRoot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isName());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isTrue());
      assertFalse(node0.isYield());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isConst());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVanillaFor());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasTwoChildren());
      assertTrue(node0.hasParent());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isMemberVariableDef());
      assertTrue(node0.isTemplateLitString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isSub());
      assertEquals("IOBJECT_VALUE", node0.getCookedString());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isCatch());
      assertFalse(node1.isNeg());
      assertFalse(node1.isForIn());
      assertFalse(node1.isNull());
      assertFalse(node1.isMemberVariableDef());
      assertEquals(Token.FOR_AWAIT_OF, node1.getToken());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isTemplateLitString());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isClassMembers());
      assertFalse(node1.isOptChainGetProp());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignNullishCoalesce());
      assertFalse(node1.isNullishCoalesce());
      assertFalse(node1.isTrue());
      assertFalse(node1.isEQ());
      assertFalse(node1.isDo());
      assertFalse(node1.isDestructuringLhs());
      assertFalse(node1.isLabel());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isClass());
      assertFalse(node1.isImport());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasTwoChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSHNE());
      assertFalse(node1.isTry());
      assertTrue(node1.hasZeroOrOneChild());
      assertFalse(node1.isAssignAnd());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNormalBlock());
      assertFalse(node1.isModuleBody());
      assertFalse(node1.isComma());
      assertFalse(node1.isObjectRest());
      assertFalse(node1.hasParent());
      assertFalse(node1.isImportStar());
      assertFalse(node1.isMemberFieldDef());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSuper());
      assertFalse(node1.isRest());
      assertNull(node1.getOriginalName());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isBitNot());
      assertFalse(node1.isIn());
      assertFalse(node1.isOr());
      assertFalse(node1.isMemberFunctionDef());
      assertFalse(node1.isAssignExponent());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isContinue());
      assertFalse(node1.isYield());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isImportSpecs());
      assertFalse(node1.isWhile());
      assertFalse(node1.isExponent());
      assertFalse(node1.isRoot());
      assertFalse(node1.isAwait());
      assertFalse(node1.isCall());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExport());
      assertFalse(node1.isStringLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isLet());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOptChainGetElem());
      assertTrue(node1.isForAwaitOf());
      assertFalse(node1.isAssignAdd());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isImportSpec());
      assertFalse(node1.isCallSignature());
      assertFalse(node1.isIf());
      assertFalse(node1.isDestructuringPattern());
      assertFalse(node1.isTemplateLit());
      assertFalse(node1.isAssignOr());
      assertFalse(node1.isOptChainCall());
      assertFalse(node1.isObjectPattern());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRecordType());
      assertFalse(node1.isTemplateLitSub());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSub());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isForOf());
      assertFalse(node1.isTaggedTemplateLit());
      assertFalse(node1.isCase());
      assertFalse(node1.isExportSpecs());
      assertFalse(node1.isSHEQ());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isAnd());
      assertFalse(node1.isImportMeta());
      assertFalse(node1.isIndexSignature());
      assertFalse(node1.isSpread());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isComputedProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isExportSpec());
      assertFalse(node1.isComputedFieldDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isArrayPattern());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetElem());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isBigInt());
      assertFalse(node1.isDec());
      assertFalse(node1.isCast());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isInterfaceMembers());
      assertFalse(node1.isConst());
      assertFalse(node1.isDefaultValue());
      assertFalse(node1.isNot());
      assertFalse(node1.isVanillaFor());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isString());
      
      boolean boolean0 = node1.isShorthandProperty();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isObjectPattern());
      assertEquals("IOBJECT_VALUE", node0.getRawString());
      assertFalse(node0.isLet());
      assertFalse(node0.isExponent());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isExport());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isObjectRest());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSuper());
      assertFalse(node0.isComma());
      assertFalse(node0.isSpread());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIn());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBitNot());
      assertEquals(0, node0.getLength());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isRest());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertEquals(Token.TEMPLATELIT_STRING, node0.getToken());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isEQ());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isNeg());
      assertFalse(node0.isForIn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isRoot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isName());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isTrue());
      assertFalse(node0.isYield());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isConst());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVanillaFor());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasTwoChildren());
      assertTrue(node0.hasParent());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isMemberVariableDef());
      assertTrue(node0.isTemplateLitString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isSub());
      assertEquals("IOBJECT_VALUE", node0.getCookedString());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isCatch());
      assertFalse(node1.isNeg());
      assertFalse(node1.isForIn());
      assertFalse(node1.isNull());
      assertFalse(node1.isMemberVariableDef());
      assertEquals(Token.FOR_AWAIT_OF, node1.getToken());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isTemplateLitString());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isClassMembers());
      assertFalse(node1.isOptChainGetProp());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignNullishCoalesce());
      assertFalse(node1.isNullishCoalesce());
      assertFalse(node1.isTrue());
      assertFalse(node1.isEQ());
      assertFalse(node1.isDo());
      assertFalse(node1.isDestructuringLhs());
      assertFalse(node1.isLabel());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isClass());
      assertFalse(node1.isImport());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasTwoChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSHNE());
      assertFalse(node1.isTry());
      assertTrue(node1.hasZeroOrOneChild());
      assertFalse(node1.isAssignAnd());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNormalBlock());
      assertFalse(node1.isModuleBody());
      assertFalse(node1.isComma());
      assertFalse(node1.isObjectRest());
      assertFalse(node1.hasParent());
      assertFalse(node1.isImportStar());
      assertFalse(node1.isMemberFieldDef());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSuper());
      assertFalse(node1.isRest());
      assertNull(node1.getOriginalName());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isBitNot());
      assertFalse(node1.isIn());
      assertFalse(node1.isOr());
      assertFalse(node1.isMemberFunctionDef());
      assertFalse(node1.isAssignExponent());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isContinue());
      assertFalse(node1.isYield());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isImportSpecs());
      assertFalse(node1.isWhile());
      assertFalse(node1.isExponent());
      assertFalse(node1.isRoot());
      assertFalse(node1.isAwait());
      assertFalse(node1.isCall());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExport());
      assertFalse(node1.isStringLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isLet());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOptChainGetElem());
      assertTrue(node1.isForAwaitOf());
      assertFalse(node1.isAssignAdd());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isImportSpec());
      assertFalse(node1.isCallSignature());
      assertFalse(node1.isIf());
      assertFalse(node1.isDestructuringPattern());
      assertFalse(node1.isTemplateLit());
      assertFalse(node1.isAssignOr());
      assertFalse(node1.isOptChainCall());
      assertFalse(node1.isObjectPattern());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRecordType());
      assertFalse(node1.isTemplateLitSub());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSub());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isForOf());
      assertFalse(node1.isTaggedTemplateLit());
      assertFalse(node1.isCase());
      assertFalse(node1.isExportSpecs());
      assertFalse(node1.isSHEQ());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isAnd());
      assertFalse(node1.isImportMeta());
      assertFalse(node1.isIndexSignature());
      assertFalse(node1.isSpread());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isComputedProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isExportSpec());
      assertFalse(node1.isComputedFieldDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isArrayPattern());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetElem());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isBigInt());
      assertFalse(node1.isDec());
      assertFalse(node1.isCast());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isInterfaceMembers());
      assertFalse(node1.isConst());
      assertFalse(node1.isDefaultValue());
      assertFalse(node1.isNot());
      assertFalse(node1.isVanillaFor());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isString());
      
      String string0 = jSTypeRegistry0.getReadableTypeNameNoDeref(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(string0);
      assertEquals("?", string0);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isObjectPattern());
      assertEquals("IOBJECT_VALUE", node0.getRawString());
      assertFalse(node0.isLet());
      assertFalse(node0.isExponent());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isExport());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isObjectRest());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSuper());
      assertFalse(node0.isComma());
      assertFalse(node0.isSpread());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIn());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBitNot());
      assertEquals(0, node0.getLength());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isRest());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertEquals(Token.TEMPLATELIT_STRING, node0.getToken());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isEQ());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isNeg());
      assertFalse(node0.isForIn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isRoot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isName());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isTrue());
      assertFalse(node0.isYield());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isConst());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVanillaFor());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasTwoChildren());
      assertTrue(node0.hasParent());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isMemberVariableDef());
      assertTrue(node0.isTemplateLitString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isSub());
      assertEquals("IOBJECT_VALUE", node0.getCookedString());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isCatch());
      assertFalse(node1.isNeg());
      assertFalse(node1.isForIn());
      assertFalse(node1.isNull());
      assertFalse(node1.isMemberVariableDef());
      assertEquals(Token.FOR_AWAIT_OF, node1.getToken());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isTemplateLitString());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isClassMembers());
      assertFalse(node1.isOptChainGetProp());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignNullishCoalesce());
      assertFalse(node1.isNullishCoalesce());
      assertFalse(node1.isTrue());
      assertFalse(node1.isEQ());
      assertFalse(node1.isDo());
      assertFalse(node1.isDestructuringLhs());
      assertFalse(node1.isLabel());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isClass());
      assertFalse(node1.isImport());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasTwoChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSHNE());
      assertFalse(node1.isTry());
      assertTrue(node1.hasZeroOrOneChild());
      assertFalse(node1.isAssignAnd());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNormalBlock());
      assertFalse(node1.isModuleBody());
      assertFalse(node1.isComma());
      assertFalse(node1.isObjectRest());
      assertFalse(node1.hasParent());
      assertFalse(node1.isImportStar());
      assertFalse(node1.isMemberFieldDef());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSuper());
      assertFalse(node1.isRest());
      assertNull(node1.getOriginalName());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isBitNot());
      assertFalse(node1.isIn());
      assertFalse(node1.isOr());
      assertFalse(node1.isMemberFunctionDef());
      assertFalse(node1.isAssignExponent());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isContinue());
      assertFalse(node1.isYield());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isImportSpecs());
      assertFalse(node1.isWhile());
      assertFalse(node1.isExponent());
      assertFalse(node1.isRoot());
      assertFalse(node1.isAwait());
      assertFalse(node1.isCall());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExport());
      assertFalse(node1.isStringLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isLet());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOptChainGetElem());
      assertTrue(node1.isForAwaitOf());
      assertFalse(node1.isAssignAdd());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isImportSpec());
      assertFalse(node1.isCallSignature());
      assertFalse(node1.isIf());
      assertFalse(node1.isDestructuringPattern());
      assertFalse(node1.isTemplateLit());
      assertFalse(node1.isAssignOr());
      assertFalse(node1.isOptChainCall());
      assertFalse(node1.isObjectPattern());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRecordType());
      assertFalse(node1.isTemplateLitSub());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSub());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isForOf());
      assertFalse(node1.isTaggedTemplateLit());
      assertFalse(node1.isCase());
      assertFalse(node1.isExportSpecs());
      assertFalse(node1.isSHEQ());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isAnd());
      assertFalse(node1.isImportMeta());
      assertFalse(node1.isIndexSignature());
      assertFalse(node1.isSpread());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isComputedProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isExportSpec());
      assertFalse(node1.isComputedFieldDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isArrayPattern());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetElem());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isBigInt());
      assertFalse(node1.isDec());
      assertFalse(node1.isCast());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isInterfaceMembers());
      assertFalse(node1.isConst());
      assertFalse(node1.isDefaultValue());
      assertFalse(node1.isNot());
      assertFalse(node1.isVanillaFor());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isString());
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      assertNull(functionType0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "IOBJECT_VALUE", (JSType) null);
      assertNotNull(templateType0);
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isEnumType());
      
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of(templateType0, templateType0, templateType0, templateType0, templateType0, templateType0);
      assertNotNull(immutableList0);
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isEnumType());
      assertEquals(6, immutableList0.size());
      assertTrue(immutableList0.contains(templateType0));
      
      boolean boolean1 = JSType.areSimilar(templateType0, templateType0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isEnumType());
      
      UnmodifiableListIterator<TemplateType> unmodifiableListIterator0 = immutableList0.listIterator();
      assertNotNull(unmodifiableListIterator0);
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isEnumType());
      assertEquals(6, immutableList0.size());
      assertFalse(unmodifiableListIterator0.hasPrevious());
      assertTrue(unmodifiableListIterator0.hasNext());
      assertTrue(immutableList0.contains(templateType0));
      
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Iterator<? extends JSType>) unmodifiableListIterator0);
      assertNotNull(immutableList1);
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isEnumType());
      assertEquals(6, immutableList0.size());
      assertTrue(unmodifiableListIterator0.hasPrevious());
      assertFalse(unmodifiableListIterator0.hasNext());
      assertEquals(6, immutableList1.size());
      assertTrue(immutableList0.contains(templateType0));
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createTemplatizedType((ObjectType) null, immutableList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      Token token0 = Token.FOR_AWAIT_OF;
      Node node0 = Node.newTemplateLitString("IOBJECT_VALUE", "IOBJECT_VALUE");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isExport());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertEquals("IOBJECT_VALUE", node0.getRawString());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isSub());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isConst());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isForOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isSpread());
      assertFalse(node0.isNeg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isClass());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImport());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isDo());
      assertEquals(Token.TEMPLATELIT_STRING, node0.getToken());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isRoot());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isParamList());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isTry());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isRest());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isArrayPattern());
      assertNull(node0.getOriginalName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isYield());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertTrue(node0.isTemplateLitString());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isAwait());
      assertEquals("IOBJECT_VALUE", node0.getCookedString());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSuper());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isForIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasParent());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isOr());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isLet());
      assertFalse(node0.isObjectRest());
      
      Node node1 = new Node(token0, node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node1);
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isExport());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertEquals("IOBJECT_VALUE", node0.getRawString());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.hasParent());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isSub());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isConst());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isForOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isSpread());
      assertFalse(node0.isNeg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isClass());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImport());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isDo());
      assertEquals(Token.TEMPLATELIT_STRING, node0.getToken());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isRoot());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isParamList());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isTry());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isRest());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isArrayPattern());
      assertNull(node0.getOriginalName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isYield());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertTrue(node0.isTemplateLitString());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isAwait());
      assertEquals("IOBJECT_VALUE", node0.getCookedString());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSuper());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isForIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isOr());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isLet());
      assertFalse(node0.isObjectRest());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isInterfaceMembers());
      assertFalse(node1.isTry());
      assertFalse(node1.isAssignNullishCoalesce());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTemplateLitString());
      assertFalse(node1.isNeg());
      assertEquals(Token.FOR_AWAIT_OF, node1.getToken());
      assertFalse(node1.isMemberVariableDef());
      assertFalse(node1.isOptChainGetProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isForIn());
      assertFalse(node1.hasTwoChildren());
      assertFalse(node1.isSHNE());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultValue());
      assertFalse(node1.isEQ());
      assertFalse(node1.isNullishCoalesce());
      assertFalse(node1.isVanillaFor());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isBigInt());
      assertFalse(node1.isReturn());
      assertFalse(node1.isRoot());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isSuper());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isSpread());
      assertFalse(node1.isRest());
      assertFalse(node1.isAwait());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabel());
      assertFalse(node1.isMemberFunctionDef());
      assertFalse(node1.isImport());
      assertFalse(node1.isClass());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignExponent());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectPattern());
      assertFalse(node1.isAssignOr());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertTrue(node1.hasZeroOrOneChild());
      assertFalse(node1.isBitNot());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isMemberFieldDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isImportSpecs());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSub());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isForOf());
      assertFalse(node1.isRecordType());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCallSignature());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isDestructuringPattern());
      assertFalse(node1.isTemplateLit());
      assertFalse(node1.isExport());
      assertTrue(node1.isForAwaitOf());
      assertFalse(node1.isExponent());
      assertNull(node1.getOriginalName());
      assertFalse(node1.isConst());
      assertFalse(node1.isYield());
      assertFalse(node1.isLet());
      assertFalse(node1.isImportSpec());
      assertFalse(node1.isString());
      assertFalse(node1.isOptChainGetElem());
      assertFalse(node1.isComputedFieldDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isComputedProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isArrayPattern());
      assertFalse(node1.isObjectRest());
      assertFalse(node1.isNot());
      assertFalse(node1.isExportSpec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isImportStar());
      assertFalse(node1.isModuleBody());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isOptChainCall());
      assertFalse(node1.hasParent());
      assertFalse(node1.isInc());
      assertFalse(node1.isAssignAnd());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isTaggedTemplateLit());
      assertFalse(node1.isDestructuringLhs());
      assertFalse(node1.isNormalBlock());
      assertFalse(node1.isExportSpecs());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isSHEQ());
      assertFalse(node1.isCatch());
      assertFalse(node1.isImportMeta());
      assertFalse(node1.isTemplateLitSub());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isStringLit());
      assertFalse(node1.isIndexSignature());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isClassMembers());
      
      boolean boolean0 = node1.isShorthandProperty();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(boolean0);
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isExport());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertEquals("IOBJECT_VALUE", node0.getRawString());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.hasParent());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isSub());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isConst());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isForOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isSpread());
      assertFalse(node0.isNeg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isClass());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImport());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isDo());
      assertEquals(Token.TEMPLATELIT_STRING, node0.getToken());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isRoot());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isParamList());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isTry());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isRest());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isArrayPattern());
      assertNull(node0.getOriginalName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isYield());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertTrue(node0.isTemplateLitString());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isAwait());
      assertEquals("IOBJECT_VALUE", node0.getCookedString());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSuper());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isForIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isOr());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isLet());
      assertFalse(node0.isObjectRest());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isInterfaceMembers());
      assertFalse(node1.isTry());
      assertFalse(node1.isAssignNullishCoalesce());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTemplateLitString());
      assertFalse(node1.isNeg());
      assertEquals(Token.FOR_AWAIT_OF, node1.getToken());
      assertFalse(node1.isMemberVariableDef());
      assertFalse(node1.isOptChainGetProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isForIn());
      assertFalse(node1.hasTwoChildren());
      assertFalse(node1.isSHNE());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultValue());
      assertFalse(node1.isEQ());
      assertFalse(node1.isNullishCoalesce());
      assertFalse(node1.isVanillaFor());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isBigInt());
      assertFalse(node1.isReturn());
      assertFalse(node1.isRoot());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isSuper());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isSpread());
      assertFalse(node1.isRest());
      assertFalse(node1.isAwait());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabel());
      assertFalse(node1.isMemberFunctionDef());
      assertFalse(node1.isImport());
      assertFalse(node1.isClass());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignExponent());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectPattern());
      assertFalse(node1.isAssignOr());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertTrue(node1.hasZeroOrOneChild());
      assertFalse(node1.isBitNot());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isMemberFieldDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isImportSpecs());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSub());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isForOf());
      assertFalse(node1.isRecordType());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCallSignature());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isDestructuringPattern());
      assertFalse(node1.isTemplateLit());
      assertFalse(node1.isExport());
      assertTrue(node1.isForAwaitOf());
      assertFalse(node1.isExponent());
      assertNull(node1.getOriginalName());
      assertFalse(node1.isConst());
      assertFalse(node1.isYield());
      assertFalse(node1.isLet());
      assertFalse(node1.isImportSpec());
      assertFalse(node1.isString());
      assertFalse(node1.isOptChainGetElem());
      assertFalse(node1.isComputedFieldDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isComputedProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isArrayPattern());
      assertFalse(node1.isObjectRest());
      assertFalse(node1.isNot());
      assertFalse(node1.isExportSpec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isImportStar());
      assertFalse(node1.isModuleBody());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isOptChainCall());
      assertFalse(node1.hasParent());
      assertFalse(node1.isInc());
      assertFalse(node1.isAssignAnd());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isTaggedTemplateLit());
      assertFalse(node1.isDestructuringLhs());
      assertFalse(node1.isNormalBlock());
      assertFalse(node1.isExportSpecs());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isSHEQ());
      assertFalse(node1.isCatch());
      assertFalse(node1.isImportMeta());
      assertFalse(node1.isTemplateLitSub());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isStringLit());
      assertFalse(node1.isIndexSignature());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isClassMembers());
      
      String string0 = jSTypeRegistry0.getReadableTypeNameNoDeref(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(string0);
      assertEquals("?", string0);
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isExport());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertEquals("IOBJECT_VALUE", node0.getRawString());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.hasParent());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isSub());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isConst());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isForOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isSpread());
      assertFalse(node0.isNeg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isClass());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImport());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isDo());
      assertEquals(Token.TEMPLATELIT_STRING, node0.getToken());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isRoot());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isParamList());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isTry());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isRest());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isArrayPattern());
      assertNull(node0.getOriginalName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isYield());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertTrue(node0.isTemplateLitString());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isAwait());
      assertEquals("IOBJECT_VALUE", node0.getCookedString());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSuper());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isForIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isOr());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isLet());
      assertFalse(node0.isObjectRest());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isInterfaceMembers());
      assertFalse(node1.isTry());
      assertFalse(node1.isAssignNullishCoalesce());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTemplateLitString());
      assertFalse(node1.isNeg());
      assertEquals(Token.FOR_AWAIT_OF, node1.getToken());
      assertFalse(node1.isMemberVariableDef());
      assertFalse(node1.isOptChainGetProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isForIn());
      assertFalse(node1.hasTwoChildren());
      assertFalse(node1.isSHNE());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultValue());
      assertFalse(node1.isEQ());
      assertFalse(node1.isNullishCoalesce());
      assertFalse(node1.isVanillaFor());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isBigInt());
      assertFalse(node1.isReturn());
      assertFalse(node1.isRoot());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isSuper());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isSpread());
      assertFalse(node1.isRest());
      assertFalse(node1.isAwait());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabel());
      assertFalse(node1.isMemberFunctionDef());
      assertFalse(node1.isImport());
      assertFalse(node1.isClass());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignExponent());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectPattern());
      assertFalse(node1.isAssignOr());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertTrue(node1.hasZeroOrOneChild());
      assertFalse(node1.isBitNot());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isMemberFieldDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isImportSpecs());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSub());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isForOf());
      assertFalse(node1.isRecordType());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCallSignature());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isDestructuringPattern());
      assertFalse(node1.isTemplateLit());
      assertFalse(node1.isExport());
      assertTrue(node1.isForAwaitOf());
      assertFalse(node1.isExponent());
      assertNull(node1.getOriginalName());
      assertFalse(node1.isConst());
      assertFalse(node1.isYield());
      assertFalse(node1.isLet());
      assertFalse(node1.isImportSpec());
      assertFalse(node1.isString());
      assertFalse(node1.isOptChainGetElem());
      assertFalse(node1.isComputedFieldDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isComputedProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isArrayPattern());
      assertFalse(node1.isObjectRest());
      assertFalse(node1.isNot());
      assertFalse(node1.isExportSpec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isImportStar());
      assertFalse(node1.isModuleBody());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isOptChainCall());
      assertFalse(node1.hasParent());
      assertFalse(node1.isInc());
      assertFalse(node1.isAssignAnd());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isTaggedTemplateLit());
      assertFalse(node1.isDestructuringLhs());
      assertFalse(node1.isNormalBlock());
      assertFalse(node1.isExportSpecs());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isSHEQ());
      assertFalse(node1.isCatch());
      assertFalse(node1.isImportMeta());
      assertFalse(node1.isTemplateLitSub());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isStringLit());
      assertFalse(node1.isIndexSignature());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isClassMembers());
      
      JSType jSType0 = null;
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      assertNull(functionType0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "IOBJECT_VALUE", (JSType) null);
      assertNotNull(templateType0);
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isRecordType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isTypeTransformation());
      
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of(templateType0, templateType0, templateType0, templateType0, templateType0, templateType0);
      assertNotNull(immutableList0);
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isRecordType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isTypeTransformation());
      assertEquals(6, immutableList0.size());
      assertTrue(immutableList0.contains(templateType0));
      
      boolean boolean1 = JSType.areSimilar(templateType0, templateType0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isRecordType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isTypeTransformation());
      
      UnmodifiableListIterator<TemplateType> unmodifiableListIterator0 = immutableList0.listIterator();
      assertNotNull(unmodifiableListIterator0);
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isRecordType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isTypeTransformation());
      assertEquals(6, immutableList0.size());
      assertTrue(unmodifiableListIterator0.hasNext());
      assertFalse(unmodifiableListIterator0.hasPrevious());
      assertTrue(immutableList0.contains(templateType0));
      
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Iterator<? extends JSType>) unmodifiableListIterator0);
      assertNotNull(immutableList1);
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isRecordType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isTypeTransformation());
      assertEquals(6, immutableList0.size());
      assertFalse(unmodifiableListIterator0.hasNext());
      assertTrue(unmodifiableListIterator0.hasPrevious());
      assertEquals(6, immutableList1.size());
      assertTrue(immutableList0.contains(templateType0));
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createTemplatizedType((ObjectType) null, immutableList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      assertNotNull(templateType0);
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isTypeTransformation());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isSymbolValueType());
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isVoidable());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isLiteralObject());
      assertTrue(noResolvedType0.isObject());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isTemplateType());
      
      Token token0 = Token.MEMBER_FUNCTION_DEF;
      Node node0 = new Node(token0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isExponent());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isExport());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLet());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isSHEQ());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasParent());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isForOf());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isThis());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSub());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isIn());
      assertFalse(node0.hasTwoChildren());
      assertTrue(node0.isMemberFunctionDef());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isTemplateLit());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isSuper());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isYield());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAwait());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRoot());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isEQ());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isForIn());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isRest());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNeg());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isTry());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isConst());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isInc());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSpread());
      assertFalse(node0.isCall());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isDec());
      assertFalse(node0.isInterfaceMembers());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(Token.MEMBER_FUNCTION_DEF, node0.getToken());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      
      TemplateType templateType1 = jSTypeRegistry0.createTemplateTypeWithTransformation("&2eE.", node0);
      assertFalse(templateType1.equals((Object)templateType0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateType1);
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isExponent());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isExport());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLet());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isSHEQ());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasParent());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isForOf());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isThis());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSub());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isIn());
      assertFalse(node0.hasTwoChildren());
      assertTrue(node0.isMemberFunctionDef());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isTemplateLit());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isSuper());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isYield());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAwait());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRoot());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isEQ());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isForIn());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isRest());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNeg());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isTry());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isConst());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isInc());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSpread());
      assertFalse(node0.isCall());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isDec());
      assertFalse(node0.isInterfaceMembers());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(Token.MEMBER_FUNCTION_DEF, node0.getToken());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isNativeObjectType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isStructuralInterface());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isVoidType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isOrdinaryFunction());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isInterface());
      assertTrue(templateType1.isTypeTransformation());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isTemplatizedType());
      assertEquals("&2eE.", templateType1.getReferenceName());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertTrue(templateType1.isObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertNotSame(templateType1, templateType0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, treeSet0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(treeSet0.contains("&2eE."));
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noResolvedType0, node0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(recordTypeBuilder_RecordProperty0);
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isVoidable());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isLiteralObject());
      assertTrue(noResolvedType0.isObject());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isExponent());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isExport());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLet());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isSHEQ());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasParent());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isForOf());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isThis());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSub());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isIn());
      assertFalse(node0.hasTwoChildren());
      assertTrue(node0.isMemberFunctionDef());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isTemplateLit());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isSuper());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isYield());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAwait());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRoot());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isEQ());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isForIn());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isRest());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNeg());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isTry());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isConst());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isInc());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSpread());
      assertFalse(node0.isCall());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isDec());
      assertFalse(node0.isInterfaceMembers());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(Token.MEMBER_FUNCTION_DEF, node0.getToken());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      
      Node node1 = recordTypeBuilder_RecordProperty0.getPropertyNode();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node1);
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isVoidable());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isLiteralObject());
      assertTrue(noResolvedType0.isObject());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isExponent());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isExport());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLet());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isSHEQ());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasParent());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isForOf());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isThis());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSub());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isIn());
      assertFalse(node0.hasTwoChildren());
      assertTrue(node0.isMemberFunctionDef());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isTemplateLit());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isSuper());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isYield());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAwait());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRoot());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isEQ());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isForIn());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isRest());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNeg());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isTry());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isConst());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isInc());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSpread());
      assertFalse(node0.isCall());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isDec());
      assertFalse(node0.isInterfaceMembers());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(Token.MEMBER_FUNCTION_DEF, node0.getToken());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node1.isYield());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isAssignOr());
      assertFalse(node1.isExportSpecs());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isTemplateLit());
      assertFalse(node1.isTaggedTemplateLit());
      assertNull(node1.getOriginalName());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isConst());
      assertFalse(node1.isOptChainGetElem());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFalse());
      assertFalse(node1.isImportSpec());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertFalse(node1.isImportSpecs());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertEquals(Token.MEMBER_FUNCTION_DEF, node1.getToken());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAdd());
      assertFalse(node1.isObjectPattern());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertTrue(node1.hasZeroOrOneChild());
      assertFalse(node1.isExport());
      assertFalse(node1.isTemplateLitString());
      assertFalse(node1.isExponent());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNeg());
      assertFalse(node1.isComputedFieldDef());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOptChainGetProp());
      assertFalse(node1.isClass());
      assertFalse(node1.isImport());
      assertFalse(node1.isAssignExponent());
      assertFalse(node1.isTry());
      assertFalse(node1.isRecordType());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isForOf());
      assertFalse(node1.isRest());
      assertFalse(node1.isCallSignature());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isMemberFieldDef());
      assertFalse(node1.isVanillaFor());
      assertFalse(node1.isBitNot());
      assertFalse(node1.isBreak());
      assertFalse(node1.isImportStar());
      assertFalse(node1.isModuleBody());
      assertFalse(node1.isObjectRest());
      assertFalse(node1.hasParent());
      assertFalse(node1.isSHNE());
      assertTrue(node1.isMemberFunctionDef());
      assertFalse(node1.hasTwoChildren());
      assertFalse(node1.isVoid());
      assertFalse(node1.isInterfaceMembers());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isSpread());
      assertFalse(node1.isTrue());
      assertFalse(node1.isComma());
      assertFalse(node1.isAwait());
      assertFalse(node1.isBigInt());
      assertFalse(node1.isRoot());
      assertFalse(node1.isSuper());
      assertFalse(node1.isLet());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssignAnd());
      assertFalse(node1.isName());
      assertFalse(node1.isNullishCoalesce());
      assertFalse(node1.isNull());
      assertFalse(node1.isDefaultValue());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isOr());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDestructuringLhs());
      assertFalse(node1.isOptChainCall());
      assertFalse(node1.isDo());
      assertFalse(node1.isForIn());
      assertFalse(node1.isVar());
      assertFalse(node1.isMemberVariableDef());
      assertFalse(node1.isForAwaitOf());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEQ());
      assertFalse(node1.isComputedProp());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isSub());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringLit());
      assertFalse(node1.isArrayPattern());
      assertFalse(node1.isExportSpec());
      assertFalse(node1.isDestructuringPattern());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isAssignNullishCoalesce());
      assertFalse(node1.isNormalBlock());
      assertFalse(node1.isSHEQ());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isClassMembers());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIndexSignature());
      assertFalse(node1.isThis());
      assertFalse(node1.isTemplateLitSub());
      assertFalse(node1.isImportMeta());
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(node0, node1);
      assertSame(node1, node0);
      
      String string0 = jSTypeRegistry0.getReadableTypeNameNoDeref(node0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(string0);
      assertEquals("?", string0);
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isExponent());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isExport());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLet());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isSHEQ());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasParent());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isForOf());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isThis());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSub());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isIn());
      assertFalse(node0.hasTwoChildren());
      assertTrue(node0.isMemberFunctionDef());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isTemplateLit());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isSuper());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isYield());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAwait());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRoot());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isEQ());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isForIn());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isRest());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNeg());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isTry());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isConst());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isInc());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSpread());
      assertFalse(node0.isCall());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isDec());
      assertFalse(node0.isInterfaceMembers());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(Token.MEMBER_FUNCTION_DEF, node0.getToken());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(node0, node1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      JSTypeNative jSTypeNative0 = JSTypeNative.ALL_TYPE;
      Iterable<ObjectType> iterable0 = jSTypeRegistry0.getEachReferenceTypeWithProperty("~&/C)/s'U");
      assertNotNull(iterable0);
      
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.NUMBER_TYPE;
      Token token0 = Token.MODULE_BODY;
      Node node0 = Node.newString(token0, "&2eE.");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isNeg());
      assertFalse(node0.isParamList());
      assertFalse(node0.isForIn());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isEQ());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isTrue());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(Token.MODULE_BODY, node0.getToken());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isRoot());
      assertFalse(node0.isComma());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.hasParent());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComputedProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isInc());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isSub());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExportSpecs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertTrue(node0.isModuleBody());
      assertFalse(node0.isExport());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isLet());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isForAwaitOf());
      assertEquals("&2eE.", node0.getString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isConst());
      assertFalse(node0.isSuper());
      assertFalse(node0.isYield());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAwait());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isSpread());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isRest());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isClass());
      assertFalse(node0.isIf());
      assertFalse(node0.isImport());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isScript());
      
      TemplateType templateType0 = jSTypeRegistry0.createTemplateTypeWithTransformation("IIterableResult", node0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateType0);
      assertFalse(node0.isNeg());
      assertFalse(node0.isParamList());
      assertFalse(node0.isForIn());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isEQ());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isTrue());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(Token.MODULE_BODY, node0.getToken());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isRoot());
      assertFalse(node0.isComma());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.hasParent());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComputedProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isInc());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isSub());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExportSpecs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertTrue(node0.isModuleBody());
      assertFalse(node0.isExport());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isLet());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isForAwaitOf());
      assertEquals("&2eE.", node0.getString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isConst());
      assertFalse(node0.isSuper());
      assertFalse(node0.isYield());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAwait());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isSpread());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isRest());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isClass());
      assertFalse(node0.isIf());
      assertFalse(node0.isImport());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isScript());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isSymbolValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isTypeTransformation());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals("IIterableResult", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNamedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionType());
      
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(jSType0);
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isInterface());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isBigIntValueType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isStringValueType());
      assertTrue(jSType0.isNullable());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isNamedType());
      assertTrue(jSType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isNullType());
      assertTrue(jSType0.hasDisplayName());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertTrue(jSType0.isVoidable());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isBooleanValueType());
      assertEquals(2, jSTypeNativeArray0.length);
      
      TemplateType templateType1 = jSTypeRegistry0.getGeneratorValueTemplate();
      assertFalse(templateType1.equals((Object)templateType0));
      assertNotNull(templateType1);
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isInterface());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isEnumType());
      assertEquals("VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNoType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isStructuralInterface());
      assertTrue(templateType1.isResolved());
      assertNotSame(templateType1, templateType0);
      
      TemplateType templateType2 = jSTypeRegistry0.getGeneratorValueTemplate();
      assertFalse(templateType2.equals((Object)templateType0));
      assertNotNull(templateType2);
      assertFalse(templateType2.isUnionType());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isTypeTransformation());
      assertTrue(templateType2.isSuccessfullyResolved());
      assertFalse(templateType2.isBigIntValueType());
      assertFalse(templateType2.isStringValueType());
      assertFalse(templateType2.isNoResolvedType());
      assertFalse(templateType2.isNoObjectType());
      assertFalse(templateType2.isNoType());
      assertFalse(templateType2.isNamedType());
      assertFalse(templateType2.isRawTypeOfTemplatizedType());
      assertFalse(templateType2.isOrdinaryFunction());
      assertTrue(templateType2.hasAnyTemplateTypesInternal());
      assertTrue(templateType2.isObject());
      assertFalse(templateType2.isNominalConstructorOrInterface());
      assertFalse(templateType2.isEnumElementType());
      assertFalse(templateType2.isLiteralObject());
      assertFalse(templateType2.isStructuralInterface());
      assertTrue(templateType2.isTemplateType());
      assertFalse(templateType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType2.isUnsuccessfullyResolved());
      assertFalse(templateType2.isTemplatizedType());
      assertFalse(templateType2.isFunctionType());
      assertTrue(templateType2.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertFalse(templateType2.hasCachedValues());
      assertFalse(templateType2.isSymbolValueType());
      assertFalse(templateType2.isNativeObjectType());
      assertFalse(templateType2.isCheckedUnknownType());
      assertFalse(templateType2.isNullType());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertEquals("VALUE", templateType2.getReferenceName());
      assertFalse(templateType2.isAllType());
      assertFalse(templateType2.isInterface());
      assertFalse(templateType2.isBooleanValueType());
      assertFalse(templateType2.isVoidType());
      assertEquals(0, templateType2.getTemplateParamCount());
      assertFalse(templateType2.isRecordType());
      assertFalse(templateType2.isConstructor());
      assertFalse(templateType2.isEnumType());
      assertSame(templateType2, templateType1);
      assertNotSame(templateType2, templateType0);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) templateType1, (JSType) templateType1, jSType0, jSType0, jSType0, (JSType) templateType1, jSType0, (JSType) templateType1, (JSType) templateType1, jSType0);
      assertFalse(templateType1.equals((Object)templateType0));
      assertNotNull(immutableList0);
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isInterface());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isBigIntValueType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isStringValueType());
      assertTrue(jSType0.isNullable());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isNamedType());
      assertTrue(jSType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isNullType());
      assertTrue(jSType0.hasDisplayName());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertTrue(jSType0.isVoidable());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isInterface());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isEnumType());
      assertEquals("VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNoType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isStructuralInterface());
      assertTrue(templateType1.isResolved());
      assertEquals(10, immutableList0.size());
      assertEquals(2, jSTypeNativeArray0.length);
      assertNotSame(templateType1, templateType0);
      assertSame(templateType1, templateType2);
      
      AbstractMap.SimpleImmutableEntry<FunctionType.Builder, Comparable<String>>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<FunctionType.Builder, Comparable<String>>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 1);
      FunctionType.Builder functionType_Builder0 = FunctionType.builder(jSTypeRegistry0);
      assertNotNull(functionType_Builder0);
      
      ImmutableList<TemplateType> immutableList1 = ImmutableList.of(templateType2, templateType0, templateType0, templateType0);
      assertFalse(templateType0.equals((Object)templateType2));
      assertFalse(templateType0.equals((Object)templateType1));
      assertFalse(templateType2.equals((Object)templateType0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(immutableList1);
      assertEquals(4, immutableList1.size());
      assertFalse(node0.isNeg());
      assertFalse(node0.isParamList());
      assertFalse(node0.isForIn());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isEQ());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isTrue());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(Token.MODULE_BODY, node0.getToken());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isRoot());
      assertFalse(node0.isComma());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.hasParent());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComputedProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isInc());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isSub());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExportSpecs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertTrue(node0.isModuleBody());
      assertFalse(node0.isExport());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isLet());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isForAwaitOf());
      assertEquals("&2eE.", node0.getString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isConst());
      assertFalse(node0.isSuper());
      assertFalse(node0.isYield());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAwait());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isSpread());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isRest());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isClass());
      assertFalse(node0.isIf());
      assertFalse(node0.isImport());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isScript());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isSymbolValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isTypeTransformation());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals("IIterableResult", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNamedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType2.isUnionType());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isTypeTransformation());
      assertTrue(templateType2.isSuccessfullyResolved());
      assertFalse(templateType2.isBigIntValueType());
      assertFalse(templateType2.isStringValueType());
      assertFalse(templateType2.isNoResolvedType());
      assertFalse(templateType2.isNoObjectType());
      assertFalse(templateType2.isNoType());
      assertFalse(templateType2.isNamedType());
      assertFalse(templateType2.isRawTypeOfTemplatizedType());
      assertFalse(templateType2.isOrdinaryFunction());
      assertTrue(templateType2.hasAnyTemplateTypesInternal());
      assertTrue(templateType2.isObject());
      assertFalse(templateType2.isNominalConstructorOrInterface());
      assertFalse(templateType2.isEnumElementType());
      assertFalse(templateType2.isLiteralObject());
      assertFalse(templateType2.isStructuralInterface());
      assertTrue(templateType2.isTemplateType());
      assertFalse(templateType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType2.isUnsuccessfullyResolved());
      assertFalse(templateType2.isTemplatizedType());
      assertFalse(templateType2.isFunctionType());
      assertTrue(templateType2.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertFalse(templateType2.hasCachedValues());
      assertFalse(templateType2.isSymbolValueType());
      assertFalse(templateType2.isNativeObjectType());
      assertFalse(templateType2.isCheckedUnknownType());
      assertFalse(templateType2.isNullType());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertEquals("VALUE", templateType2.getReferenceName());
      assertFalse(templateType2.isAllType());
      assertFalse(templateType2.isInterface());
      assertFalse(templateType2.isBooleanValueType());
      assertFalse(templateType2.isVoidType());
      assertEquals(0, templateType2.getTemplateParamCount());
      assertFalse(templateType2.isRecordType());
      assertFalse(templateType2.isConstructor());
      assertFalse(templateType2.isEnumType());
      assertTrue(immutableList1.contains(templateType2));
      assertNotSame(templateType0, templateType2);
      assertNotSame(templateType0, templateType1);
      assertSame(templateType2, templateType1);
      assertNotSame(templateType2, templateType0);
      
      FunctionType.Builder functionType_Builder1 = functionType_Builder0.withTemplateKeys(immutableList1);
      assertFalse(templateType0.equals((Object)templateType2));
      assertFalse(templateType0.equals((Object)templateType1));
      assertFalse(templateType2.equals((Object)templateType0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(functionType_Builder1);
      assertEquals(4, immutableList1.size());
      assertFalse(node0.isNeg());
      assertFalse(node0.isParamList());
      assertFalse(node0.isForIn());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isEQ());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isTrue());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(Token.MODULE_BODY, node0.getToken());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isRoot());
      assertFalse(node0.isComma());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.hasParent());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComputedProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isInc());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isSub());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExportSpecs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertTrue(node0.isModuleBody());
      assertFalse(node0.isExport());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isLet());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isForAwaitOf());
      assertEquals("&2eE.", node0.getString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isConst());
      assertFalse(node0.isSuper());
      assertFalse(node0.isYield());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAwait());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isSpread());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isRest());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isClass());
      assertFalse(node0.isIf());
      assertFalse(node0.isImport());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isScript());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isSymbolValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isTypeTransformation());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals("IIterableResult", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNamedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType2.isUnionType());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isTypeTransformation());
      assertTrue(templateType2.isSuccessfullyResolved());
      assertFalse(templateType2.isBigIntValueType());
      assertFalse(templateType2.isStringValueType());
      assertFalse(templateType2.isNoResolvedType());
      assertFalse(templateType2.isNoObjectType());
      assertFalse(templateType2.isNoType());
      assertFalse(templateType2.isNamedType());
      assertFalse(templateType2.isRawTypeOfTemplatizedType());
      assertFalse(templateType2.isOrdinaryFunction());
      assertTrue(templateType2.hasAnyTemplateTypesInternal());
      assertTrue(templateType2.isObject());
      assertFalse(templateType2.isNominalConstructorOrInterface());
      assertFalse(templateType2.isEnumElementType());
      assertFalse(templateType2.isLiteralObject());
      assertFalse(templateType2.isStructuralInterface());
      assertTrue(templateType2.isTemplateType());
      assertFalse(templateType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType2.isUnsuccessfullyResolved());
      assertFalse(templateType2.isTemplatizedType());
      assertFalse(templateType2.isFunctionType());
      assertTrue(templateType2.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertFalse(templateType2.hasCachedValues());
      assertFalse(templateType2.isSymbolValueType());
      assertFalse(templateType2.isNativeObjectType());
      assertFalse(templateType2.isCheckedUnknownType());
      assertFalse(templateType2.isNullType());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertEquals("VALUE", templateType2.getReferenceName());
      assertFalse(templateType2.isAllType());
      assertFalse(templateType2.isInterface());
      assertFalse(templateType2.isBooleanValueType());
      assertFalse(templateType2.isVoidType());
      assertEquals(0, templateType2.getTemplateParamCount());
      assertFalse(templateType2.isRecordType());
      assertFalse(templateType2.isConstructor());
      assertFalse(templateType2.isEnumType());
      assertTrue(immutableList1.contains(templateType2));
      assertSame(functionType_Builder0, functionType_Builder1);
      assertSame(functionType_Builder1, functionType_Builder0);
      assertNotSame(templateType0, templateType2);
      assertNotSame(templateType0, templateType1);
      assertSame(templateType2, templateType1);
      assertNotSame(templateType2, templateType0);
      
      AbstractMap.SimpleEntry<FunctionType.Builder, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<FunctionType.Builder, String>(functionType_Builder1, "IArrayLike");
      assertFalse(templateType0.equals((Object)templateType2));
      assertFalse(templateType0.equals((Object)templateType1));
      assertFalse(templateType2.equals((Object)templateType0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(abstractMap_SimpleEntry0);
      assertEquals(4, immutableList1.size());
      assertFalse(node0.isNeg());
      assertFalse(node0.isParamList());
      assertFalse(node0.isForIn());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isEQ());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isTrue());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(Token.MODULE_BODY, node0.getToken());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isRoot());
      assertFalse(node0.isComma());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.hasParent());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComputedProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isInc());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isSub());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExportSpecs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertTrue(node0.isModuleBody());
      assertFalse(node0.isExport());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isLet());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isForAwaitOf());
      assertEquals("&2eE.", node0.getString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isConst());
      assertFalse(node0.isSuper());
      assertFalse(node0.isYield());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAwait());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isSpread());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isRest());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isClass());
      assertFalse(node0.isIf());
      assertFalse(node0.isImport());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isScript());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isSymbolValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isTypeTransformation());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals("IIterableResult", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNamedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType2.isUnionType());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isTypeTransformation());
      assertTrue(templateType2.isSuccessfullyResolved());
      assertFalse(templateType2.isBigIntValueType());
      assertFalse(templateType2.isStringValueType());
      assertFalse(templateType2.isNoResolvedType());
      assertFalse(templateType2.isNoObjectType());
      assertFalse(templateType2.isNoType());
      assertFalse(templateType2.isNamedType());
      assertFalse(templateType2.isRawTypeOfTemplatizedType());
      assertFalse(templateType2.isOrdinaryFunction());
      assertTrue(templateType2.hasAnyTemplateTypesInternal());
      assertTrue(templateType2.isObject());
      assertFalse(templateType2.isNominalConstructorOrInterface());
      assertFalse(templateType2.isEnumElementType());
      assertFalse(templateType2.isLiteralObject());
      assertFalse(templateType2.isStructuralInterface());
      assertTrue(templateType2.isTemplateType());
      assertFalse(templateType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType2.isUnsuccessfullyResolved());
      assertFalse(templateType2.isTemplatizedType());
      assertFalse(templateType2.isFunctionType());
      assertTrue(templateType2.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertFalse(templateType2.hasCachedValues());
      assertFalse(templateType2.isSymbolValueType());
      assertFalse(templateType2.isNativeObjectType());
      assertFalse(templateType2.isCheckedUnknownType());
      assertFalse(templateType2.isNullType());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertEquals("VALUE", templateType2.getReferenceName());
      assertFalse(templateType2.isAllType());
      assertFalse(templateType2.isInterface());
      assertFalse(templateType2.isBooleanValueType());
      assertFalse(templateType2.isVoidType());
      assertEquals(0, templateType2.getTemplateParamCount());
      assertFalse(templateType2.isRecordType());
      assertFalse(templateType2.isConstructor());
      assertFalse(templateType2.isEnumType());
      assertTrue(immutableList1.contains(templateType2));
      
      AbstractMap.SimpleImmutableEntry<FunctionType.Builder, Comparable<String>> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<FunctionType.Builder, Comparable<String>>(abstractMap_SimpleEntry0);
      assertFalse(templateType0.equals((Object)templateType2));
      assertFalse(templateType0.equals((Object)templateType1));
      assertFalse(templateType2.equals((Object)templateType0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertEquals(4, immutableList1.size());
      assertFalse(node0.isNeg());
      assertFalse(node0.isParamList());
      assertFalse(node0.isForIn());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isEQ());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isTrue());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(Token.MODULE_BODY, node0.getToken());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isRoot());
      assertFalse(node0.isComma());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.hasParent());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComputedProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isInc());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isSub());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExportSpecs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertTrue(node0.isModuleBody());
      assertFalse(node0.isExport());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isLet());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isForAwaitOf());
      assertEquals("&2eE.", node0.getString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isConst());
      assertFalse(node0.isSuper());
      assertFalse(node0.isYield());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAwait());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isSpread());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isRest());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isClass());
      assertFalse(node0.isIf());
      assertFalse(node0.isImport());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isScript());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isSymbolValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isTypeTransformation());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals("IIterableResult", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNamedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType2.isUnionType());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isTypeTransformation());
      assertTrue(templateType2.isSuccessfullyResolved());
      assertFalse(templateType2.isBigIntValueType());
      assertFalse(templateType2.isStringValueType());
      assertFalse(templateType2.isNoResolvedType());
      assertFalse(templateType2.isNoObjectType());
      assertFalse(templateType2.isNoType());
      assertFalse(templateType2.isNamedType());
      assertFalse(templateType2.isRawTypeOfTemplatizedType());
      assertFalse(templateType2.isOrdinaryFunction());
      assertTrue(templateType2.hasAnyTemplateTypesInternal());
      assertTrue(templateType2.isObject());
      assertFalse(templateType2.isNominalConstructorOrInterface());
      assertFalse(templateType2.isEnumElementType());
      assertFalse(templateType2.isLiteralObject());
      assertFalse(templateType2.isStructuralInterface());
      assertTrue(templateType2.isTemplateType());
      assertFalse(templateType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType2.isUnsuccessfullyResolved());
      assertFalse(templateType2.isTemplatizedType());
      assertFalse(templateType2.isFunctionType());
      assertTrue(templateType2.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertFalse(templateType2.hasCachedValues());
      assertFalse(templateType2.isSymbolValueType());
      assertFalse(templateType2.isNativeObjectType());
      assertFalse(templateType2.isCheckedUnknownType());
      assertFalse(templateType2.isNullType());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertEquals("VALUE", templateType2.getReferenceName());
      assertFalse(templateType2.isAllType());
      assertFalse(templateType2.isInterface());
      assertFalse(templateType2.isBooleanValueType());
      assertFalse(templateType2.isVoidType());
      assertEquals(0, templateType2.getTemplateParamCount());
      assertFalse(templateType2.isRecordType());
      assertFalse(templateType2.isConstructor());
      assertFalse(templateType2.isEnumType());
      assertTrue(immutableList1.contains(templateType2));
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      ImmutableList<AbstractMap.SimpleImmutableEntry<FunctionType.Builder, Comparable<String>>> immutableList2 = ImmutableList.copyOf(abstractMap_SimpleImmutableEntryArray0);
      assertNotNull(immutableList2);
      assertEquals(1, immutableList2.size());
      assertTrue(immutableList2.contains(abstractMap_SimpleImmutableEntry0));
      assertEquals(1, abstractMap_SimpleImmutableEntryArray0.length);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0, "&2eE.", immutableList0);
      assertFalse(templateType1.equals((Object)templateType0));
      assertNotNull(noResolvedType0);
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isNamedType());
      assertEquals("&2eE.", noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getGoogModuleId());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isInterface());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isBigIntValueType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isStringValueType());
      assertTrue(jSType0.isNullable());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isNamedType());
      assertTrue(jSType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isNullType());
      assertTrue(jSType0.hasDisplayName());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertTrue(jSType0.isVoidable());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isInterface());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isEnumType());
      assertEquals("VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNoType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isStructuralInterface());
      assertTrue(templateType1.isResolved());
      assertEquals(10, immutableList0.size());
      assertEquals(2, jSTypeNativeArray0.length);
      
      FunctionType functionType0 = noResolvedType0.getCanonicalRepresentation();
      assertFalse(templateType1.equals((Object)templateType0));
      assertNull(functionType0);
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isNamedType());
      assertEquals("&2eE.", noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getGoogModuleId());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isInterface());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isBigIntValueType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isStringValueType());
      assertTrue(jSType0.isNullable());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isNamedType());
      assertTrue(jSType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isNullType());
      assertTrue(jSType0.hasDisplayName());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertTrue(jSType0.isVoidable());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isInterface());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isEnumType());
      assertEquals("VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNoType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isStructuralInterface());
      assertTrue(templateType1.isResolved());
      assertEquals(10, immutableList0.size());
      assertEquals(2, jSTypeNativeArray0.length);
      assertNotSame(templateType1, templateType0);
      assertSame(templateType1, templateType2);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createFunctionTypeWithNewReturnType((FunctionType) null, noResolvedType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, set0);
      assertNotNull(jSTypeRegistry0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isNamedType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isObject());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0);
      assertNotNull(immutableList0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isNamedType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(8, immutableList0.size());
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createTemplatizedType((ObjectType) noResolvedType0, immutableList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -8
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      Node node0 = Node.newString("UNUSED_RETURN_T");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSub());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isInc());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isConst());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExport());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasParent());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.hasOneChild());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSuper());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isEQ());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRoot());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertTrue(node0.isString());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isTrue());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getLength());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isSpread());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isClass());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImport());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isForOf());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isNew());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignOr());
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, (String) null);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSub());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isInc());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isConst());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExport());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasParent());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.hasOneChild());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSuper());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isEQ());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRoot());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertTrue(node0.isString());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isTrue());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getLength());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isSpread());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isClass());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImport());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isForOf());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isNew());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignOr());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      
      JSTypeExpression jSTypeExpression1 = JSTypeExpression.makeOptionalArg(jSTypeExpression0);
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression1);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSub());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isInc());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isConst());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExport());
      assertTrue(node0.hasParent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.hasOneChild());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSuper());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isEQ());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRoot());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertTrue(node0.isString());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isTrue());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getLength());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isSpread());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isClass());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImport());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isForOf());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isNew());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignOr());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      ImmutableSet<String> immutableSet0 = jSTypeExpression1.getRecordPropertyNames();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(immutableSet0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSub());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isInc());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isConst());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExport());
      assertTrue(node0.hasParent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.hasOneChild());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSuper());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isEQ());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRoot());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertTrue(node0.isString());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isTrue());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getLength());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isSpread());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isClass());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImport());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isForOf());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isNew());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignOr());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, immutableSet0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSub());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isInc());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isConst());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExport());
      assertTrue(node0.hasParent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.hasOneChild());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSuper());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isEQ());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRoot());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertTrue(node0.isString());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isTrue());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getLength());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isSpread());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isClass());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImport());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isForOf());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isNew());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignOr());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      TemplateTypeReplacer templateTypeReplacer0 = TemplateTypeReplacer.forInference(jSTypeRegistry0, hashMap0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateTypeReplacer0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSub());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isInc());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isConst());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExport());
      assertTrue(node0.hasParent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.hasOneChild());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSuper());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isEQ());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRoot());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertTrue(node0.isString());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isTrue());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getLength());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isSpread());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isClass());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImport());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isForOf());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isNew());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignOr());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      JSType jSType0 = templateTypeReplacer0.caseNumberType();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSType0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSub());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isInc());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isConst());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExport());
      assertTrue(node0.hasParent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.hasOneChild());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSuper());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isEQ());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRoot());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertTrue(node0.isString());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isTrue());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getLength());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isSpread());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isClass());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImport());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isForOf());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isNew());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignOr());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isConstructor());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumType());
      assertTrue(jSType0.isNumberValueType());
      assertEquals("number", jSType0.getDisplayName());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isBigIntValueType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isUnionType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isFunctionType());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      jSTypeRegistry0.registerPropertyOnType((String) null, jSType0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSub());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isInc());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isConst());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExport());
      assertTrue(node0.hasParent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.hasOneChild());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSuper());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isEQ());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRoot());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertTrue(node0.isString());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isTrue());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getLength());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isSpread());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isClass());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImport());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isForOf());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isNew());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignOr());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isConstructor());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumType());
      assertTrue(jSType0.isNumberValueType());
      assertEquals("number", jSType0.getDisplayName());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isBigIntValueType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isUnionType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isFunctionType());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType((String) null);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateType0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSub());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isInc());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isConst());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExport());
      assertTrue(node0.hasParent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.hasOneChild());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSuper());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isEQ());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRoot());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertTrue(node0.isString());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isTrue());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getLength());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isSpread());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isClass());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImport());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isForOf());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isNew());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignOr());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isTemplateType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isRecordType());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      JSType jSType1 = jSTypeRegistry0.createNullableType(jSType0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSType1);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSub());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isInc());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isConst());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExport());
      assertTrue(node0.hasParent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.hasOneChild());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSuper());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isEQ());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRoot());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertTrue(node0.isString());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isTrue());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getLength());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isSpread());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isClass());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImport());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isForOf());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isNew());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignOr());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isConstructor());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumType());
      assertTrue(jSType0.isNumberValueType());
      assertEquals("number", jSType0.getDisplayName());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isBigIntValueType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isUnionType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType1.isRecordType());
      assertFalse(jSType1.isConstructor());
      assertFalse(jSType1.isOrdinaryFunction());
      assertTrue(jSType1.isResolved());
      assertFalse(jSType1.isNominalConstructorOrInterface());
      assertFalse(jSType1.isInterface());
      assertFalse(jSType1.isAllType());
      assertFalse(jSType1.isRawTypeOfTemplatizedType());
      assertFalse(jSType1.isNoObjectType());
      assertFalse(jSType1.isNativeObjectType());
      assertFalse(jSType1.isNoType());
      assertFalse(jSType1.isNamedType());
      assertTrue(jSType1.isSuccessfullyResolved());
      assertFalse(jSType1.isStructuralInterface());
      assertFalse(jSType1.isFunctionType());
      assertFalse(jSType1.isLiteralObject());
      assertFalse(jSType1.isTemplateType());
      assertFalse(jSType1.isUnsuccessfullyResolved());
      assertFalse(jSType1.isVoidType());
      assertFalse(jSType1.isFunctionPrototypeType());
      assertFalse(jSType1.isTemplatizedType());
      assertFalse(jSType1.isEnumElementType());
      assertFalse(jSType1.isStringValueType());
      assertFalse(jSType1.isCheckedUnknownType());
      assertFalse(jSType1.isNullType());
      assertFalse(jSType1.isBooleanValueType());
      assertTrue(jSType1.isUnionType());
      assertFalse(jSType1.isSymbolValueType());
      assertFalse(jSType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType1.isBigIntValueType());
      assertFalse(jSType1.isNumberValueType());
      assertFalse(jSType1.isNoResolvedType());
      assertEquals(0, jSType1.getTemplateParamCount());
      assertFalse(jSType1.isEnumType());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap1 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      ImmutableList<TemplateType> immutableList0 = jSTypeRegistry0.maybeGetTemplateTypesOfBuiltin("UNUSED_RETURN_T");
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNull(immutableList0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSub());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isInc());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isConst());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExport());
      assertTrue(node0.hasParent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.hasOneChild());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSuper());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isEQ());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRoot());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertTrue(node0.isString());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isTrue());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getLength());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isSpread());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isClass());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImport());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isForOf());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isNew());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignOr());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      JSType jSType2 = jSTypeRegistry0.createNullableType(jSType0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertTrue(jSType2.equals((Object)jSType1));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSType2);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSub());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isInc());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isConst());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExport());
      assertTrue(node0.hasParent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.hasOneChild());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSuper());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isEQ());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRoot());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertTrue(node0.isString());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isTrue());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getLength());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isSpread());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isClass());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImport());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isForOf());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isNew());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignOr());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isConstructor());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumType());
      assertTrue(jSType0.isNumberValueType());
      assertEquals("number", jSType0.getDisplayName());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isBigIntValueType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isUnionType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType2.isVoidType());
      assertFalse(jSType2.isFunctionPrototypeType());
      assertFalse(jSType2.isEnumType());
      assertFalse(jSType2.isTemplatizedType());
      assertFalse(jSType2.isCheckedUnknownType());
      assertEquals(0, jSType2.getTemplateParamCount());
      assertFalse(jSType2.isStringValueType());
      assertTrue(jSType2.isSuccessfullyResolved());
      assertFalse(jSType2.isEnumElementType());
      assertFalse(jSType2.isBigIntValueType());
      assertTrue(jSType2.isUnionType());
      assertFalse(jSType2.isRawTypeOfTemplatizedType());
      assertFalse(jSType2.isNoType());
      assertFalse(jSType2.isSymbolValueType());
      assertFalse(jSType2.isNullType());
      assertFalse(jSType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType2.isBooleanValueType());
      assertFalse(jSType2.isNoObjectType());
      assertFalse(jSType2.isNoResolvedType());
      assertFalse(jSType2.isNumberValueType());
      assertFalse(jSType2.isConstructor());
      assertFalse(jSType2.isRecordType());
      assertFalse(jSType2.isFunctionType());
      assertFalse(jSType2.isInterface());
      assertFalse(jSType2.isLiteralObject());
      assertFalse(jSType2.isNativeObjectType());
      assertFalse(jSType2.isAllType());
      assertFalse(jSType2.isUnsuccessfullyResolved());
      assertFalse(jSType2.isTemplateType());
      assertTrue(jSType2.isResolved());
      assertFalse(jSType2.isNominalConstructorOrInterface());
      assertFalse(jSType2.isStructuralInterface());
      assertFalse(jSType2.isOrdinaryFunction());
      assertFalse(jSType2.isNamedType());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertNotSame(jSType2, jSType1);
      
      ImmutableList<JSType> immutableList1 = ImmutableList.of(jSType0, jSType0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(immutableList1);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSub());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isInc());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isConst());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExport());
      assertTrue(node0.hasParent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.hasOneChild());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSuper());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isEQ());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRoot());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertTrue(node0.isString());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isTrue());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getLength());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isSpread());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isClass());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImport());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isForOf());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isNew());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignOr());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isConstructor());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumType());
      assertTrue(jSType0.isNumberValueType());
      assertEquals("number", jSType0.getDisplayName());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isBigIntValueType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isUnionType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isFunctionType());
      assertEquals(2, immutableList1.size());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, immutableList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      assertNotNull(templateType0);
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      assertNotNull(templatizedType0);
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isAllType());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isInterface());
      assertTrue(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertFalse(templatizedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.isFunctionType());
      assertFalse(templatizedType0.isLiteralObject());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isNoType());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertTrue(templatizedType0.isResolved());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, treeSet0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      HashMap<TemplateType, JSType> hashMap1 = new HashMap<TemplateType, JSType>();
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(errorReporter0);
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry2);
      
      Token token0 = Token.DECLARE;
      Token token1 = Token.TYPEOF;
      Node node0 = new Node(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isRest());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isClass());
      assertFalse(node0.isInc());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isImport());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignAnd());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isRecordType());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isForOf());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isSub());
      assertFalse(node0.isCatch());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isNeg());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isString());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isComputedFieldDef());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isDec());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasParent());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isAwait());
      assertFalse(node0.isSuper());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isBreak());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isSpread());
      assertFalse(node0.isCast());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isNE());
      assertTrue(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(Token.TYPEOF, node0.getToken());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExport());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEQ());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isExponent());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isYield());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRoot());
      
      Node node1 = new Node(token0, node0);
      assertFalse(token0.equals((Object)token1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node1);
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isRest());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isClass());
      assertFalse(node0.isInc());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isImport());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignAnd());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isRecordType());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isForOf());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isSub());
      assertFalse(node0.isCatch());
      assertFalse(node0.isMemberVariableDef());
      assertTrue(node0.hasParent());
      assertFalse(node0.isNeg());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertFalse(node0.isString());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isComputedFieldDef());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isDec());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isAwait());
      assertFalse(node0.isSuper());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isBreak());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isSpread());
      assertFalse(node0.isCast());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isNE());
      assertTrue(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isForIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(Token.TYPEOF, node0.getToken());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExport());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEQ());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isExponent());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isYield());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRoot());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isComputedFieldDef());
      assertFalse(node1.isTemplateLitSub());
      assertFalse(node1.isCall());
      assertFalse(node1.isObjectPattern());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSuper());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAwait());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isBitNot());
      assertFalse(node1.isCast());
      assertFalse(node1.isExport());
      assertFalse(node1.isImportSpecs());
      assertFalse(node1.isExponent());
      assertFalse(node1.isForAwaitOf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSHNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTemplateLit());
      assertFalse(node1.isExportSpecs());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertNull(node1.getOriginalName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isAssignNullishCoalesce());
      assertFalse(node1.isYield());
      assertFalse(node1.isSub());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isSHEQ());
      assertFalse(node1.isStringLit());
      assertFalse(node1.isComma());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isForIn());
      assertFalse(node1.isObjectRest());
      assertFalse(node1.hasParent());
      assertFalse(node1.isImportMeta());
      assertFalse(node1.isModuleBody());
      assertFalse(node1.isImportStar());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isTaggedTemplateLit());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLet());
      assertFalse(node1.isAssignAnd());
      assertFalse(node1.isEQ());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDestructuringPattern());
      assertFalse(node1.hasTwoChildren());
      assertFalse(node1.isOptChainCall());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignExponent());
      assertFalse(node1.isMemberFunctionDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isArrayPattern());
      assertFalse(node1.isNormalBlock());
      assertFalse(node1.isOr());
      assertTrue(node1.hasZeroOrOneChild());
      assertFalse(node1.isNullishCoalesce());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isDec());
      assertFalse(node1.isClassMembers());
      assertFalse(node1.isWhile());
      assertFalse(node1.isIndexSignature());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOptChainGetProp());
      assertFalse(node1.isMemberVariableDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isRoot());
      assertFalse(node1.isRest());
      assertFalse(node1.isDestructuringLhs());
      assertFalse(node1.isInterfaceMembers());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isComputedProp());
      assertFalse(node1.isExportSpec());
      assertFalse(node1.isNot());
      assertFalse(node1.isDefaultValue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isTemplateLitString());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isImportSpec());
      assertFalse(node1.isConst());
      assertFalse(node1.isIf());
      assertFalse(node1.isString());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCallSignature());
      assertFalse(node1.isOptChainGetElem());
      assertFalse(node1.isVanillaFor());
      assertFalse(node1.isForOf());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isHook());
      assertEquals(Token.DECLARE, node1.getToken());
      assertFalse(node1.isTry());
      assertFalse(node1.isMemberFieldDef());
      assertFalse(node1.isBigInt());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isNeg());
      assertFalse(node1.isSpread());
      assertFalse(node1.isScript());
      assertFalse(node1.isRecordType());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignOr());
      assertFalse(node1.isImport());
      assertFalse(node1.isClass());
      assertFalse(node1.isLabel());
      
      // Undeclared exception!
      try { 
        jSTypeRegistry1.createTypeFromCommentNode(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node in type expression: DECLARE
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      assertNotNull(templateType0);
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isSymbolValueType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isObject());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isInterface());
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      assertNotNull(templatizedType0);
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isSymbolValueType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isObject());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isInterface());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isLiteralObject());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertFalse(templatizedType0.isNoType());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isRecordType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isAllType());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isFunctionType());
      assertTrue(templatizedType0.isResolved());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertTrue(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isNoResolvedType());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isAnonymous());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, treeSet0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      Token token0 = Token.ENUM;
      Node node0 = new Node(token0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertEquals(Token.ENUM, node0.getToken());
      assertFalse(node0.isIn());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isForOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isConst());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isDestructuringPattern());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isYield());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isDo());
      assertFalse(node0.isEQ());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLet());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isSub());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isNE());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isAwait());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.hasParent());
      assertFalse(node0.isForIn());
      assertFalse(node0.isRoot());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSuper());
      assertFalse(node0.isSpread());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isImport());
      assertFalse(node0.isWhile());
      assertFalse(node0.isClass());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isExport());
      assertFalse(node0.isExponent());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isNeg());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isScript());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRest());
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createTypeFromCommentNode(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node in type expression: ENUM
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, set0);
      assertNotNull(jSTypeRegistry0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isNamedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      
      Node node0 = noResolvedType0.getOwnPropertyDefSite("B");
      assertNull(node0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isNamedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(set0.contains("B"));
      
      String string0 = locale0.getDisplayLanguage();
      assertNotNull(string0);
      assertEquals("English", string0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      assertNotNull(templateType0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(set0.contains("B"));
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[1];
      JSTypeNative jSTypeNative0 = JSTypeNative.THENABLE_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      RecordType recordType0 = (RecordType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(recordType0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isStructuralInterface());
      assertTrue(recordType0.isSuccessfullyResolved());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isTemplatizedType());
      assertFalse(recordType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType0.isBigIntValueType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isStringValueType());
      assertTrue(recordType0.isStructuralType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNominalConstructorOrInterface());
      assertTrue(recordType0.isResolved());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isUnsuccessfullyResolved());
      assertFalse(recordType0.isFunctionType());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isLiteralObject());
      assertFalse(recordType0.isAnonymous());
      assertTrue(recordType0.isRecordType());
      assertTrue(recordType0.matchesObjectContext());
      assertEquals(0, recordType0.getTemplateParamCount());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isRawTypeOfTemplatizedType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isSymbolValueType());
      assertFalse(set0.contains("B"));
      assertEquals(1, jSTypeNativeArray0.length);
      
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) noResolvedType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, jSTypeArray0);
      assertNotNull(functionType0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isNamedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(functionType0.isSymbolValueType());
      assertFalse(functionType0.isAbstract());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(functionType0.isTemplatizedType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isSuccessfullyResolved());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isRawTypeOfTemplatizedType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isUnsuccessfullyResolved());
      assertFalse(functionType0.isLiteralObject());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNominalConstructorOrInterface());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isAnonymous());
      assertTrue(functionType0.matchesObjectContext());
      assertEquals(0, functionType0.getTemplateParamCount());
      assertFalse(functionType0.isRecordType());
      assertNull(functionType0.getClosurePrimitive());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNamedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNoResolvedType());
      assertTrue(functionType0.isResolved());
      assertFalse(functionType0.isBigIntValueType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNativeObjectType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isStructuralInterface());
      assertNull(functionType0.getGoogModuleId());
      assertFalse(set0.contains("B"));
      assertEquals(1, jSTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashMap<String, EnumType> hashMap0 = new HashMap<String, EnumType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry0.createRecordType(hashMap0);
      assertNotNull(instanceObjectType0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isAllType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertTrue(instanceObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isLiteralObject());
      
      TypeStringBuilder typeStringBuilder0 = new TypeStringBuilder(false);
      assertNotNull(typeStringBuilder0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "baseType");
      assertNotNull(templateType0);
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals("baseType", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoObjectType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      assertNotNull(templateType1);
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals("baseType", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoObjectType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType1.isNoResolvedType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isBigIntValueType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isNoType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isTemplatizedType());
      assertEquals("baseType", templateType1.getReferenceName());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isResolved());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isBooleanValueType());
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      
      templateType1.appendTo(typeStringBuilder0);
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals("baseType", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoObjectType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType1.isNoResolvedType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isBigIntValueType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isNoType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isTemplatizedType());
      assertEquals("baseType", templateType1.getReferenceName());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isResolved());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isBooleanValueType());
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      
      InstanceObjectType instanceObjectType1 = (InstanceObjectType)jSTypeRegistry0.findCommonSuperObject(instanceObjectType0, instanceObjectType0);
      assertNotNull(instanceObjectType1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isAllType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertTrue(instanceObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType1.isBooleanValueType());
      assertFalse(instanceObjectType1.isAllType());
      assertTrue(instanceObjectType1.isNativeObjectType());
      assertFalse(instanceObjectType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType1.isSymbolValueType());
      assertFalse(instanceObjectType1.isTemplateType());
      assertFalse(instanceObjectType1.isNullType());
      assertFalse(instanceObjectType1.isFunctionType());
      assertFalse(instanceObjectType1.isTemplatizedType());
      assertFalse(instanceObjectType1.isEnumElementType());
      assertFalse(instanceObjectType1.isVoidType());
      assertTrue(instanceObjectType1.isInstanceType());
      assertFalse(instanceObjectType1.isRecordType());
      assertFalse(instanceObjectType1.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType1.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType1.isNumberValueType());
      assertFalse(instanceObjectType1.isFunctionPrototypeType());
      assertFalse(instanceObjectType1.isCheckedUnknownType());
      assertFalse(instanceObjectType1.hasCachedValues());
      assertFalse(instanceObjectType1.isConstructor());
      assertFalse(instanceObjectType1.isNoType());
      assertFalse(instanceObjectType1.isNoObjectType());
      assertTrue(instanceObjectType1.matchesObjectContext());
      assertEquals(2, instanceObjectType1.getTemplateParamCount());
      assertTrue(instanceObjectType1.isObject());
      assertFalse(instanceObjectType1.isUnsuccessfullyResolved());
      assertTrue(instanceObjectType1.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType1.isUnionType());
      assertTrue(instanceObjectType1.isSuccessfullyResolved());
      assertFalse(instanceObjectType1.isStringValueType());
      assertFalse(instanceObjectType1.isLiteralObject());
      assertFalse(instanceObjectType1.isNoResolvedType());
      assertFalse(instanceObjectType1.isAnonymous());
      assertFalse(instanceObjectType1.isBigIntValueType());
      assertFalse(instanceObjectType1.isInterface());
      assertFalse(instanceObjectType1.isStructuralInterface());
      assertFalse(instanceObjectType1.isNominalConstructorOrInterface());
      assertTrue(instanceObjectType1.isResolved());
      assertFalse(instanceObjectType1.isNamedType());
      assertFalse(instanceObjectType1.isOrdinaryFunction());
      assertSame(instanceObjectType0, instanceObjectType1);
      assertSame(instanceObjectType1, instanceObjectType0);
      
      Set<String> set0 = instanceObjectType0.getOwnPropertyNames();
      assertNotNull(set0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isAllType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertTrue(instanceObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("baseType"));
      assertSame(instanceObjectType0, instanceObjectType1);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, set0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isAllType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertTrue(instanceObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("baseType"));
      
      ImmutableList<TemplateType> immutableList0 = jSTypeRegistry1.maybeGetTemplateTypesOfBuiltin("^");
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNull(immutableList0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isAllType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertTrue(instanceObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("baseType"));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(instanceObjectType0, instanceObjectType1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      
      boolean boolean0 = jSTypeRegistry0.isForwardDeclaredType("g");
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(boolean0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry1.getReadableTypeNameNoDeref((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertNotNull(jSTypeRegistry0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("IOBJECT_VALUE");
      assertNotNull(templateType0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isTypeTransformation());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      TypeStringBuilder typeStringBuilder0 = new TypeStringBuilder(false);
      assertNotNull(typeStringBuilder0);
      
      templateType0.appendTo(typeStringBuilder0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isTypeTransformation());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      TemplateType templateType1 = (TemplateType)jSTypeRegistry0.findCommonSuperObject(templateType0, templateType0);
      assertNotNull(templateType1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isTypeTransformation());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNumberValueType());
      assertEquals("IOBJECT_VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isOrdinaryFunction());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.hasCachedValues());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isNullType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      ImmutableList<TemplateType> immutableList0 = jSTypeRegistry1.maybeGetTemplateTypesOfBuiltin("g");
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNull(immutableList0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("g"));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      
      boolean boolean0 = linkedHashSet0.add("");
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertTrue(linkedHashSet0.contains(""));
      
      boolean boolean1 = jSTypeRegistry1.isForwardDeclaredType((String) null);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertTrue(linkedHashSet0.contains(""));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      
      String string0 = JSTypeRegistry.OBJECT_ELEMENT_TEMPLATE;
      assertNotNull(string0);
      assertEquals("IOBJECT_VALUE", string0);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry1.createAnonymousObjectType((JSDocInfo) null);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(prototypeObjectType0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(prototypeObjectType0.isNoType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(prototypeObjectType0.isBigIntValueType());
      assertTrue(prototypeObjectType0.isSuccessfullyResolved());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isNominalConstructorOrInterface());
      assertFalse(prototypeObjectType0.isInterface());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertTrue(prototypeObjectType0.isLiteralObject());
      assertTrue(prototypeObjectType0.isAnonymous());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isTemplatizedType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isNamedType());
      assertFalse(prototypeObjectType0.isStructuralInterface());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isUnsuccessfullyResolved());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(prototypeObjectType0.isSymbolValueType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertTrue(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertEquals(0, prototypeObjectType0.getTemplateParamCount());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(linkedHashSet0.contains(string0));
      assertTrue(linkedHashSet0.contains(""));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNamedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      
      Node node0 = noResolvedType0.getPropertyDefSite("IOBJECT_VALUE");
      assertNull(node0);
      assertFalse(noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNamedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      
      TemplateType templateType0 = jSTypeRegistry0.getAsyncIterableTemplate();
      assertNotNull(templateType0);
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isSymbolValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      
      jSTypeRegistry0.registerNonLegacyClosureNamespace("AsyncIterable", (Node) null, noResolvedType0);
      assertFalse(noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNamedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry0.buildRecordTypeFromObject(templateType0);
      assertNotNull(instanceObjectType0);
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isSymbolValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isInstanceType());
      
      String string0 = instanceObjectType0.toString();
      assertNotNull(string0);
      assertEquals("Object", string0);
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isSymbolValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isInstanceType());
      
      boolean boolean0 = jSTypeRegistry0.isForwardDeclaredType((String) null);
      assertFalse(boolean0);
      
      HashMap<TemplateType, TemplateType> hashMap0 = new HashMap<TemplateType, TemplateType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      jSTypeRegistry0.registerLegacyClosureNamespace("AsyncIterable");
      HashMap<TemplateType, JSType> hashMap1 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      JSType jSType0 = hashMap1.put(templateType0, instanceObjectType0);
      assertNull(jSType0);
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isSymbolValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      
      UnknownType unknownType0 = (UnknownType)noResolvedType0.getReturnType();
      assertNotNull(unknownType0);
      assertFalse(noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNamedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(unknownType0.isStructuralInterface());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unknownType0.isTemplatizedType());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isSymbolValueType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isLiteralObject());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNamedType());
      assertTrue(unknownType0.isResolved());
      assertFalse(unknownType0.isBigIntValueType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.isNullable());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertFalse(unknownType0.isInterface());
      
      InstanceObjectType instanceObjectType1 = (InstanceObjectType)hashMap1.put(templateType0, unknownType0);
      assertNotNull(instanceObjectType1);
      assertFalse(noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNamedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isSymbolValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(unknownType0.isStructuralInterface());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unknownType0.isTemplatizedType());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isSymbolValueType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isLiteralObject());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNamedType());
      assertTrue(unknownType0.isResolved());
      assertFalse(unknownType0.isBigIntValueType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.isNullable());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertFalse(unknownType0.isInterface());
      assertFalse(instanceObjectType1.isFunctionType());
      assertTrue(instanceObjectType1.isResolved());
      assertFalse(instanceObjectType1.isOrdinaryFunction());
      assertFalse(instanceObjectType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType1.isAllType());
      assertFalse(instanceObjectType1.isSymbolValueType());
      assertTrue(instanceObjectType1.isNativeObjectType());
      assertFalse(instanceObjectType1.isNullType());
      assertTrue(instanceObjectType1.isInstanceType());
      assertFalse(instanceObjectType1.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType1.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType1.isLiteralObject());
      assertFalse(instanceObjectType1.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType1.isStructuralInterface());
      assertFalse(instanceObjectType1.isAnonymous());
      assertFalse(instanceObjectType1.isTemplatizedType());
      assertFalse(instanceObjectType1.isEnumElementType());
      assertFalse(instanceObjectType1.isTemplateType());
      assertFalse(instanceObjectType1.isUnsuccessfullyResolved());
      assertTrue(instanceObjectType1.isSuccessfullyResolved());
      assertFalse(instanceObjectType1.isStringValueType());
      assertFalse(instanceObjectType1.isNoResolvedType());
      assertFalse(instanceObjectType1.isUnionType());
      assertFalse(instanceObjectType1.isNamedType());
      assertTrue(instanceObjectType1.isObject());
      assertFalse(instanceObjectType1.isCheckedUnknownType());
      assertFalse(instanceObjectType1.isBigIntValueType());
      assertFalse(instanceObjectType1.isNoType());
      assertFalse(instanceObjectType1.isNoObjectType());
      assertFalse(instanceObjectType1.isVoidType());
      assertTrue(instanceObjectType1.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType1.isEnumType());
      assertEquals(2, instanceObjectType1.getTemplateParamCount());
      assertFalse(instanceObjectType1.hasCachedValues());
      assertFalse(instanceObjectType1.isConstructor());
      assertTrue(instanceObjectType1.matchesObjectContext());
      assertFalse(instanceObjectType1.isRecordType());
      assertFalse(instanceObjectType1.isBooleanValueType());
      assertFalse(instanceObjectType1.isNumberValueType());
      assertFalse(instanceObjectType1.isFunctionPrototypeType());
      assertSame(instanceObjectType1, instanceObjectType0);
      
      boolean boolean1 = jSTypeRegistry0.isForwardDeclaredType("Object");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      TemplateType templateType1 = jSTypeRegistry0.getIteratorValueTemplate();
      assertFalse(templateType1.equals((Object)templateType0));
      assertNotNull(templateType1);
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.hasCachedValues());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isBooleanValueType());
      assertTrue(templateType1.isTemplateType());
      assertEquals("VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isOrdinaryFunction());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isStringValueType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isSymbolValueType());
      assertNotSame(templateType1, templateType0);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createObjectType((String) null, unknownType0);
      assertNotNull(prototypeObjectType0);
      assertFalse(prototypeObjectType0.isStructuralInterface());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isSymbolValueType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isNamedType());
      assertTrue(prototypeObjectType0.isSuccessfullyResolved());
      assertTrue(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isAnonymous());
      assertFalse(prototypeObjectType0.isTemplatizedType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isUnsuccessfullyResolved());
      assertFalse(prototypeObjectType0.isNominalConstructorOrInterface());
      assertFalse(prototypeObjectType0.isLiteralObject());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(prototypeObjectType0.isInterface());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isBigIntValueType());
      assertEquals(0, prototypeObjectType0.getTemplateParamCount());
      assertFalse(prototypeObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isConstructor());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNamedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(unknownType0.isStructuralInterface());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unknownType0.isTemplatizedType());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isSymbolValueType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isLiteralObject());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNamedType());
      assertTrue(unknownType0.isResolved());
      assertFalse(unknownType0.isBigIntValueType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.isNullable());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertFalse(unknownType0.isInterface());
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createFunctionTypeWithNewReturnType(noResolvedType0, (JSType) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      
      String string0 = locale0.getDisplayScript();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(string0));
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, set0);
      assertNotNull(jSTypeRegistry0);
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(string0));
      
      ArrayList<ObjectType> arrayList0 = new ArrayList<ObjectType>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TemplateTypeMap templateTypeMap0 = jSTypeRegistry0.getEmptyTemplateTypeMap();
      assertNotNull(templateTypeMap0);
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(string0));
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isVoidable());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(set0.contains(string0));
      
      Node node0 = Node.newString("B");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isSub());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isConst());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isInc());
      assertFalse(node0.isExport());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isAwait());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isExportSpecs());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isYield());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEQ());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isVar());
      assertFalse(node0.isSHNE());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isForIn());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasParent());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isInterfaceMembers());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isRest());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isSpread());
      assertEquals("B", node0.getString());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isClass());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isImport());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      
      boolean boolean0 = jSTypeRegistry0.isForwardDeclaredType("B");
      assertFalse(boolean0);
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(string0));
      
      Token token0 = Token.NULLABLE_TYPE;
      Node node1 = new Node(token0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node1);
      assertFalse(node1.isExponent());
      assertFalse(node1.isLet());
      assertFalse(node1.isObjectPattern());
      assertFalse(node1.isComputedFieldDef());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isTemplateLitSub());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isImportSpecs());
      assertFalse(node1.isAwait());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isForAwaitOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isExport());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isConst());
      assertFalse(node1.isAssignOr());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isImportSpec());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isIn());
      assertFalse(node1.isOptChainGetElem());
      assertFalse(node1.isVanillaFor());
      assertFalse(node1.isBitNot());
      assertFalse(node1.isMemberFieldDef());
      assertFalse(node1.isBigInt());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isSpread());
      assertFalse(node1.isTry());
      assertFalse(node1.isRecordType());
      assertFalse(node1.isForOf());
      assertFalse(node1.isImport());
      assertFalse(node1.isCallSignature());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isClass());
      assertFalse(node1.isNeg());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isEQ());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertEquals(Token.NULLABLE_TYPE, node1.getToken());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAnd());
      assertFalse(node1.isDefaultValue());
      assertTrue(node1.hasZeroOrOneChild());
      assertFalse(node1.isNullishCoalesce());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNormalBlock());
      assertFalse(node1.isOr());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isClassMembers());
      assertFalse(node1.isNull());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isRoot());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isRest());
      assertFalse(node1.isMemberVariableDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isAssignNullishCoalesce());
      assertFalse(node1.isArrayPattern());
      assertFalse(node1.isInterfaceMembers());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isComputedProp());
      assertFalse(node1.isExportSpec());
      assertFalse(node1.isNot());
      assertFalse(node1.isTemplateLitString());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDestructuringLhs());
      assertFalse(node1.isAssignExponent());
      assertFalse(node1.isMemberFunctionDef());
      assertFalse(node1.isOptChainGetProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isExportSpecs());
      assertFalse(node1.isInc());
      assertNull(node1.getOriginalName());
      assertFalse(node1.isTemplateLit());
      assertFalse(node1.isTaggedTemplateLit());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isYield());
      assertFalse(node1.isImportMeta());
      assertFalse(node1.isSHEQ());
      assertFalse(node1.isStringLit());
      assertFalse(node1.isIndexSignature());
      assertFalse(node1.isComma());
      assertFalse(node1.isSuper());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isSub());
      assertFalse(node1.isVoid());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isObjectRest());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isImportStar());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDestructuringPattern());
      assertFalse(node1.isModuleBody());
      assertFalse(node1.isForIn());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasParent());
      assertFalse(node1.isSHNE());
      assertFalse(node1.isVar());
      assertFalse(node1.hasTwoChildren());
      assertFalse(node1.isOptChainCall());
      assertEquals(0, node1.getChildCount());
      
      JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
      assertNotNull(jSType0);
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isVoidable());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(jSType0.isEnumElementType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isVoidType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(set0.contains(string0));
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createFunctionTypeWithNewReturnType(noResolvedType0, jSType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      assertNotNull(templateType0);
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isTemplatizedType());
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      assertNotNull(templatizedType0);
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isTemplatizedType());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertFalse(templatizedType0.isRecordType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isNoObjectType());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isFunctionType());
      assertFalse(templatizedType0.isNoType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isEnumType());
      assertTrue(templatizedType0.isTemplateType());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertTrue(templatizedType0.isResolved());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isConstructor());
      
      FunctionType functionType0 = templatizedType0.getSuperClassConstructor();
      assertNull(functionType0);
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isTemplatizedType());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertFalse(templatizedType0.isRecordType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isNoObjectType());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isFunctionType());
      assertFalse(templatizedType0.isNoType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isEnumType());
      assertTrue(templatizedType0.isTemplateType());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertTrue(templatizedType0.isResolved());
      
      ImmutableList<TemplateType> immutableList0 = jSTypeRegistry0.maybeGetTemplateTypesOfBuiltin("AsyncGenerator");
      assertNotNull(immutableList0);
      assertEquals(3, immutableList0.size());
      assertFalse(immutableList0.contains(templateType0));
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      JSType jSType0 = jSTypeRegistry1.createNullableType(noResolvedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSType0);
      assertFalse(noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isVoidable());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isNamedType());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = treeSet0.higher((String) null);
      assertNull(string0);
      
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      assertNotNull(templateType0);
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      assertNotNull(templatizedType0);
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templatizedType0.isFunctionType());
      assertTrue(templatizedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.hasCachedValues());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isRecordType());
      assertTrue(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isStringValueType());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isNoType());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, treeSet0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      HashMap<TemplateType, JSType> hashMap1 = new HashMap<TemplateType, JSType>();
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(errorReporter0);
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry2);
      
      TemplateTypeReplacer templateTypeReplacer0 = TemplateTypeReplacer.forInference(jSTypeRegistry2, hashMap0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertNotNull(templateTypeReplacer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry0);
      
      JSType jSType0 = templateTypeReplacer0.caseStringType();
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertNotNull(jSType0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(jSType0.isNamedType());
      assertTrue(jSType0.isStringValueType());
      assertFalse(jSType0.isNumberValueType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isTemplatizedType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isSymbolValueType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isInterface());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertEquals("string", jSType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isVoidType());
      assertTrue(jSType0.matchesObjectContext());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry0);
      
      JSType jSType1 = templateTypeReplacer0.caseNumberType();
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertNotNull(jSType1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(jSType1.isRecordType());
      assertTrue(jSType1.matchesObjectContext());
      assertFalse(jSType1.isTemplateType());
      assertTrue(jSType1.isResolved());
      assertTrue(jSType1.isNumberValueType());
      assertFalse(jSType1.isOrdinaryFunction());
      assertFalse(jSType1.isConstructor());
      assertFalse(jSType1.isNullType());
      assertFalse(jSType1.isNoObjectType());
      assertFalse(jSType1.isSymbolValueType());
      assertFalse(jSType1.isNoType());
      assertFalse(jSType1.isAllType());
      assertFalse(jSType1.isUnsuccessfullyResolved());
      assertTrue(jSType1.matchesNumberContext());
      assertFalse(jSType1.isLiteralObject());
      assertTrue(jSType1.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.BOTH, jSType1.getPossibleToBooleanOutcomes());
      assertFalse(jSType1.isEnumElementType());
      assertFalse(jSType1.isFunctionType());
      assertFalse(jSType1.isRawTypeOfTemplatizedType());
      assertFalse(jSType1.isVoidType());
      assertFalse(jSType1.isCheckedUnknownType());
      assertFalse(jSType1.isTemplatizedType());
      assertFalse(jSType1.isEnumType());
      assertFalse(jSType1.isFunctionPrototypeType());
      assertEquals(0, jSType1.getTemplateParamCount());
      assertTrue(jSType1.matchesStringContext());
      assertFalse(jSType1.isUnionType());
      assertFalse(jSType1.isNamedType());
      assertFalse(jSType1.isStructuralInterface());
      assertEquals("number", jSType1.getDisplayName());
      assertFalse(jSType1.isBooleanValueType());
      assertFalse(jSType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType1.isNativeObjectType());
      assertFalse(jSType1.isNominalConstructorOrInterface());
      assertFalse(jSType1.isNoResolvedType());
      assertFalse(jSType1.isInterface());
      assertFalse(jSType1.isBigIntValueType());
      assertFalse(jSType1.isStringValueType());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry0);
      
      jSTypeRegistry0.registerPropertyOnType("IOBJECT_VALUE", templatizedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templatizedType0.isFunctionType());
      assertTrue(templatizedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.hasCachedValues());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isRecordType());
      assertTrue(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isStringValueType());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isNoType());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry2);
      assertNotSame(hashMap0, hashMap1);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;
      FunctionType functionType0 = jSTypeRegistry2.getNativeFunctionType(jSTypeNative0);
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertNotNull(functionType0);
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.matchesStringContext());
      assertNull(functionType0.getReferenceName());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isSymbolValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isStructuralInterface());
      assertTrue(functionType0.isVoidable());
      assertTrue(functionType0.isNoResolvedType());
      assertFalse(functionType0.isBigIntValueType());
      assertTrue(functionType0.isObject());
      assertNull(functionType0.getGoogModuleId());
      assertFalse(functionType0.isNamedType());
      assertTrue(functionType0.matchesObjectContext());
      assertTrue(functionType0.matchesNumberContext());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAbstract());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isLiteralObject());
      assertTrue(functionType0.isUnsuccessfullyResolved());
      assertFalse(functionType0.isTemplatizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.BOTH, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isResolved());
      assertFalse(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.matchesSymbolContext());
      assertTrue(functionType0.isNativeObjectType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.isNullable());
      assertEquals(0, functionType0.getTemplateParamCount());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isRawTypeOfTemplatizedType());
      assertFalse(functionType0.isStringValueType());
      assertNull(functionType0.getClosurePrimitive());
      assertFalse(functionType0.isAnonymous());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalConstructorOrInterface());
      assertFalse(functionType0.isSuccessfullyResolved());
      assertFalse(functionType0.hasCachedValues());
      assertNotSame(jSTypeRegistry2, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry0);
      
      jSTypeRegistry0.resetImplicitPrototype(jSType1, functionType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(jSType1.isRecordType());
      assertTrue(jSType1.matchesObjectContext());
      assertFalse(jSType1.isTemplateType());
      assertTrue(jSType1.isResolved());
      assertTrue(jSType1.isNumberValueType());
      assertFalse(jSType1.isOrdinaryFunction());
      assertFalse(jSType1.isConstructor());
      assertFalse(jSType1.isNullType());
      assertFalse(jSType1.isNoObjectType());
      assertFalse(jSType1.isSymbolValueType());
      assertFalse(jSType1.isNoType());
      assertFalse(jSType1.isAllType());
      assertFalse(jSType1.isUnsuccessfullyResolved());
      assertTrue(jSType1.matchesNumberContext());
      assertFalse(jSType1.isLiteralObject());
      assertTrue(jSType1.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.BOTH, jSType1.getPossibleToBooleanOutcomes());
      assertFalse(jSType1.isEnumElementType());
      assertFalse(jSType1.isFunctionType());
      assertFalse(jSType1.isRawTypeOfTemplatizedType());
      assertFalse(jSType1.isVoidType());
      assertFalse(jSType1.isCheckedUnknownType());
      assertFalse(jSType1.isTemplatizedType());
      assertFalse(jSType1.isEnumType());
      assertFalse(jSType1.isFunctionPrototypeType());
      assertEquals(0, jSType1.getTemplateParamCount());
      assertTrue(jSType1.matchesStringContext());
      assertFalse(jSType1.isUnionType());
      assertFalse(jSType1.isNamedType());
      assertFalse(jSType1.isStructuralInterface());
      assertEquals("number", jSType1.getDisplayName());
      assertFalse(jSType1.isBooleanValueType());
      assertFalse(jSType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType1.isNativeObjectType());
      assertFalse(jSType1.isNominalConstructorOrInterface());
      assertFalse(jSType1.isNoResolvedType());
      assertFalse(jSType1.isInterface());
      assertFalse(jSType1.isBigIntValueType());
      assertFalse(jSType1.isStringValueType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.matchesStringContext());
      assertNull(functionType0.getReferenceName());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isSymbolValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isStructuralInterface());
      assertTrue(functionType0.isVoidable());
      assertTrue(functionType0.isNoResolvedType());
      assertFalse(functionType0.isBigIntValueType());
      assertTrue(functionType0.isObject());
      assertNull(functionType0.getGoogModuleId());
      assertFalse(functionType0.isNamedType());
      assertTrue(functionType0.matchesObjectContext());
      assertTrue(functionType0.matchesNumberContext());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAbstract());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isLiteralObject());
      assertTrue(functionType0.isUnsuccessfullyResolved());
      assertFalse(functionType0.isTemplatizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.BOTH, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isResolved());
      assertFalse(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.matchesSymbolContext());
      assertTrue(functionType0.isNativeObjectType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.isNullable());
      assertEquals(0, functionType0.getTemplateParamCount());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isRawTypeOfTemplatizedType());
      assertFalse(functionType0.isStringValueType());
      assertNull(functionType0.getClosurePrimitive());
      assertFalse(functionType0.isAnonymous());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalConstructorOrInterface());
      assertFalse(functionType0.isSuccessfullyResolved());
      assertFalse(functionType0.hasCachedValues());
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry2);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry0);
      
      TemplateType templateType1 = jSTypeRegistry1.createTemplateType("27zUfrl0a\"J,e");
      assertFalse(templateType1.equals((Object)templateType0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertNotNull(templateType1);
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isNativeObjectType());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertEquals("27zUfrl0a\"J,e", templateType1.getReferenceName());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType1.isTemplateType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isNumberValueType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isOrdinaryFunction());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(treeSet0.contains("IOBJECT_VALUE"));
      assertNotSame(templateType1, templateType0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry2);
      
      JSType jSType2 = jSTypeRegistry2.createNullableType(templateType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertFalse(templateType0.equals((Object)templateType1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertNotNull(jSType2);
      assertTrue(jSType2.isResolved());
      assertFalse(jSType2.isFunctionType());
      assertFalse(jSType2.isOrdinaryFunction());
      assertFalse(jSType2.isNativeObjectType());
      assertFalse(jSType2.isSymbolValueType());
      assertFalse(jSType2.isInterface());
      assertFalse(jSType2.isNullType());
      assertFalse(jSType2.isConstructor());
      assertFalse(jSType2.isBooleanValueType());
      assertFalse(jSType2.isVoidType());
      assertFalse(jSType2.isRecordType());
      assertFalse(jSType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType2.isFunctionPrototypeType());
      assertTrue(jSType2.isUnionType());
      assertFalse(jSType2.isNoResolvedType());
      assertEquals(0, jSType2.getTemplateParamCount());
      assertFalse(jSType2.isEnumType());
      assertFalse(jSType2.isStringValueType());
      assertFalse(jSType2.isNumberValueType());
      assertFalse(jSType2.isCheckedUnknownType());
      assertFalse(jSType2.isBigIntValueType());
      assertFalse(jSType2.isNamedType());
      assertTrue(jSType2.isSuccessfullyResolved());
      assertFalse(jSType2.isRawTypeOfTemplatizedType());
      assertFalse(jSType2.isNoObjectType());
      assertFalse(jSType2.isNoType());
      assertFalse(jSType2.isNominalConstructorOrInterface());
      assertFalse(jSType2.isStructuralInterface());
      assertFalse(jSType2.isLiteralObject());
      assertFalse(jSType2.isEnumElementType());
      assertFalse(jSType2.isAllType());
      assertFalse(jSType2.isTemplatizedType());
      assertFalse(jSType2.isTemplateType());
      assertFalse(jSType2.isUnsuccessfullyResolved());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry2);
      assertNotSame(templateType0, templateType1);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap2 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap2);
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      
      JSType jSType3 = jSTypeRegistry2.createOptionalType(templatizedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertFalse(jSType3.equals((Object)jSType2));
      assertFalse(templateType0.equals((Object)templateType1));
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertNotNull(jSType3);
      assertFalse(jSType3.isRecordType());
      assertFalse(jSType3.isNominalConstructorOrInterface());
      assertFalse(jSType3.isOrdinaryFunction());
      assertTrue(jSType3.isResolved());
      assertFalse(jSType3.isUnsuccessfullyResolved());
      assertFalse(jSType3.isConstructor());
      assertFalse(jSType3.isBooleanValueType());
      assertFalse(jSType3.isNativeObjectType());
      assertFalse(jSType3.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(jSType3.isUnionType());
      assertFalse(jSType3.isNoResolvedType());
      assertFalse(jSType3.isStringValueType());
      assertFalse(jSType3.isBigIntValueType());
      assertFalse(jSType3.isInterface());
      assertFalse(jSType3.isVoidType());
      assertFalse(jSType3.isFunctionPrototypeType());
      assertFalse(jSType3.isEnumElementType());
      assertFalse(jSType3.isEnumType());
      assertFalse(jSType3.isTemplatizedType());
      assertFalse(jSType3.isCheckedUnknownType());
      assertEquals(0, jSType3.getTemplateParamCount());
      assertFalse(jSType3.isNamedType());
      assertFalse(jSType3.isNumberValueType());
      assertFalse(jSType3.isStructuralInterface());
      assertFalse(jSType3.isAllType());
      assertFalse(jSType3.isNoType());
      assertFalse(jSType3.isNullType());
      assertFalse(jSType3.isNoObjectType());
      assertFalse(jSType3.isTemplateType());
      assertFalse(jSType3.isSymbolValueType());
      assertTrue(jSType3.isSuccessfullyResolved());
      assertFalse(jSType3.isLiteralObject());
      assertFalse(jSType3.isFunctionType());
      assertFalse(jSType3.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templatizedType0.isFunctionType());
      assertTrue(templatizedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.hasCachedValues());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isRecordType());
      assertTrue(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isStringValueType());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isNoType());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry2);
      assertNotSame(jSType3, jSType2);
      assertNotSame(templateType0, templateType1);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry0);
      
      boolean boolean0 = jSTypeRegistry0.isForwardDeclaredType("27zUfrl0a\"J,e");
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertFalse(boolean0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry2);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "IOBJECT_VALUE");
      assertNotNull(jSTypeExpression0);
      assertEquals("IOBJECT_VALUE", jSTypeExpression0.getSourceName());
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.evaluateTypeExpressionInGlobalScope(jSTypeExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression((Node) null, "&2eE.");
      assertNotNull(jSTypeExpression0);
      assertEquals("&2eE.", jSTypeExpression0.getSourceName());
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.evaluateTypeExpressionInGlobalScope(jSTypeExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = Node.newTemplateLitString("", "=T`3");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isLet());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExport());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIf());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isIn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isForOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isSub());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isHook());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isImportStar());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isObjectRest());
      assertTrue(node0.isTemplateLitString());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAwait());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.hasParent());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertEquals("=T`3", node0.getRawString());
      assertFalse(node0.isOr());
      assertEquals("", node0.getCookedString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSuper());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isYield());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isRoot());
      assertFalse(node0.isNull());
      assertFalse(node0.isNeg());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAdd());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isEQ());
      assertFalse(node0.isMemberVariableDef());
      assertEquals(Token.TEMPLATELIT_STRING, node0.getToken());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isForIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isRest());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isThrow());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isNot());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isConst());
      assertFalse(node0.isInc());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCast());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isDec());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isString());
      assertFalse(node0.isSpread());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(""));
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(""));
      
      TemplateType templateType0 = jSTypeRegistry0.getAsyncIteratorValueTemplate();
      assertNotNull(templateType0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isVoidType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isInterface());
      assertFalse(linkedHashSet0.contains(""));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertNotNull(jSTypeRegistry0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("IOBJECT_VALUE");
      assertNotNull(templateType0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isStructuralInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      TypeStringBuilder typeStringBuilder0 = new TypeStringBuilder(false);
      assertNotNull(typeStringBuilder0);
      
      templateType0.appendTo(typeStringBuilder0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isStructuralInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      TemplateType templateType1 = (TemplateType)jSTypeRegistry0.findCommonSuperObject(templateType0, templateType0);
      assertNotNull(templateType1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isStructuralInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isNumberValueType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isNoType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isOrdinaryFunction());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isCheckedUnknownType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.hasCachedValues());
      assertEquals("IOBJECT_VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      AutoValue_FunctionType_Parameter autoValue_FunctionType_Parameter0 = (AutoValue_FunctionType_Parameter)FunctionType.Parameter.create(templateType0, true, true);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(autoValue_FunctionType_Parameter0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isStructuralInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(autoValue_FunctionType_Parameter0.isOptional());
      assertTrue(autoValue_FunctionType_Parameter0.isVariadic());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(templateType0, templateType1);
      
      AutoValue_FunctionType_Parameter autoValue_FunctionType_Parameter1 = new AutoValue_FunctionType_Parameter(templateType1, false, false);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(autoValue_FunctionType_Parameter1.equals((Object)autoValue_FunctionType_Parameter0));
      assertNotNull(autoValue_FunctionType_Parameter1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isStructuralInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isNumberValueType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isNoType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isOrdinaryFunction());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isCheckedUnknownType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.hasCachedValues());
      assertEquals("IOBJECT_VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(autoValue_FunctionType_Parameter1.isOptional());
      assertFalse(autoValue_FunctionType_Parameter1.isVariadic());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      AutoValue_FunctionType_Parameter autoValue_FunctionType_Parameter2 = (AutoValue_FunctionType_Parameter)FunctionType.Parameter.create(templateType0, false, false);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertTrue(autoValue_FunctionType_Parameter2.equals((Object)autoValue_FunctionType_Parameter1));
      assertFalse(autoValue_FunctionType_Parameter2.equals((Object)autoValue_FunctionType_Parameter0));
      assertNotNull(autoValue_FunctionType_Parameter2);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isStructuralInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(autoValue_FunctionType_Parameter2.isVariadic());
      assertFalse(autoValue_FunctionType_Parameter2.isOptional());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(templateType0, templateType1);
      assertNotSame(autoValue_FunctionType_Parameter2, autoValue_FunctionType_Parameter0);
      assertNotSame(autoValue_FunctionType_Parameter2, autoValue_FunctionType_Parameter1);
      
      ImmutableList<FunctionType.Parameter> immutableList0 = ImmutableList.of((FunctionType.Parameter) autoValue_FunctionType_Parameter0, (FunctionType.Parameter) autoValue_FunctionType_Parameter0, (FunctionType.Parameter) autoValue_FunctionType_Parameter0, (FunctionType.Parameter) autoValue_FunctionType_Parameter0, (FunctionType.Parameter) autoValue_FunctionType_Parameter0, (FunctionType.Parameter) autoValue_FunctionType_Parameter0, (FunctionType.Parameter) autoValue_FunctionType_Parameter0, (FunctionType.Parameter) autoValue_FunctionType_Parameter0, (FunctionType.Parameter) autoValue_FunctionType_Parameter1, (FunctionType.Parameter) autoValue_FunctionType_Parameter2);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(autoValue_FunctionType_Parameter0.equals((Object)autoValue_FunctionType_Parameter2));
      assertFalse(autoValue_FunctionType_Parameter0.equals((Object)autoValue_FunctionType_Parameter1));
      assertFalse(autoValue_FunctionType_Parameter1.equals((Object)autoValue_FunctionType_Parameter0));
      assertTrue(autoValue_FunctionType_Parameter1.equals((Object)autoValue_FunctionType_Parameter2));
      assertTrue(autoValue_FunctionType_Parameter2.equals((Object)autoValue_FunctionType_Parameter1));
      assertFalse(autoValue_FunctionType_Parameter2.equals((Object)autoValue_FunctionType_Parameter0));
      assertNotNull(immutableList0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isStructuralInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isNumberValueType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isNoType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isOrdinaryFunction());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isCheckedUnknownType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.hasCachedValues());
      assertEquals("IOBJECT_VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isTypeTransformation());
      assertTrue(autoValue_FunctionType_Parameter0.isOptional());
      assertTrue(autoValue_FunctionType_Parameter0.isVariadic());
      assertFalse(autoValue_FunctionType_Parameter1.isOptional());
      assertFalse(autoValue_FunctionType_Parameter1.isVariadic());
      assertFalse(autoValue_FunctionType_Parameter2.isVariadic());
      assertFalse(autoValue_FunctionType_Parameter2.isOptional());
      assertEquals(10, immutableList0.size());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      assertNotSame(autoValue_FunctionType_Parameter0, autoValue_FunctionType_Parameter2);
      assertNotSame(autoValue_FunctionType_Parameter0, autoValue_FunctionType_Parameter1);
      assertNotSame(autoValue_FunctionType_Parameter1, autoValue_FunctionType_Parameter2);
      assertNotSame(autoValue_FunctionType_Parameter1, autoValue_FunctionType_Parameter0);
      assertNotSame(autoValue_FunctionType_Parameter2, autoValue_FunctionType_Parameter0);
      assertNotSame(autoValue_FunctionType_Parameter2, autoValue_FunctionType_Parameter1);
      
      Node node0 = Node.newString("IOBJECT_VALUE");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isLet());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isExponent());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isExport());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCast());
      assertEquals("IOBJECT_VALUE", node0.getString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isSpread());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isYield());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isConst());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.hasParent());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isBlock());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isTemplateLitString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isRoot());
      assertFalse(node0.isNew());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isEQ());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isNeg());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isLabel());
      assertFalse(node0.isForIn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isTrue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isIn());
      assertFalse(node0.isForOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isRest());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      
      TemplateType templateType2 = jSTypeRegistry1.createTemplateTypeWithTransformation("TYPE", node0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(templateType2.equals((Object)templateType0));
      assertFalse(templateType2.equals((Object)templateType1));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateType2);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isLet());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isExponent());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isExport());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCast());
      assertEquals("IOBJECT_VALUE", node0.getString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isSpread());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isYield());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isConst());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.hasParent());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isBlock());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isTemplateLitString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isRoot());
      assertFalse(node0.isNew());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isEQ());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isNeg());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isLabel());
      assertFalse(node0.isForIn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isTrue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isIn());
      assertFalse(node0.isForOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isRest());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(templateType2.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertFalse(templateType2.isFunctionType());
      assertEquals(0, templateType2.getTemplateParamCount());
      assertTrue(templateType2.isResolved());
      assertFalse(templateType2.isNominalConstructorOrInterface());
      assertFalse(templateType2.isCheckedUnknownType());
      assertFalse(templateType2.isNullType());
      assertFalse(templateType2.isUnsuccessfullyResolved());
      assertTrue(templateType2.isTemplateType());
      assertFalse(templateType2.isStructuralInterface());
      assertFalse(templateType2.isLiteralObject());
      assertFalse(templateType2.isRawTypeOfTemplatizedType());
      assertFalse(templateType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType2.isEnumElementType());
      assertFalse(templateType2.isNamedType());
      assertFalse(templateType2.isTemplatizedType());
      assertFalse(templateType2.isNoResolvedType());
      assertTrue(templateType2.hasAnyTemplateTypesInternal());
      assertEquals("TYPE", templateType2.getReferenceName());
      assertFalse(templateType2.isOrdinaryFunction());
      assertFalse(templateType2.isVoidType());
      assertTrue(templateType2.isSuccessfullyResolved());
      assertTrue(templateType2.isObject());
      assertFalse(templateType2.isStringValueType());
      assertFalse(templateType2.isAllType());
      assertFalse(templateType2.isSymbolValueType());
      assertFalse(templateType2.isInterface());
      assertFalse(templateType2.isNoObjectType());
      assertFalse(templateType2.isNativeObjectType());
      assertFalse(templateType2.isNoType());
      assertFalse(templateType2.isBigIntValueType());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isBooleanValueType());
      assertFalse(templateType2.isRecordType());
      assertTrue(templateType2.isTypeTransformation());
      assertFalse(templateType2.isConstructor());
      assertFalse(templateType2.isUnionType());
      assertFalse(templateType2.isEnumType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(templateType2, templateType0);
      assertNotSame(templateType2, templateType1);
      
      ImmutableList<TemplateType> immutableList1 = ImmutableList.of(templateType1, templateType2);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(templateType0.equals((Object)templateType2));
      assertFalse(templateType1.equals((Object)templateType2));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(templateType2.equals((Object)templateType0));
      assertFalse(templateType2.equals((Object)templateType1));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(immutableList1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isStructuralInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isNumberValueType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isNoType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isOrdinaryFunction());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isCheckedUnknownType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.hasCachedValues());
      assertEquals("IOBJECT_VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isLet());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isExponent());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isExport());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCast());
      assertEquals("IOBJECT_VALUE", node0.getString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isSpread());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isYield());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isConst());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.hasParent());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isBlock());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isTemplateLitString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isRoot());
      assertFalse(node0.isNew());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isEQ());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isNeg());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isLabel());
      assertFalse(node0.isForIn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isTrue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isIn());
      assertFalse(node0.isForOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isRest());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(templateType2.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertFalse(templateType2.isFunctionType());
      assertEquals(0, templateType2.getTemplateParamCount());
      assertTrue(templateType2.isResolved());
      assertFalse(templateType2.isNominalConstructorOrInterface());
      assertFalse(templateType2.isCheckedUnknownType());
      assertFalse(templateType2.isNullType());
      assertFalse(templateType2.isUnsuccessfullyResolved());
      assertTrue(templateType2.isTemplateType());
      assertFalse(templateType2.isStructuralInterface());
      assertFalse(templateType2.isLiteralObject());
      assertFalse(templateType2.isRawTypeOfTemplatizedType());
      assertFalse(templateType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType2.isEnumElementType());
      assertFalse(templateType2.isNamedType());
      assertFalse(templateType2.isTemplatizedType());
      assertFalse(templateType2.isNoResolvedType());
      assertTrue(templateType2.hasAnyTemplateTypesInternal());
      assertEquals("TYPE", templateType2.getReferenceName());
      assertFalse(templateType2.isOrdinaryFunction());
      assertFalse(templateType2.isVoidType());
      assertTrue(templateType2.isSuccessfullyResolved());
      assertTrue(templateType2.isObject());
      assertFalse(templateType2.isStringValueType());
      assertFalse(templateType2.isAllType());
      assertFalse(templateType2.isSymbolValueType());
      assertFalse(templateType2.isInterface());
      assertFalse(templateType2.isNoObjectType());
      assertFalse(templateType2.isNativeObjectType());
      assertFalse(templateType2.isNoType());
      assertFalse(templateType2.isBigIntValueType());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isBooleanValueType());
      assertFalse(templateType2.isRecordType());
      assertTrue(templateType2.isTypeTransformation());
      assertFalse(templateType2.isConstructor());
      assertFalse(templateType2.isUnionType());
      assertFalse(templateType2.isEnumType());
      assertEquals(2, immutableList1.size());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertTrue(immutableList1.contains(templateType1));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(templateType0, templateType1);
      assertNotSame(templateType0, templateType2);
      assertSame(templateType1, templateType0);
      assertNotSame(templateType1, templateType2);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(templateType2, templateType0);
      assertNotSame(templateType2, templateType1);
      
      TemplateType templateType3 = jSTypeRegistry0.getObjectIndexKey();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(templateType3.equals((Object)templateType1));
      assertFalse(templateType3.equals((Object)templateType0));
      assertFalse(templateType3.equals((Object)templateType2));
      assertNotNull(templateType3);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(templateType3.isCheckedUnknownType());
      assertEquals(0, templateType3.getTemplateParamCount());
      assertFalse(templateType3.isRecordType());
      assertEquals("IOBJECT_KEY", templateType3.getReferenceName());
      assertFalse(templateType3.isFunctionType());
      assertFalse(templateType3.isLiteralObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType3.getPossibleToBooleanOutcomes());
      assertFalse(templateType3.isRawTypeOfTemplatizedType());
      assertFalse(templateType3.isSymbolValueType());
      assertFalse(templateType3.isNullType());
      assertFalse(templateType3.isBooleanValueType());
      assertTrue(templateType3.isObject());
      assertFalse(templateType3.isUnionType());
      assertFalse(templateType3.isFunctionPrototypeType());
      assertFalse(templateType3.isNumberValueType());
      assertFalse(templateType3.hasCachedValues());
      assertFalse(templateType3.isNativeObjectType());
      assertFalse(templateType3.isTypeTransformation());
      assertFalse(templateType3.isConstructor());
      assertFalse(templateType3.isVoidType());
      assertTrue(templateType3.hasAnyTemplateTypesInternal());
      assertFalse(templateType3.isOrdinaryFunction());
      assertFalse(templateType3.isEnumType());
      assertFalse(templateType3.isTemplatizedType());
      assertFalse(templateType3.isStringValueType());
      assertTrue(templateType3.isSuccessfullyResolved());
      assertFalse(templateType3.isEnumElementType());
      assertFalse(templateType3.isNoType());
      assertFalse(templateType3.isBigIntValueType());
      assertFalse(templateType3.isInterface());
      assertFalse(templateType3.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType3.isAllType());
      assertFalse(templateType3.isNoObjectType());
      assertTrue(templateType3.isTemplateType());
      assertFalse(templateType3.isUnsuccessfullyResolved());
      assertFalse(templateType3.isStructuralInterface());
      assertFalse(templateType3.isNominalConstructorOrInterface());
      assertTrue(templateType3.isResolved());
      assertFalse(templateType3.isNoResolvedType());
      assertFalse(templateType3.isNamedType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(templateType3, templateType1);
      assertNotSame(templateType3, templateType0);
      assertNotSame(templateType3, templateType2);
      
      ImmutableList<TemplateType> immutableList2 = ImmutableList.of(templateType0, templateType2, templateType3, templateType0, templateType1);
      assertFalse(immutableList2.equals((Object)immutableList1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(templateType0.equals((Object)templateType3));
      assertFalse(templateType0.equals((Object)templateType2));
      assertFalse(templateType1.equals((Object)templateType3));
      assertFalse(templateType1.equals((Object)templateType2));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(templateType2.equals((Object)templateType3));
      assertFalse(templateType2.equals((Object)templateType0));
      assertFalse(templateType2.equals((Object)templateType1));
      assertFalse(templateType3.equals((Object)templateType1));
      assertFalse(templateType3.equals((Object)templateType0));
      assertFalse(templateType3.equals((Object)templateType2));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(immutableList2);
      assertEquals(5, immutableList2.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isStructuralInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isNumberValueType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isNoType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isOrdinaryFunction());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isCheckedUnknownType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.hasCachedValues());
      assertEquals("IOBJECT_VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isLet());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isExponent());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isExport());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCast());
      assertEquals("IOBJECT_VALUE", node0.getString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isSpread());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isYield());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isConst());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.hasParent());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isBlock());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isTemplateLitString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isRoot());
      assertFalse(node0.isNew());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isEQ());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isNeg());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isLabel());
      assertFalse(node0.isForIn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isTrue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isIn());
      assertFalse(node0.isForOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isRest());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(templateType2.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertFalse(templateType2.isFunctionType());
      assertEquals(0, templateType2.getTemplateParamCount());
      assertTrue(templateType2.isResolved());
      assertFalse(templateType2.isNominalConstructorOrInterface());
      assertFalse(templateType2.isCheckedUnknownType());
      assertFalse(templateType2.isNullType());
      assertFalse(templateType2.isUnsuccessfullyResolved());
      assertTrue(templateType2.isTemplateType());
      assertFalse(templateType2.isStructuralInterface());
      assertFalse(templateType2.isLiteralObject());
      assertFalse(templateType2.isRawTypeOfTemplatizedType());
      assertFalse(templateType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType2.isEnumElementType());
      assertFalse(templateType2.isNamedType());
      assertFalse(templateType2.isTemplatizedType());
      assertFalse(templateType2.isNoResolvedType());
      assertTrue(templateType2.hasAnyTemplateTypesInternal());
      assertEquals("TYPE", templateType2.getReferenceName());
      assertFalse(templateType2.isOrdinaryFunction());
      assertFalse(templateType2.isVoidType());
      assertTrue(templateType2.isSuccessfullyResolved());
      assertTrue(templateType2.isObject());
      assertFalse(templateType2.isStringValueType());
      assertFalse(templateType2.isAllType());
      assertFalse(templateType2.isSymbolValueType());
      assertFalse(templateType2.isInterface());
      assertFalse(templateType2.isNoObjectType());
      assertFalse(templateType2.isNativeObjectType());
      assertFalse(templateType2.isNoType());
      assertFalse(templateType2.isBigIntValueType());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isBooleanValueType());
      assertFalse(templateType2.isRecordType());
      assertTrue(templateType2.isTypeTransformation());
      assertFalse(templateType2.isConstructor());
      assertFalse(templateType2.isUnionType());
      assertFalse(templateType2.isEnumType());
      assertFalse(templateType3.isCheckedUnknownType());
      assertEquals(0, templateType3.getTemplateParamCount());
      assertFalse(templateType3.isRecordType());
      assertEquals("IOBJECT_KEY", templateType3.getReferenceName());
      assertFalse(templateType3.isFunctionType());
      assertFalse(templateType3.isLiteralObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType3.getPossibleToBooleanOutcomes());
      assertFalse(templateType3.isRawTypeOfTemplatizedType());
      assertFalse(templateType3.isSymbolValueType());
      assertFalse(templateType3.isNullType());
      assertFalse(templateType3.isBooleanValueType());
      assertTrue(templateType3.isObject());
      assertFalse(templateType3.isUnionType());
      assertFalse(templateType3.isFunctionPrototypeType());
      assertFalse(templateType3.isNumberValueType());
      assertFalse(templateType3.hasCachedValues());
      assertFalse(templateType3.isNativeObjectType());
      assertFalse(templateType3.isTypeTransformation());
      assertFalse(templateType3.isConstructor());
      assertFalse(templateType3.isVoidType());
      assertTrue(templateType3.hasAnyTemplateTypesInternal());
      assertFalse(templateType3.isOrdinaryFunction());
      assertFalse(templateType3.isEnumType());
      assertFalse(templateType3.isTemplatizedType());
      assertFalse(templateType3.isStringValueType());
      assertTrue(templateType3.isSuccessfullyResolved());
      assertFalse(templateType3.isEnumElementType());
      assertFalse(templateType3.isNoType());
      assertFalse(templateType3.isBigIntValueType());
      assertFalse(templateType3.isInterface());
      assertFalse(templateType3.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType3.isAllType());
      assertFalse(templateType3.isNoObjectType());
      assertTrue(templateType3.isTemplateType());
      assertFalse(templateType3.isUnsuccessfullyResolved());
      assertFalse(templateType3.isStructuralInterface());
      assertFalse(templateType3.isNominalConstructorOrInterface());
      assertTrue(templateType3.isResolved());
      assertFalse(templateType3.isNoResolvedType());
      assertFalse(templateType3.isNamedType());
      assertTrue(immutableList2.contains(templateType1));
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertNotSame(immutableList2, immutableList1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(templateType0, templateType1);
      assertNotSame(templateType0, templateType3);
      assertNotSame(templateType0, templateType2);
      assertSame(templateType1, templateType0);
      assertNotSame(templateType1, templateType3);
      assertNotSame(templateType1, templateType2);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(templateType2, templateType3);
      assertNotSame(templateType2, templateType0);
      assertNotSame(templateType2, templateType1);
      assertNotSame(templateType3, templateType1);
      assertNotSame(templateType3, templateType0);
      assertNotSame(templateType3, templateType2);
      
      node0.setGeneratorSafe(true);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isLet());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isExponent());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isExport());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCast());
      assertEquals("IOBJECT_VALUE", node0.getString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isSpread());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isYield());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isConst());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.hasParent());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isBlock());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isTemplateLitString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isRoot());
      assertFalse(node0.isNew());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isEQ());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isNeg());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isLabel());
      assertFalse(node0.isForIn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isTrue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isIn());
      assertFalse(node0.isForOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isRest());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      
      jSTypeRegistry0.registerPropertyOnType("?.prototype", templateType1);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(templateType0.equals((Object)templateType3));
      assertFalse(templateType0.equals((Object)templateType2));
      assertFalse(templateType1.equals((Object)templateType3));
      assertFalse(templateType1.equals((Object)templateType2));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isStructuralInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isNumberValueType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isNoType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isOrdinaryFunction());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isCheckedUnknownType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.hasCachedValues());
      assertEquals("IOBJECT_VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(templateType0, templateType1);
      assertNotSame(templateType0, templateType3);
      assertNotSame(templateType0, templateType2);
      assertSame(templateType1, templateType0);
      assertNotSame(templateType1, templateType3);
      assertNotSame(templateType1, templateType2);
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry0.findCommonSuperObject(templateType2, templateType1);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(templateType0.equals((Object)templateType3));
      assertFalse(templateType0.equals((Object)templateType2));
      assertFalse(templateType1.equals((Object)templateType3));
      assertFalse(templateType1.equals((Object)templateType2));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(templateType2.equals((Object)templateType3));
      assertFalse(templateType2.equals((Object)templateType0));
      assertFalse(templateType2.equals((Object)templateType1));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(instanceObjectType0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNamedType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertTrue(instanceObjectType0.isResolved());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isStructuralInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isNumberValueType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isNoType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isOrdinaryFunction());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isCheckedUnknownType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.hasCachedValues());
      assertEquals("IOBJECT_VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isLet());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isExponent());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isExport());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCast());
      assertEquals("IOBJECT_VALUE", node0.getString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isSpread());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isYield());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isConst());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.hasParent());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isBlock());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isTemplateLitString());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isRoot());
      assertFalse(node0.isNew());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isEQ());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isNeg());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isLabel());
      assertFalse(node0.isForIn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isTrue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBigInt());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isIn());
      assertFalse(node0.isForOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isRest());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(templateType2.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertFalse(templateType2.isFunctionType());
      assertEquals(0, templateType2.getTemplateParamCount());
      assertTrue(templateType2.isResolved());
      assertFalse(templateType2.isNominalConstructorOrInterface());
      assertFalse(templateType2.isCheckedUnknownType());
      assertFalse(templateType2.isNullType());
      assertFalse(templateType2.isUnsuccessfullyResolved());
      assertTrue(templateType2.isTemplateType());
      assertFalse(templateType2.isStructuralInterface());
      assertFalse(templateType2.isLiteralObject());
      assertFalse(templateType2.isRawTypeOfTemplatizedType());
      assertFalse(templateType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType2.isEnumElementType());
      assertFalse(templateType2.isNamedType());
      assertFalse(templateType2.isTemplatizedType());
      assertFalse(templateType2.isNoResolvedType());
      assertTrue(templateType2.hasAnyTemplateTypesInternal());
      assertEquals("TYPE", templateType2.getReferenceName());
      assertFalse(templateType2.isOrdinaryFunction());
      assertFalse(templateType2.isVoidType());
      assertTrue(templateType2.isSuccessfullyResolved());
      assertTrue(templateType2.isObject());
      assertFalse(templateType2.isStringValueType());
      assertFalse(templateType2.isAllType());
      assertFalse(templateType2.isSymbolValueType());
      assertFalse(templateType2.isInterface());
      assertFalse(templateType2.isNoObjectType());
      assertFalse(templateType2.isNativeObjectType());
      assertFalse(templateType2.isNoType());
      assertFalse(templateType2.isBigIntValueType());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isBooleanValueType());
      assertFalse(templateType2.isRecordType());
      assertTrue(templateType2.isTypeTransformation());
      assertFalse(templateType2.isConstructor());
      assertFalse(templateType2.isUnionType());
      assertFalse(templateType2.isEnumType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(templateType0, templateType1);
      assertNotSame(templateType0, templateType3);
      assertNotSame(templateType0, templateType2);
      assertSame(templateType1, templateType0);
      assertNotSame(templateType1, templateType3);
      assertNotSame(templateType1, templateType2);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(templateType2, templateType3);
      assertNotSame(templateType2, templateType0);
      assertNotSame(templateType2, templateType1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      Node node0 = Node.newString("UNUSED_RETURN_T");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isStringKey());
      assertFalse(node0.isExport());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isSub());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isYield());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isComma());
      assertFalse(node0.hasParent());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAwait());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isImportStar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDo());
      assertFalse(node0.isSuper());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isVoid());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isForIn());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isNeg());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isDefaultValue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isTry());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isRest());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isImport());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClass());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSpread());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isComputedFieldDef());
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, (String) null);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression0);
      assertFalse(node0.isStringKey());
      assertFalse(node0.isExport());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isSub());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isYield());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isComma());
      assertFalse(node0.hasParent());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAwait());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isImportStar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDo());
      assertFalse(node0.isSuper());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isVoid());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isForIn());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isNeg());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isDefaultValue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isTry());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isRest());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isImport());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClass());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSpread());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      
      JSTypeExpression jSTypeExpression1 = JSTypeExpression.makeOptionalArg(jSTypeExpression0);
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression1);
      assertFalse(node0.isStringKey());
      assertFalse(node0.isExport());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isContinue());
      assertTrue(node0.hasParent());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isSub());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isYield());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isComma());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAwait());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isImportStar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDo());
      assertFalse(node0.isSuper());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isVoid());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isForIn());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isNeg());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isDefaultValue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isTry());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isRest());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isImport());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClass());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSpread());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      ImmutableSet<String> immutableSet0 = jSTypeExpression1.getRecordPropertyNames();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(immutableSet0);
      assertFalse(node0.isStringKey());
      assertFalse(node0.isExport());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isContinue());
      assertTrue(node0.hasParent());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isSub());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isYield());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isComma());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAwait());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isImportStar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDo());
      assertFalse(node0.isSuper());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isVoid());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isForIn());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isNeg());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isDefaultValue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isTry());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isRest());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isImport());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClass());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSpread());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      JSTypeExpression jSTypeExpression2 = jSTypeExpression0.replaceNamesWithUnknownType(immutableSet0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(jSTypeExpression2.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression2.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression2);
      assertFalse(node0.isStringKey());
      assertFalse(node0.isExport());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isContinue());
      assertTrue(node0.hasParent());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isSub());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isYield());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isComma());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAwait());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isImportStar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDo());
      assertFalse(node0.isSuper());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isVoid());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isForIn());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isNeg());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isDefaultValue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isTry());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isRest());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isImport());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClass());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSpread());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertFalse(jSTypeExpression2.isVarArgs());
      assertFalse(jSTypeExpression2.isOptionalArg());
      assertNull(jSTypeExpression2.getSourceName());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression0, jSTypeExpression2);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertNotSame(jSTypeExpression1, jSTypeExpression2);
      assertNotSame(jSTypeExpression2, jSTypeExpression1);
      assertNotSame(jSTypeExpression2, jSTypeExpression0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, immutableSet0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression2));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeRegistry0);
      assertFalse(node0.isStringKey());
      assertFalse(node0.isExport());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isContinue());
      assertTrue(node0.hasParent());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isSub());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isYield());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isComma());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAwait());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isImportStar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDo());
      assertFalse(node0.isSuper());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isVoid());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isForIn());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isNeg());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isDefaultValue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isTry());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isRest());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isImport());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClass());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSpread());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      
      JSType jSType0 = jSTypeRegistry0.evaluateTypeExpressionInGlobalScope(jSTypeExpression1);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression2));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression2));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSType0);
      assertFalse(node0.isStringKey());
      assertFalse(node0.isExport());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLet());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isContinue());
      assertTrue(node0.hasParent());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isSub());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isYield());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isComma());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAwait());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isImportStar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDo());
      assertFalse(node0.isSuper());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isVoid());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRoot());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isDestructuringLhs());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isForIn());
      assertFalse(node0.isEQ());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isNeg());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isDefaultValue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isTry());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isWith());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isRest());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isImport());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClass());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSpread());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNull(jSTypeExpression0.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertEquals(0, immutableSet0.size());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isStringValueType());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression0, jSTypeExpression2);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertNotSame(jSTypeExpression1, jSTypeExpression2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, set0);
      assertNotNull(jSTypeRegistry0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      NamedType namedType0 = jSTypeRegistry0.createNamedType((StaticTypedScope) null, "&2eE.", "[internal]", 1171, 1171);
      assertNotNull(namedType0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isTemplatizedType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isStructuralInterface());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isBigIntValueType());
      assertTrue(namedType0.isResolved());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNominalConstructorOrInterface());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isLiteralObject());
      assertEquals("&2eE.", namedType0.getReferenceName());
      assertEquals(0, namedType0.getTemplateParamCount());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertTrue(namedType0.isNamedType());
      assertFalse(namedType0.isUnsuccessfullyResolved());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isRawTypeOfTemplatizedType());
      assertFalse(namedType0.isSymbolValueType());
      assertFalse(namedType0.isNativeObjectType());
      assertTrue(namedType0.isSuccessfullyResolved());
      assertFalse(namedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNullType());
      assertFalse(set0.contains("&2eE."));
      
      ImmutableList<TemplateType> immutableList0 = jSTypeRegistry0.maybeGetTemplateTypesOfBuiltin("[internal]");
      assertNull(immutableList0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("[internal]"));
      
      // Undeclared exception!
      try { 
        Node.newNumber((-3383.774125012757));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -3383.774125012757
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = false;
      TypeStringBuilder typeStringBuilder0 = new TypeStringBuilder(false);
      assertNotNull(typeStringBuilder0);
      
      String string0 = "g";
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertNotNull(jSTypeRegistry0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(string0));
      
      HashMap<String, StringType> hashMap0 = new HashMap<String, StringType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry0.createRecordType(hashMap0);
      assertNotNull(instanceObjectType0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertTrue(instanceObjectType0.isObject());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(linkedHashSet0.contains(string0));
      
      Token token0 = Token.SHEQ;
      Token token1 = Token.HOOK;
      Node node0 = Node.newString(token1, "modifies");
      assertFalse(token1.equals((Object)token0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isExponent());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSuper());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isObjectRest());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSpread());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isLet());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasParent());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertEquals(Token.HOOK, node0.getToken());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isForOf());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isTry());
      assertFalse(node0.isYield());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isAwait());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isRest());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExport());
      assertFalse(node0.isFalse());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertTrue(node0.isHook());
      assertFalse(node0.isRoot());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNeg());
      assertFalse(node0.isName());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertFalse(node0.isDo());
      assertFalse(node0.isEQ());
      assertEquals("modifies", node0.getString());
      assertFalse(node0.isLabel());
      assertFalse(node0.isForIn());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isNE());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isConst());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isSub());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isNot());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isInc());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isCast());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertNotSame(token1, token0);
      
      Node node1 = null;
      try {
        node1 = new Node(token0, node0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Has parent: com.google.javascript.rhino.Node$StringNode@0000001770
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      TemplateType templateType0 = jSTypeRegistry0.getIThenableTemplate();
      assertNotNull(templateType0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isBigIntValueType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals("TYPE", templateType0.getReferenceName());
      assertFalse(templateType0.isStringValueType());
      
      TypeStringBuilder typeStringBuilder0 = new TypeStringBuilder(false);
      assertNotNull(typeStringBuilder0);
      
      templateType0.appendTo(typeStringBuilder0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isBigIntValueType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals("TYPE", templateType0.getReferenceName());
      assertFalse(templateType0.isStringValueType());
      
      TemplateType templateType1 = (TemplateType)jSTypeRegistry0.findCommonSuperObject(templateType0, templateType0);
      assertNotNull(templateType1);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isBigIntValueType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals("TYPE", templateType0.getReferenceName());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isVoidType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isInterface());
      assertEquals("TYPE", templateType1.getReferenceName());
      assertFalse(templateType1.isStringValueType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isEnumElementType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertTrue(templateType1.isObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[7];
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNative0;
      jSTypeNativeArray0[2] = jSTypeNative0;
      jSTypeNativeArray0[3] = jSTypeNative0;
      jSTypeNativeArray0[4] = jSTypeNative0;
      jSTypeNativeArray0[5] = jSTypeNative0;
      jSTypeNativeArray0[6] = jSTypeNative0;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(functionType0);
      assertFalse(functionType0.isAbstract());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isTemplatizedType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNamedType());
      assertFalse(functionType0.isBigIntValueType());
      assertFalse(functionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isStructuralInterface());
      assertNull(functionType0.getGoogModuleId());
      assertTrue(functionType0.isNativeObjectType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNominalConstructorOrInterface());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isAnonymous());
      assertFalse(functionType0.isLiteralObject());
      assertTrue(functionType0.canBeCalled());
      assertEquals(0, functionType0.getTemplateParamCount());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.matchesObjectContext());
      assertNull(functionType0.getClosurePrimitive());
      assertFalse(functionType0.isUnsuccessfullyResolved());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isObject());
      assertTrue(functionType0.isSuccessfullyResolved());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isSymbolValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isRawTypeOfTemplatizedType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(7, jSTypeNativeArray0.length);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, set0);
      assertNotNull(jSTypeRegistry0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      ArrayList<ObjectType> arrayList0 = new ArrayList<ObjectType>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TemplateTypeMap templateTypeMap0 = jSTypeRegistry0.getEmptyTemplateTypeMap();
      assertNotNull(templateTypeMap0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isAbstract());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      
      ImmutableList<TemplateType> immutableList0 = jSTypeRegistry0.maybeGetTemplateTypesOfBuiltin("IOBJECT_VALUE");
      assertNull(immutableList0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("IOBJECT_VALUE"));
      
      JSType jSType0 = jSTypeRegistry0.createNullableType(noResolvedType0);
      assertNotNull(jSType0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertTrue(noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isAbstract());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isStringValueType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(set0.contains("IOBJECT_VALUE"));
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.getReadableTypeName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNativeObjectType());
      assertFalse(voidType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(voidType0.isResolved());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isTemplatizedType());
      assertFalse(voidType0.isLiteralObject());
      assertFalse(voidType0.isSymbolValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isBigIntValueType());
      assertFalse(voidType0.isNamedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isRawTypeOfTemplatizedType());
      assertTrue(voidType0.isSuccessfullyResolved());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isUnsuccessfullyResolved());
      assertTrue(voidType0.isExplicitlyVoidable());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isUnionType());
      assertTrue(voidType0.isVoidable());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isInterface());
      assertEquals(0, voidType0.getTemplateParamCount());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isStructuralInterface());
      assertTrue(voidType0.matchesStringContext());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isNominalConstructorOrInterface());
      assertFalse(voidType0.isStringValueType());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.getReadableTypeName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      simpleErrorReporter0.warning("`dKnRLvof%Iis0", "%s (%s) must not be negative", 545, 545);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry0.findCommonSuperObject((ObjectType) null, (ObjectType) null);
      assertNotNull(instanceObjectType0);
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertTrue(instanceObjectType0.isObject());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertTrue(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) instanceObjectType0, (Map<TemplateType, JSType>) hashMap0);
      assertNotNull(templatizedType0);
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertTrue(instanceObjectType0.isObject());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertTrue(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isFunctionType());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isStructuralInterface());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isRecordType());
      assertEquals(2, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isConstructor());
      assertTrue(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isNoType());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isBigIntValueType());
      
      boolean boolean0 = templatizedType0.canBeCalled();
      assertFalse(boolean0);
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertTrue(instanceObjectType0.isObject());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertTrue(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isFunctionType());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isStructuralInterface());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isRecordType());
      assertEquals(2, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isConstructor());
      assertTrue(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isNoType());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isBigIntValueType());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("%s (%s) must not be negative"));
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, linkedHashSet0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("%s (%s) must not be negative"));
      
      TemplateType templateType0 = jSTypeRegistry1.getObjectIndexKey();
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(templateType0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals("IOBJECT_KEY", templateType0.getReferenceName());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isTemplateType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNamedType());
      assertFalse(linkedHashSet0.contains("%s (%s) must not be negative"));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(noResolvedType0);
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isAnonymous());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      
      TemplateType templateType1 = jSTypeRegistry0.getIThenableTemplate();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(templateType1.equals((Object)templateType0));
      assertNotNull(templateType1);
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isCheckedUnknownType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isOrdinaryFunction());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isVoidType());
      assertTrue(templateType1.isTemplateType());
      assertEquals("TYPE", templateType1.getReferenceName());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNumberValueType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.hasCachedValues());
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(templateType1, templateType0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      Node node0 = Node.newString("UNUSED_RETURN_T");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isAwait());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSpread());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSuper());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isForIn());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.hasParent());
      assertFalse(node0.isNull());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLet());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isEQ());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNormalBlock());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSub());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIndexSignature());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNE());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isYield());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertNull(node0.getOriginalName());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isConst());
      assertFalse(node0.isCase());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isForOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isRecordType());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.isString());
      assertFalse(node0.isExport());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExponent());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNeg());
      assertFalse(node0.isRoot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRest());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isWith());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, (String) null);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression0);
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isAwait());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSpread());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSuper());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isForIn());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.hasParent());
      assertFalse(node0.isNull());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLet());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isEQ());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNormalBlock());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSub());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIndexSignature());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNE());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isYield());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertNull(node0.getOriginalName());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isConst());
      assertFalse(node0.isCase());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isForOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isRecordType());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.isString());
      assertFalse(node0.isExport());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExponent());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNeg());
      assertFalse(node0.isRoot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRest());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isWith());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression0.getSourceName());
      
      JSTypeExpression jSTypeExpression1 = JSTypeExpression.makeOptionalArg(jSTypeExpression0);
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression1);
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isAwait());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSpread());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSuper());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isForIn());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNull());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLet());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isEQ());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNormalBlock());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSub());
      assertTrue(node0.hasParent());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIndexSignature());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNE());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isYield());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertNull(node0.getOriginalName());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isConst());
      assertFalse(node0.isCase());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isForOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isRecordType());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.isString());
      assertFalse(node0.isExport());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExponent());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNeg());
      assertFalse(node0.isRoot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRest());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isWith());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      ImmutableSet<String> immutableSet0 = jSTypeExpression1.getRecordPropertyNames();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(immutableSet0);
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isAwait());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSpread());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSuper());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isForIn());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNull());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLet());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isEQ());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNormalBlock());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSub());
      assertTrue(node0.hasParent());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIndexSignature());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNE());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isYield());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertNull(node0.getOriginalName());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isConst());
      assertFalse(node0.isCase());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isForOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isRecordType());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.isString());
      assertFalse(node0.isExport());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExponent());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNeg());
      assertFalse(node0.isRoot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRest());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isWith());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, immutableSet0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeRegistry0);
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isAwait());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSpread());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSuper());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isForIn());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNull());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLet());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isEQ());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNormalBlock());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSub());
      assertTrue(node0.hasParent());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIndexSignature());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNE());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isYield());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertNull(node0.getOriginalName());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isConst());
      assertFalse(node0.isCase());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isForOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isRecordType());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.isString());
      assertFalse(node0.isExport());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExponent());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNeg());
      assertFalse(node0.isRoot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRest());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isWith());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      TemplateTypeReplacer templateTypeReplacer0 = TemplateTypeReplacer.forInference(jSTypeRegistry0, hashMap0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateTypeReplacer0);
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isAwait());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSpread());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSuper());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isForIn());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNull());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLet());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isEQ());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNormalBlock());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSub());
      assertTrue(node0.hasParent());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIndexSignature());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNE());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isYield());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertNull(node0.getOriginalName());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isConst());
      assertFalse(node0.isCase());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isForOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isRecordType());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.isString());
      assertFalse(node0.isExport());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExponent());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNeg());
      assertFalse(node0.isRoot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRest());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isWith());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      JSType jSType0 = templateTypeReplacer0.caseNumberType();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSType0);
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isAwait());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSpread());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSuper());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isForIn());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNull());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLet());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isEQ());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNormalBlock());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSub());
      assertTrue(node0.hasParent());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIndexSignature());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNE());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isYield());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertNull(node0.getOriginalName());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isConst());
      assertFalse(node0.isCase());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isForOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isRecordType());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.isString());
      assertFalse(node0.isExport());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExponent());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNeg());
      assertFalse(node0.isRoot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRest());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isWith());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isTemplatizedType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isBigIntValueType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isNamedType());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.matchesObjectContext());
      assertEquals("number", jSType0.getDisplayName());
      assertFalse(jSType0.isNullType());
      assertTrue(jSType0.isNumberValueType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      jSTypeRegistry0.registerPropertyOnType((String) null, jSType0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isAwait());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSpread());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSuper());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isForIn());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNull());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLet());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isEQ());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNormalBlock());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSub());
      assertTrue(node0.hasParent());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIndexSignature());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNE());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isYield());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertNull(node0.getOriginalName());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isConst());
      assertFalse(node0.isCase());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isForOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isRecordType());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.isString());
      assertFalse(node0.isExport());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExponent());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNeg());
      assertFalse(node0.isRoot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRest());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isWith());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isTemplatizedType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isBigIntValueType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isNamedType());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.matchesObjectContext());
      assertEquals("number", jSType0.getDisplayName());
      assertFalse(jSType0.isNullType());
      assertTrue(jSType0.isNumberValueType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType((String) null);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateType0);
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isAwait());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSpread());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSuper());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isForIn());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNull());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLet());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isEQ());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNormalBlock());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSub());
      assertTrue(node0.hasParent());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIndexSignature());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNE());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isYield());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertNull(node0.getOriginalName());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isConst());
      assertFalse(node0.isCase());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isForOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isRecordType());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.isString());
      assertFalse(node0.isExport());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExponent());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNeg());
      assertFalse(node0.isRoot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRest());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isWith());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isEnumType());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      JSType jSType1 = jSTypeRegistry0.createNullableType(jSType0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSType1);
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isAwait());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSpread());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSuper());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isForIn());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNull());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLet());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isEQ());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNormalBlock());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSub());
      assertTrue(node0.hasParent());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIndexSignature());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNE());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isYield());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertNull(node0.getOriginalName());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isConst());
      assertFalse(node0.isCase());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isForOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isRecordType());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.isString());
      assertFalse(node0.isExport());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExponent());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNeg());
      assertFalse(node0.isRoot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRest());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isWith());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isTemplatizedType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isBigIntValueType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isNamedType());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.matchesObjectContext());
      assertEquals("number", jSType0.getDisplayName());
      assertFalse(jSType0.isNullType());
      assertTrue(jSType0.isNumberValueType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType1.isEnumElementType());
      assertEquals(0, jSType1.getTemplateParamCount());
      assertFalse(jSType1.isFunctionPrototypeType());
      assertFalse(jSType1.isTemplatizedType());
      assertFalse(jSType1.isEnumType());
      assertFalse(jSType1.isAllType());
      assertFalse(jSType1.isVoidType());
      assertTrue(jSType1.isSuccessfullyResolved());
      assertFalse(jSType1.isNamedType());
      assertFalse(jSType1.isTemplateType());
      assertFalse(jSType1.isNativeObjectType());
      assertFalse(jSType1.isStringValueType());
      assertFalse(jSType1.isUnsuccessfullyResolved());
      assertTrue(jSType1.isResolved());
      assertFalse(jSType1.isStructuralInterface());
      assertFalse(jSType1.isOrdinaryFunction());
      assertFalse(jSType1.isInterface());
      assertFalse(jSType1.isConstructor());
      assertFalse(jSType1.isLiteralObject());
      assertFalse(jSType1.isRecordType());
      assertFalse(jSType1.isNominalConstructorOrInterface());
      assertFalse(jSType1.isNoObjectType());
      assertTrue(jSType1.isUnionType());
      assertFalse(jSType1.isNoType());
      assertFalse(jSType1.isRawTypeOfTemplatizedType());
      assertFalse(jSType1.isFunctionType());
      assertFalse(jSType1.isBigIntValueType());
      assertFalse(jSType1.isNoResolvedType());
      assertFalse(jSType1.isNumberValueType());
      assertFalse(jSType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType1.isBooleanValueType());
      assertFalse(jSType1.isNullType());
      assertFalse(jSType1.isSymbolValueType());
      assertFalse(jSType1.isCheckedUnknownType());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap1 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      JSType jSType2 = jSTypeRegistry0.createOptionalType(jSType0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(jSType2.equals((Object)jSType1));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSType2);
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isAwait());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSpread());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSuper());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isForIn());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNull());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLet());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isEQ());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNormalBlock());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSub());
      assertTrue(node0.hasParent());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIndexSignature());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNE());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isYield());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertNull(node0.getOriginalName());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isConst());
      assertFalse(node0.isCase());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isForOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isRecordType());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.isString());
      assertFalse(node0.isExport());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExponent());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNeg());
      assertFalse(node0.isRoot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRest());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isWith());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isTemplatizedType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isBigIntValueType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNativeObjectType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isNamedType());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.matchesObjectContext());
      assertEquals("number", jSType0.getDisplayName());
      assertFalse(jSType0.isNullType());
      assertTrue(jSType0.isNumberValueType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType2.isFunctionPrototypeType());
      assertFalse(jSType2.isTemplatizedType());
      assertFalse(jSType2.isEnumElementType());
      assertFalse(jSType2.isVoidType());
      assertFalse(jSType2.isStructuralInterface());
      assertFalse(jSType2.isNumberValueType());
      assertFalse(jSType2.isNoResolvedType());
      assertEquals(0, jSType2.getTemplateParamCount());
      assertFalse(jSType2.isEnumType());
      assertTrue(jSType2.isUnionType());
      assertFalse(jSType2.isNativeObjectType());
      assertFalse(jSType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType2.isBigIntValueType());
      assertFalse(jSType2.isNamedType());
      assertTrue(jSType2.isResolved());
      assertFalse(jSType2.isStringValueType());
      assertFalse(jSType2.isNominalConstructorOrInterface());
      assertFalse(jSType2.isInterface());
      assertFalse(jSType2.isRecordType());
      assertFalse(jSType2.isConstructor());
      assertFalse(jSType2.isOrdinaryFunction());
      assertFalse(jSType2.isFunctionType());
      assertFalse(jSType2.isLiteralObject());
      assertFalse(jSType2.isTemplateType());
      assertFalse(jSType2.isUnsuccessfullyResolved());
      assertFalse(jSType2.isAllType());
      assertFalse(jSType2.isRawTypeOfTemplatizedType());
      assertFalse(jSType2.isBooleanValueType());
      assertFalse(jSType2.isNoObjectType());
      assertFalse(jSType2.isSymbolValueType());
      assertFalse(jSType2.isNoType());
      assertTrue(jSType2.isSuccessfullyResolved());
      assertFalse(jSType2.isCheckedUnknownType());
      assertFalse(jSType2.isNullType());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertNotSame(jSType2, jSType1);
      
      boolean boolean0 = jSTypeRegistry0.isForwardDeclaredType("&2eE.");
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(boolean0);
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isThis());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isAwait());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSpread());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isSuper());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isForIn());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNull());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLet());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isEQ());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNormalBlock());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSub());
      assertTrue(node0.hasParent());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIndexSignature());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNE());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isYield());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertNull(node0.getOriginalName());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isConst());
      assertFalse(node0.isCase());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isForOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isRecordType());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectPattern());
      assertTrue(node0.isString());
      assertFalse(node0.isExport());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExponent());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNeg());
      assertFalse(node0.isRoot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRest());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isWith());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression0.getSourceName());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("&2eE."));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashMap<String, EnumType> hashMap0 = new HashMap<String, EnumType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry0.createRecordType(hashMap0);
      assertNotNull(instanceObjectType0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertTrue(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isUnionType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isVoidType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      
      TypeStringBuilder typeStringBuilder0 = new TypeStringBuilder(false);
      assertNotNull(typeStringBuilder0);
      
      TemplateType templateType0 = jSTypeRegistry0.getAsyncIterableTemplate();
      assertNotNull(templateType0);
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isLiteralObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      
      InstanceObjectType instanceObjectType1 = (InstanceObjectType)jSTypeRegistry0.findCommonSuperObject(instanceObjectType0, templateType0);
      assertNotNull(instanceObjectType1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertTrue(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isUnionType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isVoidType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isLiteralObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(instanceObjectType1.isStructuralInterface());
      assertFalse(instanceObjectType1.isNullType());
      assertFalse(instanceObjectType1.isBooleanValueType());
      assertTrue(instanceObjectType1.isNativeObjectType());
      assertFalse(instanceObjectType1.isTemplateType());
      assertFalse(instanceObjectType1.isEnumType());
      assertFalse(instanceObjectType1.isTemplatizedType());
      assertFalse(instanceObjectType1.isFunctionType());
      assertFalse(instanceObjectType1.isVoidType());
      assertFalse(instanceObjectType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType1.isAllType());
      assertFalse(instanceObjectType1.isEnumElementType());
      assertFalse(instanceObjectType1.hasCachedValues());
      assertFalse(instanceObjectType1.isCheckedUnknownType());
      assertTrue(instanceObjectType1.isInstanceType());
      assertFalse(instanceObjectType1.isNumberValueType());
      assertFalse(instanceObjectType1.isUnionType());
      assertFalse(instanceObjectType1.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType1.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType1.isConstructor());
      assertTrue(instanceObjectType1.isObject());
      assertEquals(2, instanceObjectType1.getTemplateParamCount());
      assertTrue(instanceObjectType1.matchesObjectContext());
      assertFalse(instanceObjectType1.isSymbolValueType());
      assertFalse(instanceObjectType1.isUnsuccessfullyResolved());
      assertTrue(instanceObjectType1.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType1.isNoType());
      assertFalse(instanceObjectType1.isFunctionPrototypeType());
      assertFalse(instanceObjectType1.isNoObjectType());
      assertFalse(instanceObjectType1.isInterface());
      assertFalse(instanceObjectType1.isAnonymous());
      assertFalse(instanceObjectType1.isBigIntValueType());
      assertFalse(instanceObjectType1.isNoResolvedType());
      assertTrue(instanceObjectType1.isSuccessfullyResolved());
      assertFalse(instanceObjectType1.isLiteralObject());
      assertFalse(instanceObjectType1.isStringValueType());
      assertFalse(instanceObjectType1.isNamedType());
      assertFalse(instanceObjectType1.isNominalConstructorOrInterface());
      assertTrue(instanceObjectType1.isResolved());
      assertFalse(instanceObjectType1.isOrdinaryFunction());
      assertSame(instanceObjectType0, instanceObjectType1);
      assertSame(instanceObjectType1, instanceObjectType0);
      
      HashSet<String> hashSet0 = new LinkedHashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, hashSet0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      RecordType recordType0 = templateType0.toMaybeRecordType();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNull(recordType0);
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isLiteralObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createNullableType((JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, set0);
      assertNotNull(jSTypeRegistry0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Iterable<ObjectType> iterable0 = jSTypeRegistry0.getEachReferenceTypeWithProperty("B");
      assertNotNull(iterable0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("B"));
      
      TemplateTypeMap templateTypeMap0 = jSTypeRegistry0.getEmptyTemplateTypeMap();
      assertNotNull(templateTypeMap0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("B"));
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isResolved());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(set0.contains("B"));
      
      Node node0 = noResolvedType0.getOwnPropertyDefSite("B");
      assertNull(node0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isResolved());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(set0.contains("B"));
      
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      assertNotNull(templateType0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isLiteralObject());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(set0.contains("B"));
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      NoType noType0 = (NoType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(noType0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(noType0.isRawTypeOfTemplatizedType());
      assertEquals(0, noType0.getTemplateParamCount());
      assertTrue(noType0.matchesObjectContext());
      assertNull(noType0.getGoogModuleId());
      assertFalse(noType0.isBigIntValueType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.hasInstanceType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isSymbolValueType());
      assertTrue(noType0.isNativeObjectType());
      assertFalse(noType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.matchesSymbolContext());
      assertTrue(noType0.isResolved());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isAnonymous());
      assertTrue(noType0.isNoType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isUnsuccessfullyResolved());
      assertNull(noType0.getClosurePrimitive());
      assertFalse(noType0.isConstructor());
      assertFalse(noType0.isNamedType());
      assertTrue(noType0.isSuccessfullyResolved());
      assertFalse(noType0.isNominalConstructorOrInterface());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isVoidable());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isStructuralInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isAbstract());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isTemplatizedType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isLiteralObject());
      assertFalse(noType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.canBeCalled());
      assertFalse(set0.contains("B"));
      assertEquals(0, jSTypeNativeArray0.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      Node node0 = Node.newString("UNUSED_RETURN_T");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isImport());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isClass());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isLabel());
      assertFalse(node0.isEQ());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isHook());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isCase());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isScript());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isForIn());
      assertFalse(node0.isSHNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isExponent());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isRoot());
      assertFalse(node0.isCast());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSpread());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasParent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isLet());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isInterfaceMembers());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isNE());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isInc());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isConst());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, (String) null);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isImport());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isClass());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isLabel());
      assertFalse(node0.isEQ());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isHook());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isCase());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isScript());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isForIn());
      assertFalse(node0.isSHNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isExponent());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isRoot());
      assertFalse(node0.isCast());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSpread());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasParent());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isLet());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isInterfaceMembers());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isNE());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isInc());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isConst());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      
      JSTypeExpression jSTypeExpression1 = JSTypeExpression.makeOptionalArg(jSTypeExpression0);
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression1);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isImport());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isClass());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isLabel());
      assertFalse(node0.isEQ());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isHook());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isCase());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isScript());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isForIn());
      assertFalse(node0.isSHNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isExponent());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isRoot());
      assertFalse(node0.isCast());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSpread());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isLet());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isInterfaceMembers());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isNE());
      assertFalse(node0.isMemberVariableDef());
      assertTrue(node0.hasParent());
      assertFalse(node0.isFunction());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isInc());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isConst());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      
      ImmutableSet<String> immutableSet0 = jSTypeExpression1.getRecordPropertyNames();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(immutableSet0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isImport());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isClass());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isLabel());
      assertFalse(node0.isEQ());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isHook());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isCase());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isScript());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isForIn());
      assertFalse(node0.isSHNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isExponent());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isRoot());
      assertFalse(node0.isCast());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSpread());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isLet());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isInterfaceMembers());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isNE());
      assertFalse(node0.isMemberVariableDef());
      assertTrue(node0.hasParent());
      assertFalse(node0.isFunction());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isInc());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isConst());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, immutableSet0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeRegistry0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isImport());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isClass());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isLabel());
      assertFalse(node0.isEQ());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isHook());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isCase());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isScript());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isForIn());
      assertFalse(node0.isSHNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isExponent());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isRoot());
      assertFalse(node0.isCast());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSpread());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isLet());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isInterfaceMembers());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isNE());
      assertFalse(node0.isMemberVariableDef());
      assertTrue(node0.hasParent());
      assertFalse(node0.isFunction());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isInc());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isConst());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      TemplateTypeReplacer templateTypeReplacer0 = TemplateTypeReplacer.forInference(jSTypeRegistry0, hashMap0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateTypeReplacer0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isImport());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isClass());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isLabel());
      assertFalse(node0.isEQ());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isHook());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isCase());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isScript());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isForIn());
      assertFalse(node0.isSHNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isExponent());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isRoot());
      assertFalse(node0.isCast());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSpread());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isLet());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isInterfaceMembers());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isNE());
      assertFalse(node0.isMemberVariableDef());
      assertTrue(node0.hasParent());
      assertFalse(node0.isFunction());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isInc());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isConst());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "UNUSED_RETURN_T");
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateType0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isImport());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isClass());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isLabel());
      assertFalse(node0.isEQ());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isHook());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isCase());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isScript());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isForIn());
      assertFalse(node0.isSHNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isExponent());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isRoot());
      assertFalse(node0.isCast());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSpread());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isLet());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isInterfaceMembers());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isNE());
      assertFalse(node0.isMemberVariableDef());
      assertTrue(node0.hasParent());
      assertFalse(node0.isFunction());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isInc());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isConst());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertEquals("UNUSED_RETURN_T", templateType0.getReferenceName());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNumberValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isInterface());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, templateType0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(proxyObjectType0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isImport());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isClass());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isLabel());
      assertFalse(node0.isEQ());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isHook());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isCase());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isScript());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isForIn());
      assertFalse(node0.isSHNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isExponent());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isRoot());
      assertFalse(node0.isCast());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSpread());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isLet());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isInterfaceMembers());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isNE());
      assertFalse(node0.isMemberVariableDef());
      assertTrue(node0.hasParent());
      assertFalse(node0.isFunction());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isInc());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isConst());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertEquals("UNUSED_RETURN_T", templateType0.getReferenceName());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNumberValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isInterface());
      assertFalse(proxyObjectType0.isUnionType());
      assertFalse(proxyObjectType0.isNamedType());
      assertFalse(proxyObjectType0.isBigIntValueType());
      assertFalse(proxyObjectType0.isNoType());
      assertTrue(proxyObjectType0.isObject());
      assertTrue(proxyObjectType0.isSuccessfullyResolved());
      assertFalse(proxyObjectType0.isNoObjectType());
      assertFalse(proxyObjectType0.isOrdinaryFunction());
      assertFalse(proxyObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(proxyObjectType0.isStringValueType());
      assertFalse(proxyObjectType0.isFunctionPrototypeType());
      assertFalse(proxyObjectType0.isEnumType());
      assertFalse(proxyObjectType0.isInterface());
      assertEquals(0, proxyObjectType0.getTemplateParamCount());
      assertFalse(proxyObjectType0.isVoidType());
      assertFalse(proxyObjectType0.isNativeObjectType());
      assertFalse(proxyObjectType0.hasCachedValues());
      assertFalse(proxyObjectType0.isRecordType());
      assertFalse(proxyObjectType0.isConstructor());
      assertFalse(proxyObjectType0.isNumberValueType());
      assertFalse(proxyObjectType0.isBooleanValueType());
      assertTrue(proxyObjectType0.isResolved());
      assertFalse(proxyObjectType0.isFunctionType());
      assertTrue(proxyObjectType0.isTemplateType());
      assertFalse(proxyObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(proxyObjectType0.isCheckedUnknownType());
      assertFalse(proxyObjectType0.isNullType());
      assertFalse(proxyObjectType0.isSymbolValueType());
      assertFalse(proxyObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(proxyObjectType0.isStructuralInterface());
      assertFalse(proxyObjectType0.isNominalConstructorOrInterface());
      assertFalse(proxyObjectType0.isTemplatizedType());
      assertFalse(proxyObjectType0.isEnumElementType());
      assertFalse(proxyObjectType0.isLiteralObject());
      assertFalse(proxyObjectType0.isUnsuccessfullyResolved());
      assertFalse(proxyObjectType0.isNoResolvedType());
      
      JSType[] jSTypeArray0 = new JSType[0];
      boolean boolean0 = proxyObjectType0.isPropertyTypeDeclared("IOBJECT_VALUE");
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(boolean0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isImport());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isClass());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isLabel());
      assertFalse(node0.isEQ());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isHook());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isCase());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isScript());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isForIn());
      assertFalse(node0.isSHNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isExponent());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isRoot());
      assertFalse(node0.isCast());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSpread());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isLet());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isInterfaceMembers());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isNE());
      assertFalse(node0.isMemberVariableDef());
      assertTrue(node0.hasParent());
      assertFalse(node0.isFunction());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isInc());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isConst());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertEquals("UNUSED_RETURN_T", templateType0.getReferenceName());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNumberValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isInterface());
      assertFalse(proxyObjectType0.isUnionType());
      assertFalse(proxyObjectType0.isNamedType());
      assertFalse(proxyObjectType0.isBigIntValueType());
      assertFalse(proxyObjectType0.isNoType());
      assertTrue(proxyObjectType0.isObject());
      assertTrue(proxyObjectType0.isSuccessfullyResolved());
      assertFalse(proxyObjectType0.isNoObjectType());
      assertFalse(proxyObjectType0.isOrdinaryFunction());
      assertFalse(proxyObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(proxyObjectType0.isStringValueType());
      assertFalse(proxyObjectType0.isFunctionPrototypeType());
      assertFalse(proxyObjectType0.isEnumType());
      assertFalse(proxyObjectType0.isInterface());
      assertEquals(0, proxyObjectType0.getTemplateParamCount());
      assertFalse(proxyObjectType0.isVoidType());
      assertFalse(proxyObjectType0.isNativeObjectType());
      assertFalse(proxyObjectType0.hasCachedValues());
      assertFalse(proxyObjectType0.isRecordType());
      assertFalse(proxyObjectType0.isConstructor());
      assertFalse(proxyObjectType0.isNumberValueType());
      assertFalse(proxyObjectType0.isBooleanValueType());
      assertTrue(proxyObjectType0.isResolved());
      assertFalse(proxyObjectType0.isFunctionType());
      assertTrue(proxyObjectType0.isTemplateType());
      assertFalse(proxyObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(proxyObjectType0.isCheckedUnknownType());
      assertFalse(proxyObjectType0.isNullType());
      assertFalse(proxyObjectType0.isSymbolValueType());
      assertFalse(proxyObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(proxyObjectType0.isStructuralInterface());
      assertFalse(proxyObjectType0.isNominalConstructorOrInterface());
      assertFalse(proxyObjectType0.isTemplatizedType());
      assertFalse(proxyObjectType0.isEnumElementType());
      assertFalse(proxyObjectType0.isLiteralObject());
      assertFalse(proxyObjectType0.isUnsuccessfullyResolved());
      assertFalse(proxyObjectType0.isNoResolvedType());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) proxyObjectType0, jSTypeArray0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(functionType0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isImport());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isClass());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isLabel());
      assertFalse(node0.isEQ());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isHook());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isCase());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isScript());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isForIn());
      assertFalse(node0.isSHNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isExponent());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isRoot());
      assertFalse(node0.isCast());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSpread());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isLet());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isInterfaceMembers());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isNE());
      assertFalse(node0.isMemberVariableDef());
      assertTrue(node0.hasParent());
      assertFalse(node0.isFunction());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isInc());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isConst());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertEquals("UNUSED_RETURN_T", templateType0.getReferenceName());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNumberValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isInterface());
      assertFalse(proxyObjectType0.isUnionType());
      assertFalse(proxyObjectType0.isNamedType());
      assertFalse(proxyObjectType0.isBigIntValueType());
      assertFalse(proxyObjectType0.isNoType());
      assertTrue(proxyObjectType0.isObject());
      assertTrue(proxyObjectType0.isSuccessfullyResolved());
      assertFalse(proxyObjectType0.isNoObjectType());
      assertFalse(proxyObjectType0.isOrdinaryFunction());
      assertFalse(proxyObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(proxyObjectType0.isStringValueType());
      assertFalse(proxyObjectType0.isFunctionPrototypeType());
      assertFalse(proxyObjectType0.isEnumType());
      assertFalse(proxyObjectType0.isInterface());
      assertEquals(0, proxyObjectType0.getTemplateParamCount());
      assertFalse(proxyObjectType0.isVoidType());
      assertFalse(proxyObjectType0.isNativeObjectType());
      assertFalse(proxyObjectType0.hasCachedValues());
      assertFalse(proxyObjectType0.isRecordType());
      assertFalse(proxyObjectType0.isConstructor());
      assertFalse(proxyObjectType0.isNumberValueType());
      assertFalse(proxyObjectType0.isBooleanValueType());
      assertTrue(proxyObjectType0.isResolved());
      assertFalse(proxyObjectType0.isFunctionType());
      assertTrue(proxyObjectType0.isTemplateType());
      assertFalse(proxyObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(proxyObjectType0.isCheckedUnknownType());
      assertFalse(proxyObjectType0.isNullType());
      assertFalse(proxyObjectType0.isSymbolValueType());
      assertFalse(proxyObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(proxyObjectType0.isStructuralInterface());
      assertFalse(proxyObjectType0.isNominalConstructorOrInterface());
      assertFalse(proxyObjectType0.isTemplatizedType());
      assertFalse(proxyObjectType0.isEnumElementType());
      assertFalse(proxyObjectType0.isLiteralObject());
      assertFalse(proxyObjectType0.isUnsuccessfullyResolved());
      assertFalse(proxyObjectType0.isNoResolvedType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplatizedType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAbstract());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isSuccessfullyResolved());
      assertTrue(functionType0.isObject());
      assertTrue(functionType0.isFunctionType());
      assertEquals(0, functionType0.getTemplateParamCount());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBigIntValueType());
      assertFalse(functionType0.isNativeObjectType());
      assertFalse(functionType0.isSymbolValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.matchesObjectContext());
      assertNull(functionType0.getClosurePrimitive());
      assertFalse(functionType0.isAnonymous());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNominalConstructorOrInterface());
      assertFalse(functionType0.isLiteralObject());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isStructuralInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isRawTypeOfTemplatizedType());
      assertFalse(functionType0.isNoObjectType());
      assertNull(functionType0.getGoogModuleId());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isResolved());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isUnsuccessfullyResolved());
      assertFalse(functionType0.isNamedType());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry0.findCommonSuperObject(functionType0, proxyObjectType0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(instanceObjectType0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isImport());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isClass());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isLabel());
      assertFalse(node0.isEQ());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isHook());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isCase());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isScript());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isForIn());
      assertFalse(node0.isSHNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isExponent());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isRoot());
      assertFalse(node0.isCast());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSpread());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isLet());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isInterfaceMembers());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isNE());
      assertFalse(node0.isMemberVariableDef());
      assertTrue(node0.hasParent());
      assertFalse(node0.isFunction());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isInc());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isConst());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertEquals("UNUSED_RETURN_T", templateType0.getReferenceName());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNumberValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isInterface());
      assertFalse(proxyObjectType0.isUnionType());
      assertFalse(proxyObjectType0.isNamedType());
      assertFalse(proxyObjectType0.isBigIntValueType());
      assertFalse(proxyObjectType0.isNoType());
      assertTrue(proxyObjectType0.isObject());
      assertTrue(proxyObjectType0.isSuccessfullyResolved());
      assertFalse(proxyObjectType0.isNoObjectType());
      assertFalse(proxyObjectType0.isOrdinaryFunction());
      assertFalse(proxyObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(proxyObjectType0.isStringValueType());
      assertFalse(proxyObjectType0.isFunctionPrototypeType());
      assertFalse(proxyObjectType0.isEnumType());
      assertFalse(proxyObjectType0.isInterface());
      assertEquals(0, proxyObjectType0.getTemplateParamCount());
      assertFalse(proxyObjectType0.isVoidType());
      assertFalse(proxyObjectType0.isNativeObjectType());
      assertFalse(proxyObjectType0.hasCachedValues());
      assertFalse(proxyObjectType0.isRecordType());
      assertFalse(proxyObjectType0.isConstructor());
      assertFalse(proxyObjectType0.isNumberValueType());
      assertFalse(proxyObjectType0.isBooleanValueType());
      assertTrue(proxyObjectType0.isResolved());
      assertFalse(proxyObjectType0.isFunctionType());
      assertTrue(proxyObjectType0.isTemplateType());
      assertFalse(proxyObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(proxyObjectType0.isCheckedUnknownType());
      assertFalse(proxyObjectType0.isNullType());
      assertFalse(proxyObjectType0.isSymbolValueType());
      assertFalse(proxyObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(proxyObjectType0.isStructuralInterface());
      assertFalse(proxyObjectType0.isNominalConstructorOrInterface());
      assertFalse(proxyObjectType0.isTemplatizedType());
      assertFalse(proxyObjectType0.isEnumElementType());
      assertFalse(proxyObjectType0.isLiteralObject());
      assertFalse(proxyObjectType0.isUnsuccessfullyResolved());
      assertFalse(proxyObjectType0.isNoResolvedType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplatizedType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAbstract());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isSuccessfullyResolved());
      assertTrue(functionType0.isObject());
      assertTrue(functionType0.isFunctionType());
      assertEquals(0, functionType0.getTemplateParamCount());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBigIntValueType());
      assertFalse(functionType0.isNativeObjectType());
      assertFalse(functionType0.isSymbolValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.matchesObjectContext());
      assertNull(functionType0.getClosurePrimitive());
      assertFalse(functionType0.isAnonymous());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNominalConstructorOrInterface());
      assertFalse(functionType0.isLiteralObject());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isStructuralInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isRawTypeOfTemplatizedType());
      assertFalse(functionType0.isNoObjectType());
      assertNull(functionType0.getGoogModuleId());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isResolved());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isUnsuccessfullyResolved());
      assertFalse(functionType0.isNamedType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isUnionType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNoType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, immutableSet0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeRegistry1);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isImport());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isClass());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isLabel());
      assertFalse(node0.isEQ());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isHook());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isCase());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isScript());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isForIn());
      assertFalse(node0.isSHNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isExponent());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isRoot());
      assertFalse(node0.isCast());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSpread());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isLet());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isInterfaceMembers());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isNE());
      assertFalse(node0.isMemberVariableDef());
      assertTrue(node0.hasParent());
      assertFalse(node0.isFunction());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isInc());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isConst());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      
      ImmutableList<TemplateType> immutableList0 = jSTypeRegistry0.maybeGetTemplateTypesOfBuiltin("");
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNull(immutableList0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isImport());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isClass());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isLabel());
      assertFalse(node0.isEQ());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isHook());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isCase());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isScript());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isForIn());
      assertFalse(node0.isSHNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isExponent());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isRoot());
      assertFalse(node0.isCast());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSpread());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isLet());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isInterfaceMembers());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isNE());
      assertFalse(node0.isMemberVariableDef());
      assertTrue(node0.hasParent());
      assertFalse(node0.isFunction());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isInc());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isConst());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      
      UnionType unionType0 = templateType0.toMaybeUnionType();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNull(unionType0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isImport());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isClass());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isLabel());
      assertFalse(node0.isEQ());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isHook());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isCase());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isScript());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isForIn());
      assertFalse(node0.isSHNE());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isExponent());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAwait());
      assertFalse(node0.isYield());
      assertFalse(node0.isRoot());
      assertFalse(node0.isCast());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSpread());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isLet());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSub());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isForOf());
      assertFalse(node0.isInterfaceMembers());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isNE());
      assertFalse(node0.isMemberVariableDef());
      assertTrue(node0.hasParent());
      assertFalse(node0.isFunction());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isInc());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isConst());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertEquals(0, immutableSet0.size());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      
      ImmutableList<Node> immutableList1 = jSTypeExpression1.getAllTypeNodes();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(immutableList1);
      
      // Undeclared exception!
      try { 
        UnionType.getGreatestSubtype((UnionType) null, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.UnionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      boolean boolean0 = treeSet0.add("then");
      assertTrue(boolean0);
      assertTrue(treeSet0.contains("then"));
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, treeSet0);
      assertNotNull(jSTypeRegistry0);
      assertTrue(treeSet0.contains("then"));
      
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      assertNotNull(templateType0);
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(treeSet0.contains("then"));
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      assertNotNull(templatizedType0);
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isRecordType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isFunctionType());
      assertTrue(templatizedType0.isObject());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isNullType());
      assertTrue(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isNativeObjectType());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isVoidType());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isNoType());
      assertFalse(templatizedType0.isNoObjectType());
      assertTrue(treeSet0.contains("then"));
      
      TypeStringBuilder typeStringBuilder0 = new TypeStringBuilder(false);
      assertNotNull(typeStringBuilder0);
      
      TypeStringBuilder typeStringBuilder1 = typeStringBuilder0.appendAll(treeSet0, (String) null);
      assertNotNull(typeStringBuilder1);
      assertTrue(treeSet0.contains("then"));
      assertSame(typeStringBuilder0, typeStringBuilder1);
      assertSame(typeStringBuilder1, typeStringBuilder0);
      
      MockThread mockThread0 = new MockThread(" (");
      assertNotNull(mockThread0);
      
      TypeStringBuilder typeStringBuilder2 = typeStringBuilder1.indent(mockThread0);
      assertNotNull(typeStringBuilder2);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertTrue(treeSet0.contains("then"));
      assertFalse(treeSet0.contains(" ("));
      assertSame(typeStringBuilder0, typeStringBuilder2);
      assertSame(typeStringBuilder0, typeStringBuilder1);
      assertSame(typeStringBuilder1, typeStringBuilder0);
      assertSame(typeStringBuilder1, typeStringBuilder2);
      assertSame(typeStringBuilder2, typeStringBuilder1);
      assertSame(typeStringBuilder2, typeStringBuilder0);
      
      TypeStringBuilder typeStringBuilder3 = typeStringBuilder2.appendNonNull(templatizedType0);
      assertNotNull(typeStringBuilder3);
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isRecordType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isFunctionType());
      assertTrue(templatizedType0.isObject());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isNullType());
      assertTrue(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isNativeObjectType());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isVoidType());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isNoType());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertTrue(treeSet0.contains("then"));
      assertFalse(treeSet0.contains(" ("));
      assertSame(typeStringBuilder0, typeStringBuilder2);
      assertSame(typeStringBuilder0, typeStringBuilder3);
      assertSame(typeStringBuilder0, typeStringBuilder1);
      assertSame(typeStringBuilder1, typeStringBuilder3);
      assertSame(typeStringBuilder1, typeStringBuilder0);
      assertSame(typeStringBuilder1, typeStringBuilder2);
      assertSame(typeStringBuilder2, typeStringBuilder1);
      assertSame(typeStringBuilder2, typeStringBuilder3);
      assertSame(typeStringBuilder2, typeStringBuilder0);
      assertSame(typeStringBuilder3, typeStringBuilder0);
      assertSame(typeStringBuilder3, typeStringBuilder1);
      assertSame(typeStringBuilder3, typeStringBuilder2);
      
      TypeStringBuilder typeStringBuilder4 = typeStringBuilder3.cloneWithConfig();
      assertFalse(typeStringBuilder4.equals((Object)typeStringBuilder1));
      assertFalse(typeStringBuilder4.equals((Object)typeStringBuilder2));
      assertFalse(typeStringBuilder4.equals((Object)typeStringBuilder3));
      assertFalse(typeStringBuilder4.equals((Object)typeStringBuilder0));
      assertNotNull(typeStringBuilder4);
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isRecordType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isFunctionType());
      assertTrue(templatizedType0.isObject());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isNullType());
      assertTrue(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isNativeObjectType());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isVoidType());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isNoType());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertTrue(treeSet0.contains("then"));
      assertFalse(treeSet0.contains(" ("));
      assertSame(typeStringBuilder0, typeStringBuilder2);
      assertSame(typeStringBuilder0, typeStringBuilder3);
      assertNotSame(typeStringBuilder0, typeStringBuilder4);
      assertSame(typeStringBuilder0, typeStringBuilder1);
      assertSame(typeStringBuilder1, typeStringBuilder3);
      assertNotSame(typeStringBuilder1, typeStringBuilder4);
      assertSame(typeStringBuilder1, typeStringBuilder0);
      assertSame(typeStringBuilder1, typeStringBuilder2);
      assertSame(typeStringBuilder2, typeStringBuilder1);
      assertSame(typeStringBuilder2, typeStringBuilder3);
      assertNotSame(typeStringBuilder2, typeStringBuilder4);
      assertSame(typeStringBuilder2, typeStringBuilder0);
      assertSame(typeStringBuilder3, typeStringBuilder0);
      assertSame(typeStringBuilder3, typeStringBuilder1);
      assertSame(typeStringBuilder3, typeStringBuilder2);
      assertNotSame(typeStringBuilder3, typeStringBuilder4);
      assertNotSame(typeStringBuilder4, typeStringBuilder1);
      assertNotSame(typeStringBuilder4, typeStringBuilder2);
      assertNotSame(typeStringBuilder4, typeStringBuilder3);
      assertNotSame(typeStringBuilder4, typeStringBuilder0);
      
      TypeStringBuilder typeStringBuilder5 = typeStringBuilder2.breakLineAndIndent();
      assertFalse(typeStringBuilder0.equals((Object)typeStringBuilder4));
      assertFalse(typeStringBuilder1.equals((Object)typeStringBuilder4));
      assertFalse(typeStringBuilder2.equals((Object)typeStringBuilder4));
      assertFalse(typeStringBuilder5.equals((Object)typeStringBuilder4));
      assertNotNull(typeStringBuilder5);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertTrue(treeSet0.contains("then"));
      assertFalse(treeSet0.contains(" ("));
      assertSame(typeStringBuilder0, typeStringBuilder2);
      assertSame(typeStringBuilder0, typeStringBuilder3);
      assertNotSame(typeStringBuilder0, typeStringBuilder4);
      assertSame(typeStringBuilder0, typeStringBuilder1);
      assertSame(typeStringBuilder0, typeStringBuilder5);
      assertSame(typeStringBuilder1, typeStringBuilder3);
      assertNotSame(typeStringBuilder1, typeStringBuilder4);
      assertSame(typeStringBuilder1, typeStringBuilder0);
      assertSame(typeStringBuilder1, typeStringBuilder5);
      assertSame(typeStringBuilder1, typeStringBuilder2);
      assertSame(typeStringBuilder2, typeStringBuilder1);
      assertSame(typeStringBuilder2, typeStringBuilder5);
      assertSame(typeStringBuilder2, typeStringBuilder3);
      assertNotSame(typeStringBuilder2, typeStringBuilder4);
      assertSame(typeStringBuilder2, typeStringBuilder0);
      assertSame(typeStringBuilder5, typeStringBuilder0);
      assertNotSame(typeStringBuilder5, typeStringBuilder4);
      assertSame(typeStringBuilder5, typeStringBuilder3);
      assertSame(typeStringBuilder5, typeStringBuilder1);
      assertSame(typeStringBuilder5, typeStringBuilder2);
      
      templateType0.appendTo(typeStringBuilder1);
      assertFalse(typeStringBuilder0.equals((Object)typeStringBuilder4));
      assertFalse(typeStringBuilder1.equals((Object)typeStringBuilder4));
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(treeSet0.contains("then"));
      assertFalse(treeSet0.contains(" ("));
      assertSame(typeStringBuilder0, typeStringBuilder2);
      assertSame(typeStringBuilder0, typeStringBuilder3);
      assertNotSame(typeStringBuilder0, typeStringBuilder4);
      assertSame(typeStringBuilder0, typeStringBuilder1);
      assertSame(typeStringBuilder0, typeStringBuilder5);
      assertSame(typeStringBuilder1, typeStringBuilder3);
      assertNotSame(typeStringBuilder1, typeStringBuilder4);
      assertSame(typeStringBuilder1, typeStringBuilder0);
      assertSame(typeStringBuilder1, typeStringBuilder5);
      assertSame(typeStringBuilder1, typeStringBuilder2);
      
      ObjectType objectType0 = jSTypeRegistry0.findCommonSuperObject(templatizedType0, templateType0);
      assertNotNull(objectType0);
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isRecordType());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isFunctionType());
      assertTrue(templatizedType0.isObject());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isNullType());
      assertTrue(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isNativeObjectType());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isVoidType());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isNoType());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(objectType0.isSuccessfullyResolved());
      assertFalse(objectType0.isAllType());
      assertTrue(objectType0.isTemplatizedType());
      assertFalse(objectType0.isInterface());
      assertTrue(objectType0.isTemplateType());
      assertFalse(objectType0.isUnsuccessfullyResolved());
      assertFalse(objectType0.isNoResolvedType());
      assertTrue(objectType0.isResolved());
      assertFalse(objectType0.isStructuralInterface());
      assertFalse(objectType0.isNamedType());
      assertFalse(objectType0.isRecordType());
      assertEquals(0, objectType0.getTemplateParamCount());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isNominalConstructorOrInterface());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isLiteralObject());
      assertFalse(objectType0.isRawTypeOfTemplatizedType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isBigIntValueType());
      assertFalse(objectType0.isSymbolValueType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isUnionType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isNativeObjectType());
      assertFalse(objectType0.hasCachedValues());
      assertTrue(treeSet0.contains("then"));
      assertFalse(treeSet0.contains(" ("));
      assertSame(templatizedType0, objectType0);
      assertSame(objectType0, templatizedType0);
      
      ImmutableList<TemplateType> immutableList0 = jSTypeRegistry0.maybeGetTemplateTypesOfBuiltin("com.google.javascript.rhino.jstype.JSTypeRegistry$ClosureNamespace");
      assertNull(immutableList0);
      assertTrue(treeSet0.contains("then"));
      assertFalse(treeSet0.contains("com.google.javascript.rhino.jstype.JSTypeRegistry$ClosureNamespace"));
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createFunctionTypeWithVarArgs(templateType0, (JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      Node node0 = Node.newString("UNUSED_RETURN_T");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isCall());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isSub());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isOptChainGetElem());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptChainCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSpread());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isForAwaitOf());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isAssignNullishCoalesce());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNullishCoalesce());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRoot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isEQ());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasParent());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isScript());
      assertFalse(node0.isRest());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isBreak());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isExponent());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, (String) null);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression0);
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isCall());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isSub());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isOptChainGetElem());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptChainCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSpread());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isForAwaitOf());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isAssignNullishCoalesce());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNullishCoalesce());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRoot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isEQ());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasParent());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isScript());
      assertFalse(node0.isRest());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isBreak());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isExponent());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      
      JSTypeExpression jSTypeExpression1 = JSTypeExpression.makeOptionalArg(jSTypeExpression0);
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeExpression1);
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isCall());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isSub());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isOptChainGetElem());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptChainCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSpread());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertTrue(node0.hasParent());
      assertFalse(node0.isForAwaitOf());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isAssignNullishCoalesce());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNullishCoalesce());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRoot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isEQ());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isScript());
      assertFalse(node0.isRest());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isBreak());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isExponent());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      ImmutableSet<String> immutableSet0 = jSTypeExpression1.getRecordPropertyNames();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(immutableSet0);
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isCall());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isSub());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isOptChainGetElem());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptChainCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSpread());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertTrue(node0.hasParent());
      assertFalse(node0.isForAwaitOf());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isAssignNullishCoalesce());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNullishCoalesce());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRoot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isEQ());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isScript());
      assertFalse(node0.isRest());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isBreak());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isExponent());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, immutableSet0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSTypeRegistry0);
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isCall());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isSub());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isOptChainGetElem());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptChainCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSpread());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertTrue(node0.hasParent());
      assertFalse(node0.isForAwaitOf());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isAssignNullishCoalesce());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNullishCoalesce());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRoot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isEQ());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isScript());
      assertFalse(node0.isRest());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isBreak());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isExponent());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      TemplateTypeReplacer templateTypeReplacer0 = TemplateTypeReplacer.forInference(jSTypeRegistry0, hashMap0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateTypeReplacer0);
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isCall());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isSub());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isOptChainGetElem());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptChainCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSpread());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertTrue(node0.hasParent());
      assertFalse(node0.isForAwaitOf());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isAssignNullishCoalesce());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNullishCoalesce());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRoot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isEQ());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isScript());
      assertFalse(node0.isRest());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isBreak());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isExponent());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      JSType jSType0 = templateTypeReplacer0.caseNumberType();
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSType0);
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isCall());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isSub());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isOptChainGetElem());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptChainCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSpread());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertTrue(node0.hasParent());
      assertFalse(node0.isForAwaitOf());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isAssignNullishCoalesce());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNullishCoalesce());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRoot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isEQ());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isScript());
      assertFalse(node0.isRest());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isBreak());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isExponent());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.matchesObjectContext());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isBooleanValueType());
      assertEquals("number", jSType0.getDisplayName());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNativeObjectType());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isBigIntValueType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isRecordType());
      assertTrue(jSType0.isNumberValueType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      jSTypeRegistry0.registerPropertyOnType((String) null, jSType0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isCall());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isSub());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isOptChainGetElem());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptChainCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSpread());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertTrue(node0.hasParent());
      assertFalse(node0.isForAwaitOf());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isAssignNullishCoalesce());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNullishCoalesce());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRoot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isEQ());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isScript());
      assertFalse(node0.isRest());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isBreak());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isExponent());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.matchesObjectContext());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isBooleanValueType());
      assertEquals("number", jSType0.getDisplayName());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNativeObjectType());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isBigIntValueType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isRecordType());
      assertTrue(jSType0.isNumberValueType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType((String) null);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateType0);
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isCall());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isSub());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isOptChainGetElem());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptChainCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSpread());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertTrue(node0.hasParent());
      assertFalse(node0.isForAwaitOf());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isAssignNullishCoalesce());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNullishCoalesce());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRoot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isEQ());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isScript());
      assertFalse(node0.isRest());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isBreak());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isExponent());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isConstructor());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isEnumType());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      JSType jSType1 = jSTypeRegistry0.createNullableType(jSType0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSType1);
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isCall());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isSub());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isOptChainGetElem());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptChainCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSpread());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertTrue(node0.hasParent());
      assertFalse(node0.isForAwaitOf());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isAssignNullishCoalesce());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNullishCoalesce());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRoot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isEQ());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isScript());
      assertFalse(node0.isRest());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isBreak());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isExponent());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(templateTypeReplacer0.hasMadeReplacement());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.matchesObjectContext());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isBooleanValueType());
      assertEquals("number", jSType0.getDisplayName());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isStructuralInterface());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNativeObjectType());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isBigIntValueType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isRecordType());
      assertTrue(jSType0.isNumberValueType());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType1.isNoObjectType());
      assertFalse(jSType1.isUnsuccessfullyResolved());
      assertTrue(jSType1.isUnionType());
      assertFalse(jSType1.isNominalConstructorOrInterface());
      assertFalse(jSType1.isNumberValueType());
      assertFalse(jSType1.isRecordType());
      assertFalse(jSType1.isConstructor());
      assertFalse(jSType1.isNamedType());
      assertFalse(jSType1.isFunctionPrototypeType());
      assertFalse(jSType1.isNoResolvedType());
      assertFalse(jSType1.isBigIntValueType());
      assertFalse(jSType1.isInterface());
      assertFalse(jSType1.isStringValueType());
      assertFalse(jSType1.isVoidType());
      assertFalse(jSType1.isNullType());
      assertFalse(jSType1.isNativeObjectType());
      assertFalse(jSType1.isAllType());
      assertFalse(jSType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType1.isSymbolValueType());
      assertEquals(0, jSType1.getTemplateParamCount());
      assertFalse(jSType1.isTemplateType());
      assertFalse(jSType1.isEnumType());
      assertTrue(jSType1.isResolved());
      assertFalse(jSType1.isBooleanValueType());
      assertFalse(jSType1.isOrdinaryFunction());
      assertFalse(jSType1.isStructuralInterface());
      assertFalse(jSType1.isCheckedUnknownType());
      assertFalse(jSType1.isEnumElementType());
      assertFalse(jSType1.isTemplatizedType());
      assertFalse(jSType1.isLiteralObject());
      assertFalse(jSType1.isFunctionType());
      assertFalse(jSType1.isNoType());
      assertTrue(jSType1.isSuccessfullyResolved());
      assertFalse(jSType1.isRawTypeOfTemplatizedType());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap1 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap1, false);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(recordType0);
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isCall());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isSub());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isOptChainGetElem());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptChainCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSpread());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertTrue(node0.hasParent());
      assertFalse(node0.isForAwaitOf());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isAssignNullishCoalesce());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNullishCoalesce());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRoot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isEQ());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isScript());
      assertFalse(node0.isRest());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isBreak());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isExponent());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(recordType0.isAnonymous());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isUnsuccessfullyResolved());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isLiteralObject());
      assertFalse(recordType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType0.isBigIntValueType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isStringValueType());
      assertTrue(recordType0.isResolved());
      assertFalse(recordType0.isNominalConstructorOrInterface());
      assertFalse(recordType0.isTemplatizedType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isStructuralInterface());
      assertTrue(recordType0.isStructuralType());
      assertFalse(recordType0.isNoResolvedType());
      assertTrue(recordType0.matchesObjectContext());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isUnionType());
      assertEquals(0, recordType0.getTemplateParamCount());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isNoObjectType());
      assertTrue(recordType0.isSuccessfullyResolved());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isRawTypeOfTemplatizedType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isSymbolValueType());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      
      jSTypeRegistry0.registerDroppedPropertiesInUnion(recordType0, recordType0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isCall());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isSub());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isOptChainGetElem());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptChainCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSpread());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertTrue(node0.hasParent());
      assertFalse(node0.isForAwaitOf());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isAssignNullishCoalesce());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNullishCoalesce());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRoot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isEQ());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isScript());
      assertFalse(node0.isRest());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isBreak());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isExponent());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(recordType0.isAnonymous());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isUnsuccessfullyResolved());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isLiteralObject());
      assertFalse(recordType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType0.isBigIntValueType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isStringValueType());
      assertTrue(recordType0.isResolved());
      assertFalse(recordType0.isNominalConstructorOrInterface());
      assertFalse(recordType0.isTemplatizedType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isStructuralInterface());
      assertTrue(recordType0.isStructuralType());
      assertFalse(recordType0.isNoResolvedType());
      assertTrue(recordType0.matchesObjectContext());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isUnionType());
      assertEquals(0, recordType0.getTemplateParamCount());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isNoObjectType());
      assertTrue(recordType0.isSuccessfullyResolved());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isRawTypeOfTemplatizedType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isSymbolValueType());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      JSType jSType2 = jSTypeRegistry0.createOptionalNullableType(recordType0);
      assertFalse(jSTypeExpression0.equals((Object)jSTypeExpression1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(jSType2.equals((Object)jSType1));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSType2);
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isCall());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isSub());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isEmpty());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isOptChainGetElem());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isForOf());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptChainCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSpread());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isStringLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isConst());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertTrue(node0.hasParent());
      assertFalse(node0.isForAwaitOf());
      assertEquals("UNUSED_RETURN_T", node0.getString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isForIn());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isNeg());
      assertEquals(Token.STRINGLIT, node0.getToken());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isAssignNullishCoalesce());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNullishCoalesce());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRoot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isEQ());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isScript());
      assertFalse(node0.isRest());
      assertFalse(node0.isAwait());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isObjectRest());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isYield());
      assertFalse(node0.isBreak());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isMemberFunctionDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isExponent());
      assertFalse(node0.isExport());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertNull(jSTypeExpression0.getSourceName());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertNull(jSTypeExpression1.getSourceName());
      assertTrue(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(0, immutableSet0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(recordType0.isAnonymous());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isUnsuccessfullyResolved());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isLiteralObject());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(recordType0.isBigIntValueType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isStringValueType());
      assertTrue(recordType0.isResolved());
      assertFalse(recordType0.isNominalConstructorOrInterface());
      assertFalse(recordType0.isTemplatizedType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isStructuralInterface());
      assertTrue(recordType0.isStructuralType());
      assertFalse(recordType0.isNoResolvedType());
      assertTrue(recordType0.matchesObjectContext());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isUnionType());
      assertEquals(0, recordType0.getTemplateParamCount());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isNoObjectType());
      assertTrue(recordType0.isSuccessfullyResolved());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isRawTypeOfTemplatizedType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isSymbolValueType());
      assertFalse(jSType2.isTemplateType());
      assertFalse(jSType2.isBooleanValueType());
      assertFalse(jSType2.isOrdinaryFunction());
      assertFalse(jSType2.isNullType());
      assertTrue(jSType2.isResolved());
      assertFalse(jSType2.isNativeObjectType());
      assertFalse(jSType2.isSymbolValueType());
      assertFalse(jSType2.isConstructor());
      assertFalse(jSType2.isEnumType());
      assertFalse(jSType2.isFunctionPrototypeType());
      assertFalse(jSType2.isInterface());
      assertFalse(jSType2.isRecordType());
      assertFalse(jSType2.isVoidType());
      assertTrue(jSType2.isUnionType());
      assertFalse(jSType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType2.isNoResolvedType());
      assertEquals(0, jSType2.getTemplateParamCount());
      assertFalse(jSType2.isBigIntValueType());
      assertFalse(jSType2.isRawTypeOfTemplatizedType());
      assertFalse(jSType2.isNoType());
      assertFalse(jSType2.isStringValueType());
      assertTrue(jSType2.isSuccessfullyResolved());
      assertFalse(jSType2.isNumberValueType());
      assertFalse(jSType2.isNoObjectType());
      assertFalse(jSType2.isNamedType());
      assertFalse(jSType2.isNominalConstructorOrInterface());
      assertFalse(jSType2.isCheckedUnknownType());
      assertFalse(jSType2.isTemplatizedType());
      assertFalse(jSType2.isEnumElementType());
      assertFalse(jSType2.isStructuralInterface());
      assertFalse(jSType2.isUnsuccessfullyResolved());
      assertFalse(jSType2.isLiteralObject());
      assertFalse(jSType2.isFunctionType());
      assertFalse(jSType2.isAllType());
      assertFalse(immutableSet0.contains("UNUSED_RETURN_T"));
      assertNotSame(jSTypeExpression0, jSTypeExpression1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertNotSame(jSType2, jSType1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.maybeGetTemplateTypesOfBuiltin("oufx>{\u0001P\"w=<^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type names cannot contain template annotations.
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, set0);
      assertNotNull(jSTypeRegistry0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isAnonymous());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isVoidType());
      
      Node node0 = noResolvedType0.getOwnPropertyDefSite("B");
      assertNull(node0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isAnonymous());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAbstract());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(set0.contains("B"));
      
      Stack<FunctionType.Parameter> stack0 = new Stack<FunctionType.Parameter>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createConstructorType("B", (Node) null, stack0, noResolvedType0, (ImmutableList<TemplateType>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      simpleErrorReporter0.warning("`dKnRLvof%Iis0", "%s (%s) must not be negative", 545, 545);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry0.findCommonSuperObject((ObjectType) null, (ObjectType) null);
      assertNotNull(instanceObjectType0);
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNoType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isNamedType());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isStringValueType());
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      JSTypeNative jSTypeNative0 = JSTypeNative.DATE_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(unionType0);
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isLiteralObject());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isUnsuccessfullyResolved());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNamedType());
      assertFalse(unionType0.isNominalConstructorOrInterface());
      assertFalse(unionType0.isStructuralInterface());
      assertFalse(unionType0.isNativeObjectType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertTrue(unionType0.isResolved());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNumberValueType());
      assertEquals(0, unionType0.getTemplateParamCount());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isBigIntValueType());
      assertFalse(unionType0.isEnumType());
      assertTrue(unionType0.isSuccessfullyResolved());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isTemplatizedType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isRawTypeOfTemplatizedType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isSymbolValueType());
      assertEquals(2, jSTypeNativeArray0.length);
      
      Token token0 = Token.BITAND;
      Token token1 = Token.DEFAULT_CASE;
      Node node0 = Node.newString(token1, "");
      assertFalse(token1.equals((Object)token0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isLet());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isSpread());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSuper());
      assertFalse(node0.isCast());
      assertFalse(node0.isExport());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isAwait());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isAssignOr());
      assertEquals(Token.DEFAULT_CASE, node0.getToken());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isNeg());
      assertEquals("", node0.getString());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isForOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDec());
      assertFalse(node0.isClass());
      assertFalse(node0.isEQ());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isImport());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isRest());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isNull());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isOr());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isFalse());
      assertTrue(node0.isDefaultCase());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isYield());
      assertFalse(node0.isConst());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isRoot());
      assertFalse(node0.isString());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isThrow());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isForIn());
      assertFalse(node0.hasParent());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isIndexSignature());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSub());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertNotSame(token1, token0);
      
      Node node1 = new Node(token0, node0);
      assertFalse(token0.equals((Object)token1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node1);
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isLet());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isSpread());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasParent());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSuper());
      assertFalse(node0.isCast());
      assertFalse(node0.isExport());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isAwait());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isAssignOr());
      assertEquals(Token.DEFAULT_CASE, node0.getToken());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isNeg());
      assertEquals("", node0.getString());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isForOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDec());
      assertFalse(node0.isClass());
      assertFalse(node0.isEQ());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isImport());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isRest());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isNull());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isOr());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isFalse());
      assertTrue(node0.isDefaultCase());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isYield());
      assertFalse(node0.isConst());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isRoot());
      assertFalse(node0.isString());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isThrow());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isForIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isIndexSignature());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSub());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTemplateLitSub());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isExponent());
      assertFalse(node1.isExport());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSub());
      assertFalse(node1.isObjectPattern());
      assertFalse(node1.isForAwaitOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isStringLit());
      assertFalse(node1.isImportSpecs());
      assertFalse(node1.isFunction());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBitNot());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isMemberFieldDef());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAssignOr());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isVanillaFor());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isConst());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isScript());
      assertFalse(node1.isForOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isBigInt());
      assertFalse(node1.isRecordType());
      assertFalse(node1.isClass());
      assertFalse(node1.isDec());
      assertFalse(node1.isImport());
      assertFalse(node1.isCallSignature());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isSpread());
      assertEquals(Token.BITAND, node1.getToken());
      assertFalse(node1.isImportSpec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOptChainGetElem());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isComputedFieldDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isDefaultValue());
      assertFalse(node1.isNullishCoalesce());
      assertFalse(node1.isNull());
      assertFalse(node1.isAssignAnd());
      assertFalse(node1.isNeg());
      assertFalse(node1.isParamList());
      assertFalse(node1.isClassMembers());
      assertFalse(node1.isTemplateLitString());
      assertFalse(node1.isOptChainGetProp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isInterfaceMembers());
      assertFalse(node1.isNormalBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isNumber());
      assertTrue(node1.hasZeroOrOneChild());
      assertFalse(node1.isRoot());
      assertFalse(node1.isArrayPattern());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isAssignNullishCoalesce());
      assertFalse(node1.isRest());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isMemberVariableDef());
      assertFalse(node1.isExportSpec());
      assertFalse(node1.isComputedProp());
      assertFalse(node1.isAssignExponent());
      assertFalse(node1.isDestructuringLhs());
      assertFalse(node1.isMemberFunctionDef());
      assertFalse(node1.isTaggedTemplateLit());
      assertFalse(node1.isFalse());
      assertFalse(node1.isImportStar());
      assertFalse(node1.isYield());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTemplateLit());
      assertFalse(node1.isImportMeta());
      assertFalse(node1.isIndexSignature());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isSuper());
      assertFalse(node1.isSHEQ());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isAwait());
      assertFalse(node1.isExportSpecs());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDestructuringPattern());
      assertFalse(node1.isOptChainCall());
      assertFalse(node1.isDo());
      assertFalse(node1.isSHNE());
      assertFalse(node1.hasTwoChildren());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEQ());
      assertFalse(node1.isObjectRest());
      assertFalse(node1.hasParent());
      assertNull(node1.getOriginalName());
      assertFalse(node1.isForIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isLet());
      assertFalse(node1.isModuleBody());
      
      AutoValue_FunctionType_Parameter autoValue_FunctionType_Parameter0 = (AutoValue_FunctionType_Parameter)FunctionType.Parameter.create(unionType0, false, false);
      assertNotNull(autoValue_FunctionType_Parameter0);
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isLiteralObject());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isUnsuccessfullyResolved());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNamedType());
      assertFalse(unionType0.isNominalConstructorOrInterface());
      assertFalse(unionType0.isStructuralInterface());
      assertFalse(unionType0.isNativeObjectType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertTrue(unionType0.isResolved());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNumberValueType());
      assertEquals(0, unionType0.getTemplateParamCount());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isBigIntValueType());
      assertFalse(unionType0.isEnumType());
      assertTrue(unionType0.isSuccessfullyResolved());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isTemplatizedType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isRawTypeOfTemplatizedType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isSymbolValueType());
      assertFalse(autoValue_FunctionType_Parameter0.isOptional());
      assertFalse(autoValue_FunctionType_Parameter0.isVariadic());
      assertEquals(2, jSTypeNativeArray0.length);
      
      ImmutableList<FunctionType.Parameter> immutableList0 = ImmutableList.of((FunctionType.Parameter) autoValue_FunctionType_Parameter0, (FunctionType.Parameter) autoValue_FunctionType_Parameter0, (FunctionType.Parameter) autoValue_FunctionType_Parameter0, (FunctionType.Parameter) autoValue_FunctionType_Parameter0, (FunctionType.Parameter) autoValue_FunctionType_Parameter0, (FunctionType.Parameter) autoValue_FunctionType_Parameter0, (FunctionType.Parameter) autoValue_FunctionType_Parameter0, (FunctionType.Parameter) autoValue_FunctionType_Parameter0, (FunctionType.Parameter) autoValue_FunctionType_Parameter0, (FunctionType.Parameter) autoValue_FunctionType_Parameter0);
      assertNotNull(immutableList0);
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isLiteralObject());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isUnsuccessfullyResolved());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNamedType());
      assertFalse(unionType0.isNominalConstructorOrInterface());
      assertFalse(unionType0.isStructuralInterface());
      assertFalse(unionType0.isNativeObjectType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertTrue(unionType0.isResolved());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNumberValueType());
      assertEquals(0, unionType0.getTemplateParamCount());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isBigIntValueType());
      assertFalse(unionType0.isEnumType());
      assertTrue(unionType0.isSuccessfullyResolved());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isTemplatizedType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isRawTypeOfTemplatizedType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isSymbolValueType());
      assertFalse(autoValue_FunctionType_Parameter0.isOptional());
      assertFalse(autoValue_FunctionType_Parameter0.isVariadic());
      assertEquals(10, immutableList0.size());
      assertEquals(2, jSTypeNativeArray0.length);
      
      TemplateType templateType0 = jSTypeRegistry0.createTemplateTypeWithTransformation("[internal]", node1);
      assertFalse(token0.equals((Object)token1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateType0);
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertTrue(templateType0.isTypeTransformation());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals("[internal]", templateType0.getReferenceName());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isLet());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isSpread());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasParent());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSuper());
      assertFalse(node0.isCast());
      assertFalse(node0.isExport());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isAwait());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isAssignOr());
      assertEquals(Token.DEFAULT_CASE, node0.getToken());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isNeg());
      assertEquals("", node0.getString());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isForOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDec());
      assertFalse(node0.isClass());
      assertFalse(node0.isEQ());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isImport());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isRest());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isNull());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isOr());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isFalse());
      assertTrue(node0.isDefaultCase());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isYield());
      assertFalse(node0.isConst());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isRoot());
      assertFalse(node0.isString());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isThrow());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isForIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isIndexSignature());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSub());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTemplateLitSub());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isExponent());
      assertFalse(node1.isExport());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSub());
      assertFalse(node1.isObjectPattern());
      assertFalse(node1.isForAwaitOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isStringLit());
      assertFalse(node1.isImportSpecs());
      assertFalse(node1.isFunction());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBitNot());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isMemberFieldDef());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAssignOr());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isVanillaFor());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isConst());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isScript());
      assertFalse(node1.isForOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isBigInt());
      assertFalse(node1.isRecordType());
      assertFalse(node1.isClass());
      assertFalse(node1.isDec());
      assertFalse(node1.isImport());
      assertFalse(node1.isCallSignature());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isSpread());
      assertEquals(Token.BITAND, node1.getToken());
      assertFalse(node1.isImportSpec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOptChainGetElem());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isComputedFieldDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isDefaultValue());
      assertFalse(node1.isNullishCoalesce());
      assertFalse(node1.isNull());
      assertFalse(node1.isAssignAnd());
      assertFalse(node1.isNeg());
      assertFalse(node1.isParamList());
      assertFalse(node1.isClassMembers());
      assertFalse(node1.isTemplateLitString());
      assertFalse(node1.isOptChainGetProp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isInterfaceMembers());
      assertFalse(node1.isNormalBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isNumber());
      assertTrue(node1.hasZeroOrOneChild());
      assertFalse(node1.isRoot());
      assertFalse(node1.isArrayPattern());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isAssignNullishCoalesce());
      assertFalse(node1.isRest());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isMemberVariableDef());
      assertFalse(node1.isExportSpec());
      assertFalse(node1.isComputedProp());
      assertFalse(node1.isAssignExponent());
      assertFalse(node1.isDestructuringLhs());
      assertFalse(node1.isMemberFunctionDef());
      assertFalse(node1.isTaggedTemplateLit());
      assertFalse(node1.isFalse());
      assertFalse(node1.isImportStar());
      assertFalse(node1.isYield());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTemplateLit());
      assertFalse(node1.isImportMeta());
      assertFalse(node1.isIndexSignature());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isSuper());
      assertFalse(node1.isSHEQ());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isAwait());
      assertFalse(node1.isExportSpecs());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDestructuringPattern());
      assertFalse(node1.isOptChainCall());
      assertFalse(node1.isDo());
      assertFalse(node1.isSHNE());
      assertFalse(node1.hasTwoChildren());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEQ());
      assertFalse(node1.isObjectRest());
      assertFalse(node1.hasParent());
      assertNull(node1.getOriginalName());
      assertFalse(node1.isForIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isLet());
      assertFalse(node1.isModuleBody());
      assertNotSame(token0, token1);
      assertNotSame(token1, token0);
      
      ImmutableList<TemplateType> immutableList1 = ImmutableList.of(templateType0, templateType0);
      assertFalse(token0.equals((Object)token1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(immutableList1);
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertTrue(templateType0.isTypeTransformation());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals("[internal]", templateType0.getReferenceName());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNoResolvedType());
      assertEquals(2, immutableList1.size());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isLet());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isSpread());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasParent());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSuper());
      assertFalse(node0.isCast());
      assertFalse(node0.isExport());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isAwait());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isAssignOr());
      assertEquals(Token.DEFAULT_CASE, node0.getToken());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isNeg());
      assertEquals("", node0.getString());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isForOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDec());
      assertFalse(node0.isClass());
      assertFalse(node0.isEQ());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isImport());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isRest());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isNull());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isOr());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isFalse());
      assertTrue(node0.isDefaultCase());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isYield());
      assertFalse(node0.isConst());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isRoot());
      assertFalse(node0.isString());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isThrow());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isForIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isIndexSignature());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSub());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTemplateLitSub());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isExponent());
      assertFalse(node1.isExport());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSub());
      assertFalse(node1.isObjectPattern());
      assertFalse(node1.isForAwaitOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isStringLit());
      assertFalse(node1.isImportSpecs());
      assertFalse(node1.isFunction());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBitNot());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isMemberFieldDef());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAssignOr());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isVanillaFor());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isConst());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isScript());
      assertFalse(node1.isForOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isBigInt());
      assertFalse(node1.isRecordType());
      assertFalse(node1.isClass());
      assertFalse(node1.isDec());
      assertFalse(node1.isImport());
      assertFalse(node1.isCallSignature());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isSpread());
      assertEquals(Token.BITAND, node1.getToken());
      assertFalse(node1.isImportSpec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOptChainGetElem());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isComputedFieldDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isDefaultValue());
      assertFalse(node1.isNullishCoalesce());
      assertFalse(node1.isNull());
      assertFalse(node1.isAssignAnd());
      assertFalse(node1.isNeg());
      assertFalse(node1.isParamList());
      assertFalse(node1.isClassMembers());
      assertFalse(node1.isTemplateLitString());
      assertFalse(node1.isOptChainGetProp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isInterfaceMembers());
      assertFalse(node1.isNormalBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isNumber());
      assertTrue(node1.hasZeroOrOneChild());
      assertFalse(node1.isRoot());
      assertFalse(node1.isArrayPattern());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isAssignNullishCoalesce());
      assertFalse(node1.isRest());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isMemberVariableDef());
      assertFalse(node1.isExportSpec());
      assertFalse(node1.isComputedProp());
      assertFalse(node1.isAssignExponent());
      assertFalse(node1.isDestructuringLhs());
      assertFalse(node1.isMemberFunctionDef());
      assertFalse(node1.isTaggedTemplateLit());
      assertFalse(node1.isFalse());
      assertFalse(node1.isImportStar());
      assertFalse(node1.isYield());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTemplateLit());
      assertFalse(node1.isImportMeta());
      assertFalse(node1.isIndexSignature());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isSuper());
      assertFalse(node1.isSHEQ());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isAwait());
      assertFalse(node1.isExportSpecs());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDestructuringPattern());
      assertFalse(node1.isOptChainCall());
      assertFalse(node1.isDo());
      assertFalse(node1.isSHNE());
      assertFalse(node1.hasTwoChildren());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEQ());
      assertFalse(node1.isObjectRest());
      assertFalse(node1.hasParent());
      assertNull(node1.getOriginalName());
      assertFalse(node1.isForIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isLet());
      assertFalse(node1.isModuleBody());
      assertTrue(immutableList1.contains(templateType0));
      assertNotSame(token0, token1);
      assertNotSame(token1, token0);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createConstructorType("`dKnRLvof%Iis0", node1, immutableList0, (JSType) null, immutableList1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      assertNotNull(templateType0);
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isAllType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isLiteralObject());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      
      Token token0 = Token.MEMBER_FUNCTION_DEF;
      Node node0 = new Node(token0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isForAwaitOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLet());
      assertFalse(node0.isSpread());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isVar());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasParent());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isSub());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isForOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertEquals(Token.MEMBER_FUNCTION_DEF, node0.getToken());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isConst());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInterfaceMembers());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isRest());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isEQ());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isOr());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNeg());
      assertFalse(node0.isHook());
      assertFalse(node0.isForIn());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignOr());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSHNE());
      assertTrue(node0.isMemberFunctionDef());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isRoot());
      assertFalse(node0.isExport());
      assertFalse(node0.isYield());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isWhile());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isAwait());
      assertFalse(node0.isDebugger());
      
      TemplateType templateType1 = jSTypeRegistry0.createTemplateTypeWithTransformation("&2eE.", node0);
      assertFalse(templateType1.equals((Object)templateType0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateType1);
      assertFalse(node0.isForAwaitOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLet());
      assertFalse(node0.isSpread());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isVar());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasParent());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isSub());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isForOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertEquals(Token.MEMBER_FUNCTION_DEF, node0.getToken());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isConst());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInterfaceMembers());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isRest());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isEQ());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isOr());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNeg());
      assertFalse(node0.isHook());
      assertFalse(node0.isForIn());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignOr());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSHNE());
      assertTrue(node0.isMemberFunctionDef());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isRoot());
      assertFalse(node0.isExport());
      assertFalse(node0.isYield());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isWhile());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isAwait());
      assertFalse(node0.isDebugger());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isTemplatizedType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isOrdinaryFunction());
      assertTrue(templateType1.isResolved());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertTrue(templateType1.isTypeTransformation());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isNoObjectType());
      assertEquals("&2eE.", templateType1.getReferenceName());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.hasCachedValues());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isNumberValueType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isSymbolValueType());
      assertNotSame(templateType1, templateType0);
      
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of(templateType0, templateType1);
      assertFalse(templateType0.equals((Object)templateType1));
      assertFalse(templateType1.equals((Object)templateType0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(immutableList0);
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isAllType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isLiteralObject());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(node0.isForAwaitOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLet());
      assertFalse(node0.isSpread());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isVar());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasParent());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isSub());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isForOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertEquals(Token.MEMBER_FUNCTION_DEF, node0.getToken());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isConst());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInterfaceMembers());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isRest());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isEQ());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isOr());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNeg());
      assertFalse(node0.isHook());
      assertFalse(node0.isForIn());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignOr());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSHNE());
      assertTrue(node0.isMemberFunctionDef());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isRoot());
      assertFalse(node0.isExport());
      assertFalse(node0.isYield());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isWhile());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isAwait());
      assertFalse(node0.isDebugger());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isTemplatizedType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isOrdinaryFunction());
      assertTrue(templateType1.isResolved());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertTrue(templateType1.isTypeTransformation());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isNoObjectType());
      assertEquals("&2eE.", templateType1.getReferenceName());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.hasCachedValues());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isNumberValueType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isSymbolValueType());
      assertEquals(2, immutableList0.size());
      assertTrue(immutableList0.contains(templateType0));
      assertNotSame(templateType0, templateType1);
      assertNotSame(templateType1, templateType0);
      
      TemplateType templateType2 = jSTypeRegistry0.getObjectIndexKey();
      assertFalse(templateType2.equals((Object)templateType1));
      assertFalse(templateType2.equals((Object)templateType0));
      assertNotNull(templateType2);
      assertFalse(templateType2.isEnumElementType());
      assertFalse(templateType2.isTemplatizedType());
      assertFalse(templateType2.isConstructor());
      assertFalse(templateType2.isEnumType());
      assertFalse(templateType2.isAllType());
      assertTrue(templateType2.isTemplateType());
      assertFalse(templateType2.isVoidType());
      assertFalse(templateType2.isInterface());
      assertTrue(templateType2.isSuccessfullyResolved());
      assertFalse(templateType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType2.isNamedType());
      assertFalse(templateType2.isStringValueType());
      assertFalse(templateType2.isNoResolvedType());
      assertTrue(templateType2.hasAnyTemplateTypesInternal());
      assertFalse(templateType2.isUnsuccessfullyResolved());
      assertFalse(templateType2.isOrdinaryFunction());
      assertFalse(templateType2.isStructuralInterface());
      assertTrue(templateType2.isResolved());
      assertFalse(templateType2.isLiteralObject());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertFalse(templateType2.isRecordType());
      assertFalse(templateType2.isNominalConstructorOrInterface());
      assertFalse(templateType2.isCheckedUnknownType());
      assertEquals("IOBJECT_KEY", templateType2.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertEquals(0, templateType2.getTemplateParamCount());
      assertFalse(templateType2.isFunctionType());
      assertFalse(templateType2.isRawTypeOfTemplatizedType());
      assertFalse(templateType2.isNoObjectType());
      assertFalse(templateType2.isNoType());
      assertFalse(templateType2.isBigIntValueType());
      assertFalse(templateType2.isUnionType());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isBooleanValueType());
      assertFalse(templateType2.isNullType());
      assertTrue(templateType2.isObject());
      assertFalse(templateType2.isNativeObjectType());
      assertFalse(templateType2.hasCachedValues());
      assertFalse(templateType2.isSymbolValueType());
      assertFalse(templateType2.isTypeTransformation());
      assertNotSame(templateType2, templateType1);
      assertNotSame(templateType2, templateType0);
      
      ImmutableList<TemplateType> immutableList1 = ImmutableList.of(templateType2, templateType0, templateType0, templateType2, templateType0);
      assertFalse(templateType0.equals((Object)templateType1));
      assertFalse(templateType0.equals((Object)templateType2));
      assertFalse(templateType2.equals((Object)templateType1));
      assertFalse(templateType2.equals((Object)templateType0));
      assertFalse(immutableList1.equals((Object)immutableList0));
      assertNotNull(immutableList1);
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isAllType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isLiteralObject());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType2.isEnumElementType());
      assertFalse(templateType2.isTemplatizedType());
      assertFalse(templateType2.isConstructor());
      assertFalse(templateType2.isEnumType());
      assertFalse(templateType2.isAllType());
      assertTrue(templateType2.isTemplateType());
      assertFalse(templateType2.isVoidType());
      assertFalse(templateType2.isInterface());
      assertTrue(templateType2.isSuccessfullyResolved());
      assertFalse(templateType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType2.isNamedType());
      assertFalse(templateType2.isStringValueType());
      assertFalse(templateType2.isNoResolvedType());
      assertTrue(templateType2.hasAnyTemplateTypesInternal());
      assertFalse(templateType2.isUnsuccessfullyResolved());
      assertFalse(templateType2.isOrdinaryFunction());
      assertFalse(templateType2.isStructuralInterface());
      assertTrue(templateType2.isResolved());
      assertFalse(templateType2.isLiteralObject());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertFalse(templateType2.isRecordType());
      assertFalse(templateType2.isNominalConstructorOrInterface());
      assertFalse(templateType2.isCheckedUnknownType());
      assertEquals("IOBJECT_KEY", templateType2.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertEquals(0, templateType2.getTemplateParamCount());
      assertFalse(templateType2.isFunctionType());
      assertFalse(templateType2.isRawTypeOfTemplatizedType());
      assertFalse(templateType2.isNoObjectType());
      assertFalse(templateType2.isNoType());
      assertFalse(templateType2.isBigIntValueType());
      assertFalse(templateType2.isUnionType());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isBooleanValueType());
      assertFalse(templateType2.isNullType());
      assertTrue(templateType2.isObject());
      assertFalse(templateType2.isNativeObjectType());
      assertFalse(templateType2.hasCachedValues());
      assertFalse(templateType2.isSymbolValueType());
      assertFalse(templateType2.isTypeTransformation());
      assertEquals(5, immutableList1.size());
      assertTrue(immutableList1.contains(templateType0));
      assertFalse(immutableList1.contains(templateType1));
      assertNotSame(templateType0, templateType1);
      assertNotSame(templateType0, templateType2);
      assertNotSame(templateType2, templateType1);
      assertNotSame(templateType2, templateType0);
      assertNotSame(immutableList1, immutableList0);
      
      JSType.TypePair jSType_TypePair0 = templateType1.getTypesUnderInequality(templateType0);
      assertFalse(templateType0.equals((Object)templateType1));
      assertFalse(templateType0.equals((Object)templateType2));
      assertFalse(templateType1.equals((Object)templateType2));
      assertFalse(templateType1.equals((Object)templateType0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSType_TypePair0);
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isAllType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isLiteralObject());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(node0.isForAwaitOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLet());
      assertFalse(node0.isSpread());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isVar());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasParent());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isSub());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isForOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertEquals(Token.MEMBER_FUNCTION_DEF, node0.getToken());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isConst());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInterfaceMembers());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isRest());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isEQ());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isOr());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNeg());
      assertFalse(node0.isHook());
      assertFalse(node0.isForIn());
      assertFalse(node0.isScript());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignOr());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSHNE());
      assertTrue(node0.isMemberFunctionDef());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isRoot());
      assertFalse(node0.isExport());
      assertFalse(node0.isYield());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isSuper());
      assertFalse(node0.isWhile());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isExponent());
      assertFalse(node0.isAwait());
      assertFalse(node0.isDebugger());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isTemplatizedType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isOrdinaryFunction());
      assertTrue(templateType1.isResolved());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertTrue(templateType1.isTypeTransformation());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isNoObjectType());
      assertEquals("&2eE.", templateType1.getReferenceName());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.hasCachedValues());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isNumberValueType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isSymbolValueType());
      assertNotSame(templateType0, templateType1);
      assertNotSame(templateType0, templateType2);
      assertNotSame(templateType1, templateType2);
      assertNotSame(templateType1, templateType0);
      
      FunctionType.Parameter functionType_Parameter0 = FunctionType.Parameter.create(noResolvedType0, true, false);
      assertNotNull(functionType_Parameter0);
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(functionType_Parameter0.isOptional());
      assertFalse(functionType_Parameter0.isVariadic());
      
      ImmutableList<FunctionType.Parameter> immutableList2 = ImmutableList.of(functionType_Parameter0);
      assertNotNull(immutableList2);
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(functionType_Parameter0.isOptional());
      assertFalse(functionType_Parameter0.isVariadic());
      assertEquals(1, immutableList2.size());
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createConstructorType("&2eE.", node0, immutableList2, noResolvedType0, immutableList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNominalConstructorOrInterface());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isUnsuccessfullyResolved());
      assertTrue(voidType0.isResolved());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNativeObjectType());
      assertFalse(voidType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertTrue(voidType0.isVoidable());
      assertFalse(voidType0.isStringValueType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isBigIntValueType());
      assertTrue(voidType0.isExplicitlyVoidable());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isTemplatizedType());
      assertFalse(voidType0.isEnumElementType());
      assertEquals(0, voidType0.getTemplateParamCount());
      assertFalse(voidType0.isEnumType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNamedType());
      assertFalse(voidType0.isStructuralInterface());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isSymbolValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isLiteralObject());
      assertTrue(voidType0.isSuccessfullyResolved());
      assertFalse(voidType0.isRawTypeOfTemplatizedType());
      
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      assertNotNull(templateType0);
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTypeTransformation());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isObject());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      
      TemplateType templateType1 = (TemplateType)jSTypeRegistry0.findCommonSuperObject(templateType0, templateType0);
      assertNotNull(templateType1);
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTypeTransformation());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isObject());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isBooleanValueType());
      assertEquals("", templateType1.getReferenceName());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isTypeTransformation());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isLiteralObject());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isNoType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isOrdinaryFunction());
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) templateType1);
      assertNull(functionType0);
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTypeTransformation());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isObject());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isBooleanValueType());
      assertEquals("", templateType1.getReferenceName());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isTypeTransformation());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isLiteralObject());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isNoType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isOrdinaryFunction());
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry0.findCommonSuperObject(templateType0, (ObjectType) null);
      assertNotNull(instanceObjectType0);
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTypeTransformation());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isObject());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isConstructor());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isVoidType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertSame(templateType0, templateType1);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, (Set<String>) null);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      ImmutableList<TemplateType> immutableList0 = jSTypeRegistry0.maybeGetTemplateTypesOfBuiltin("g");
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNull(immutableList0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry1.createNullableType(voidType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(unionType0);
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNominalConstructorOrInterface());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isUnsuccessfullyResolved());
      assertTrue(voidType0.isResolved());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNativeObjectType());
      assertFalse(voidType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertTrue(voidType0.isVoidable());
      assertFalse(voidType0.isStringValueType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isBigIntValueType());
      assertTrue(voidType0.isExplicitlyVoidable());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isTemplatizedType());
      assertFalse(voidType0.isEnumElementType());
      assertEquals(0, voidType0.getTemplateParamCount());
      assertFalse(voidType0.isEnumType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNamedType());
      assertFalse(voidType0.isStructuralInterface());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isSymbolValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isLiteralObject());
      assertTrue(voidType0.isSuccessfullyResolved());
      assertFalse(voidType0.isRawTypeOfTemplatizedType());
      assertFalse(unionType0.isNominalConstructorOrInterface());
      assertFalse(unionType0.isLiteralObject());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isRawTypeOfTemplatizedType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isInterface());
      assertTrue(unionType0.isSuccessfullyResolved());
      assertFalse(unionType0.isOrdinaryFunction());
      assertTrue(unionType0.isResolved());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isTemplatizedType());
      assertFalse(unionType0.isNamedType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isUnsuccessfullyResolved());
      assertFalse(unionType0.isStructuralInterface());
      assertFalse(unionType0.isSymbolValueType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNativeObjectType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isBigIntValueType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isNoResolvedType());
      assertEquals(0, unionType0.getTemplateParamCount());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isRecordType());
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      
      TemplateType templateType2 = jSTypeRegistry0.getObjectIndexKey();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(templateType2.equals((Object)templateType1));
      assertFalse(templateType2.equals((Object)templateType0));
      assertNotNull(templateType2);
      assertTrue(templateType2.hasAnyTemplateTypesInternal());
      assertFalse(templateType2.isVoidType());
      assertFalse(templateType2.isOrdinaryFunction());
      assertFalse(templateType2.isTemplatizedType());
      assertFalse(templateType2.isNamedType());
      assertFalse(templateType2.isUnionType());
      assertFalse(templateType2.isEnumType());
      assertFalse(templateType2.isTypeTransformation());
      assertFalse(templateType2.isStructuralInterface());
      assertFalse(templateType2.isConstructor());
      assertFalse(templateType2.isNoResolvedType());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isAllType());
      assertFalse(templateType2.isNominalConstructorOrInterface());
      assertFalse(templateType2.isBigIntValueType());
      assertFalse(templateType2.isNoObjectType());
      assertFalse(templateType2.isNoType());
      assertFalse(templateType2.isInterface());
      assertFalse(templateType2.isStringValueType());
      assertFalse(templateType2.hasCachedValues());
      assertEquals("IOBJECT_KEY", templateType2.getReferenceName());
      assertFalse(templateType2.isCheckedUnknownType());
      assertFalse(templateType2.isFunctionType());
      assertEquals(0, templateType2.getTemplateParamCount());
      assertTrue(templateType2.isResolved());
      assertFalse(templateType2.isBooleanValueType());
      assertFalse(templateType2.isRecordType());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertFalse(templateType2.isUnsuccessfullyResolved());
      assertFalse(templateType2.isNativeObjectType());
      assertFalse(templateType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType2.isNullType());
      assertFalse(templateType2.isLiteralObject());
      assertTrue(templateType2.isTemplateType());
      assertFalse(templateType2.isSymbolValueType());
      assertFalse(templateType2.isEnumElementType());
      assertTrue(templateType2.isObject());
      assertTrue(templateType2.isSuccessfullyResolved());
      assertFalse(templateType2.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(templateType2, templateType1);
      assertNotSame(templateType2, templateType0);
      
      InstanceObjectType instanceObjectType1 = (InstanceObjectType)jSTypeRegistry0.findCommonSuperObject(instanceObjectType0, templateType2);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(templateType0.equals((Object)templateType2));
      assertFalse(templateType2.equals((Object)templateType1));
      assertFalse(templateType2.equals((Object)templateType0));
      assertNotNull(instanceObjectType1);
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTypeTransformation());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isObject());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isConstructor());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isVoidType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType2.hasAnyTemplateTypesInternal());
      assertFalse(templateType2.isVoidType());
      assertFalse(templateType2.isOrdinaryFunction());
      assertFalse(templateType2.isTemplatizedType());
      assertFalse(templateType2.isNamedType());
      assertFalse(templateType2.isUnionType());
      assertFalse(templateType2.isEnumType());
      assertFalse(templateType2.isTypeTransformation());
      assertFalse(templateType2.isStructuralInterface());
      assertFalse(templateType2.isConstructor());
      assertFalse(templateType2.isNoResolvedType());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isAllType());
      assertFalse(templateType2.isNominalConstructorOrInterface());
      assertFalse(templateType2.isBigIntValueType());
      assertFalse(templateType2.isNoObjectType());
      assertFalse(templateType2.isNoType());
      assertFalse(templateType2.isInterface());
      assertFalse(templateType2.isStringValueType());
      assertFalse(templateType2.hasCachedValues());
      assertEquals("IOBJECT_KEY", templateType2.getReferenceName());
      assertFalse(templateType2.isCheckedUnknownType());
      assertFalse(templateType2.isFunctionType());
      assertEquals(0, templateType2.getTemplateParamCount());
      assertTrue(templateType2.isResolved());
      assertFalse(templateType2.isBooleanValueType());
      assertFalse(templateType2.isRecordType());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertFalse(templateType2.isUnsuccessfullyResolved());
      assertFalse(templateType2.isNativeObjectType());
      assertFalse(templateType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType2.isNullType());
      assertFalse(templateType2.isLiteralObject());
      assertTrue(templateType2.isTemplateType());
      assertFalse(templateType2.isSymbolValueType());
      assertFalse(templateType2.isEnumElementType());
      assertTrue(templateType2.isObject());
      assertTrue(templateType2.isSuccessfullyResolved());
      assertFalse(templateType2.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType1.isAnonymous());
      assertFalse(instanceObjectType1.isLiteralObject());
      assertFalse(instanceObjectType1.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType1.isFunctionType());
      assertTrue(instanceObjectType1.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType1.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType1.isInstanceType());
      assertFalse(instanceObjectType1.isInterface());
      assertTrue(instanceObjectType1.isNativeObjectType());
      assertFalse(instanceObjectType1.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType1.isAllType());
      assertFalse(instanceObjectType1.isStructuralInterface());
      assertFalse(instanceObjectType1.isNamedType());
      assertTrue(instanceObjectType1.isResolved());
      assertFalse(instanceObjectType1.isTemplateType());
      assertFalse(instanceObjectType1.isOrdinaryFunction());
      assertFalse(instanceObjectType1.isVoidType());
      assertFalse(instanceObjectType1.isCheckedUnknownType());
      assertFalse(instanceObjectType1.isEnumElementType());
      assertFalse(instanceObjectType1.isTemplatizedType());
      assertFalse(instanceObjectType1.isStringValueType());
      assertTrue(instanceObjectType1.isObject());
      assertFalse(instanceObjectType1.isBigIntValueType());
      assertTrue(instanceObjectType1.isSuccessfullyResolved());
      assertFalse(instanceObjectType1.isNoType());
      assertFalse(instanceObjectType1.isSymbolValueType());
      assertFalse(instanceObjectType1.isNullType());
      assertFalse(instanceObjectType1.isNoObjectType());
      assertFalse(instanceObjectType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType1.isNumberValueType());
      assertFalse(instanceObjectType1.isFunctionPrototypeType());
      assertFalse(instanceObjectType1.isUnionType());
      assertFalse(instanceObjectType1.isNoResolvedType());
      assertFalse(instanceObjectType1.isEnumType());
      assertTrue(instanceObjectType1.matchesObjectContext());
      assertFalse(instanceObjectType1.hasCachedValues());
      assertFalse(instanceObjectType1.isConstructor());
      assertFalse(instanceObjectType1.isRecordType());
      assertFalse(instanceObjectType1.isBooleanValueType());
      assertEquals(2, instanceObjectType1.getTemplateParamCount());
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(templateType0, templateType2);
      assertSame(templateType0, templateType1);
      assertSame(instanceObjectType0, instanceObjectType1);
      assertNotSame(templateType2, templateType1);
      assertNotSame(templateType2, templateType0);
      assertSame(instanceObjectType1, instanceObjectType0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertNotNull(jSTypeRegistry0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("IOBJECT_VALUE");
      assertNotNull(templateType0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNamedType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      simpleErrorReporter0.warning("IOBJECT_VALUE", "IOBJECT_VALUE", 2829, 2829);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry1.findCommonSuperObject(templateType0, (ObjectType) null);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(instanceObjectType0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNamedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.DATE_TYPE;
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[3];
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNative0;
      jSTypeNativeArray0[2] = jSTypeNative0;
      InstanceObjectType instanceObjectType1 = (InstanceObjectType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(instanceObjectType1.equals((Object)instanceObjectType0));
      assertNotNull(instanceObjectType1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(instanceObjectType1.isRawTypeOfTemplatizedType());
      assertEquals(0, instanceObjectType1.getTemplateParamCount());
      assertTrue(instanceObjectType1.isObject());
      assertFalse(instanceObjectType1.isBigIntValueType());
      assertFalse(instanceObjectType1.isNoResolvedType());
      assertFalse(instanceObjectType1.isStringValueType());
      assertFalse(instanceObjectType1.isNominalConstructorOrInterface());
      assertTrue(instanceObjectType1.isSuccessfullyResolved());
      assertFalse(instanceObjectType1.isInterface());
      assertFalse(instanceObjectType1.isNoObjectType());
      assertFalse(instanceObjectType1.isNoType());
      assertFalse(instanceObjectType1.isVoidType());
      assertFalse(instanceObjectType1.isRecordType());
      assertFalse(instanceObjectType1.isEnumType());
      assertFalse(instanceObjectType1.isCheckedUnknownType());
      assertTrue(instanceObjectType1.hasCachedValues());
      assertFalse(instanceObjectType1.isConstructor());
      assertFalse(instanceObjectType1.isUnionType());
      assertTrue(instanceObjectType1.matchesObjectContext());
      assertFalse(instanceObjectType1.isNumberValueType());
      assertFalse(instanceObjectType1.isFunctionPrototypeType());
      assertFalse(instanceObjectType1.isBooleanValueType());
      assertFalse(instanceObjectType1.isAllType());
      assertFalse(instanceObjectType1.isNullType());
      assertFalse(instanceObjectType1.isSymbolValueType());
      assertFalse(instanceObjectType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType1.isFunctionType());
      assertTrue(instanceObjectType1.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType1.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType1.isInstanceType());
      assertFalse(instanceObjectType1.isEnumElementType());
      assertFalse(instanceObjectType1.isLiteralObject());
      assertFalse(instanceObjectType1.isAnonymous());
      assertFalse(instanceObjectType1.isTemplatizedType());
      assertFalse(instanceObjectType1.isStructuralInterface());
      assertTrue(instanceObjectType1.isResolved());
      assertFalse(instanceObjectType1.isOrdinaryFunction());
      assertFalse(instanceObjectType1.isTemplateType());
      assertFalse(instanceObjectType1.isNamedType());
      assertFalse(instanceObjectType1.isUnsuccessfullyResolved());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertEquals(3, jSTypeNativeArray0.length);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(instanceObjectType1, instanceObjectType0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      simpleErrorReporter0.warning("", "S'.aDN;5'q*j)", (-516), 545);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry1.findCommonSuperObject((ObjectType) null, (ObjectType) null);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(instanceObjectType0);
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isInterface());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isNamedType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createUnionType((JSTypeNative[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      assertNotNull(errorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoObjectType());
      
      ObjectType objectType0 = noResolvedType0.getImplicitPrototype();
      assertNull(objectType0);
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoObjectType());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createObjectType("c93Y:os", (ObjectType) null);
      assertNotNull(prototypeObjectType0);
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isAnonymous());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isLiteralObject());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isRawTypeOfTemplatizedType());
      assertEquals(0, prototypeObjectType0.getTemplateParamCount());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(prototypeObjectType0.isSymbolValueType());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isTemplatizedType());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isBigIntValueType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertTrue(prototypeObjectType0.isSuccessfullyResolved());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isUnsuccessfullyResolved());
      assertTrue(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isStructuralInterface());
      assertFalse(prototypeObjectType0.isNominalConstructorOrInterface());
      assertFalse(prototypeObjectType0.isNamedType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createTemplatizedType((ObjectType) prototypeObjectType0, (ImmutableList<JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.TemplateTypeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      ImmutableList<TemplateType> immutableList0 = jSTypeRegistry0.maybeGetTemplateTypesOfBuiltin("f{aXNmw@");
      assertNull(immutableList0);
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      assertNotNull(unknownType0);
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.isSymbolValueType());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.isResolved());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isNullType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isConstructor());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isBigIntValueType());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNoType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isLiteralObject());
      assertFalse(unknownType0.isTemplatizedType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isStructuralInterface());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNamedType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      
      FunctionType functionType0 = unknownType0.getConstructor();
      assertNull(functionType0);
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.isSymbolValueType());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.isResolved());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isNullType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isConstructor());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isBigIntValueType());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNoType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isLiteralObject());
      assertFalse(unknownType0.isTemplatizedType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isStructuralInterface());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNamedType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      
      UnknownType unknownType1 = (UnknownType)jSTypeRegistry0.createNullableType(unknownType0);
      assertFalse(unknownType1.equals((Object)unknownType0));
      assertNotNull(unknownType1);
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.isSymbolValueType());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.isResolved());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isNullType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isConstructor());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isBigIntValueType());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNoType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isLiteralObject());
      assertFalse(unknownType0.isTemplatizedType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isStructuralInterface());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNamedType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertFalse(unknownType1.isNominalConstructorOrInterface());
      assertFalse(unknownType1.isNoObjectType());
      assertFalse(unknownType1.isNoType());
      assertFalse(unknownType1.isFunctionPrototypeType());
      assertFalse(unknownType1.isInterface());
      assertTrue(unknownType1.isUnknownType());
      assertFalse(unknownType1.isUnsuccessfullyResolved());
      assertTrue(unknownType1.isObject());
      assertFalse(unknownType1.isNamedType());
      assertFalse(unknownType1.isConstructor());
      assertTrue(unknownType1.matchesObjectContext());
      assertEquals("?", unknownType1.getReferenceName());
      assertTrue(unknownType1.hasDisplayName());
      assertFalse(unknownType1.hasCachedValues());
      assertFalse(unknownType1.isCheckedUnknownType());
      assertTrue(unknownType1.matchesStringContext());
      assertFalse(unknownType1.isStringValueType());
      assertFalse(unknownType1.isNumberValueType());
      assertFalse(unknownType1.isRecordType());
      assertFalse(unknownType1.isUnionType());
      assertTrue(unknownType1.isNullable());
      assertFalse(unknownType1.isEnumType());
      assertFalse(unknownType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals(0, unknownType1.getTemplateParamCount());
      assertFalse(unknownType1.isNoResolvedType());
      assertFalse(unknownType1.isBigIntValueType());
      assertFalse(unknownType1.isVoidType());
      assertTrue(unknownType1.isVoidable());
      assertFalse(unknownType1.isStructuralInterface());
      assertTrue(unknownType1.matchesSymbolContext());
      assertFalse(unknownType1.isNullType());
      assertFalse(unknownType1.isBooleanValueType());
      assertFalse(unknownType1.isSymbolValueType());
      assertTrue(unknownType1.canBeCalled());
      assertFalse(unknownType1.isOrdinaryFunction());
      assertTrue(unknownType1.isResolved());
      assertTrue(unknownType1.matchesNumberContext());
      assertFalse(unknownType1.isNativeObjectType());
      assertEquals("Unknown", unknownType1.getDisplayName());
      assertFalse(unknownType1.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertFalse(unknownType1.isTemplatizedType());
      assertFalse(unknownType1.isRawTypeOfTemplatizedType());
      assertTrue(unknownType1.isSuccessfullyResolved());
      assertFalse(unknownType1.isLiteralObject());
      assertFalse(unknownType1.isAllType());
      assertFalse(unknownType1.isEnumElementType());
      assertFalse(unknownType1.isFunctionType());
      assertNotSame(unknownType0, unknownType1);
      assertNotSame(unknownType1, unknownType0);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createRecordType((Map<String, ? extends JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.GENERATOR_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(functionType0);
      assertTrue(functionType0.isNominalConstructorOrInterface());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isAnonymous());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.isResolved());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isRecordType());
      assertNull(functionType0.getClosurePrimitive());
      assertEquals(3, functionType0.getTemplateParamCount());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isNativeObjectType());
      assertFalse(functionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isAbstract());
      assertFalse(functionType0.isBigIntValueType());
      assertFalse(functionType0.isStructuralInterface());
      assertNull(functionType0.getGoogModuleId());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplatizedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNamedType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.matchesObjectContext());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isSymbolValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isUnsuccessfullyResolved());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isLiteralObject());
      assertTrue(functionType0.isObject());
      assertTrue(functionType0.isRawTypeOfTemplatizedType());
      assertTrue(functionType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isFunctionType());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      assertNotNull(unknownType0);
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNoType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isConstructor());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isNamedType());
      assertFalse(unknownType0.isInterface());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isBigIntValueType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.hasDisplayName());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isStructuralInterface());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.matchesSymbolContext());
      assertTrue(unknownType0.isResolved());
      assertFalse(unknownType0.isSymbolValueType());
      assertTrue(unknownType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isLiteralObject());
      assertFalse(unknownType0.isTemplatizedType());
      
      FunctionType functionType1 = unknownType0.getConstructor();
      assertNull(functionType1);
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNoType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isConstructor());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isNamedType());
      assertFalse(unknownType0.isInterface());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isBigIntValueType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.hasDisplayName());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isStructuralInterface());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.matchesSymbolContext());
      assertTrue(unknownType0.isResolved());
      assertFalse(unknownType0.isSymbolValueType());
      assertTrue(unknownType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isLiteralObject());
      assertFalse(unknownType0.isTemplatizedType());
      
      UnknownType unknownType1 = (UnknownType)ObjectType.cast(unknownType0);
      assertNotNull(unknownType1);
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNoType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isConstructor());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isNamedType());
      assertFalse(unknownType0.isInterface());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isBigIntValueType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.hasDisplayName());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isStructuralInterface());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.matchesSymbolContext());
      assertTrue(unknownType0.isResolved());
      assertFalse(unknownType0.isSymbolValueType());
      assertTrue(unknownType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isLiteralObject());
      assertFalse(unknownType0.isTemplatizedType());
      assertFalse(unknownType1.isConstructor());
      assertTrue(unknownType1.matchesObjectContext());
      assertFalse(unknownType1.isLiteralObject());
      assertFalse(unknownType1.isOrdinaryFunction());
      assertFalse(unknownType1.hasCachedValues());
      assertTrue(unknownType1.isUnknownType());
      assertFalse(unknownType1.isFunctionPrototypeType());
      assertTrue(unknownType1.matchesNumberContext());
      assertFalse(unknownType1.isTemplateType());
      assertFalse(unknownType1.isUnsuccessfullyResolved());
      assertFalse(unknownType1.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertEquals("?", unknownType1.getReferenceName());
      assertFalse(unknownType1.isRawTypeOfTemplatizedType());
      assertTrue(unknownType1.isObject());
      assertTrue(unknownType1.isSuccessfullyResolved());
      assertFalse(unknownType1.isSymbolValueType());
      assertFalse(unknownType1.isFunctionType());
      assertFalse(unknownType1.isAllType());
      assertFalse(unknownType1.isNativeObjectType());
      assertTrue(unknownType1.matchesSymbolContext());
      assertFalse(unknownType1.isNullType());
      assertFalse(unknownType1.isNoType());
      assertEquals("Unknown", unknownType1.getDisplayName());
      assertFalse(unknownType1.isNoObjectType());
      assertFalse(unknownType1.isEnumType());
      assertFalse(unknownType1.isTemplatizedType());
      assertEquals(0, unknownType1.getTemplateParamCount());
      assertFalse(unknownType1.isVoidType());
      assertFalse(unknownType1.isEnumElementType());
      assertTrue(unknownType1.hasDisplayName());
      assertFalse(unknownType1.isStructuralInterface());
      assertFalse(unknownType1.isUnionType());
      assertFalse(unknownType1.isNumberValueType());
      assertFalse(unknownType1.isBooleanValueType());
      assertTrue(unknownType1.isNullable());
      assertTrue(unknownType1.isVoidable());
      assertFalse(unknownType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unknownType1.isNamedType());
      assertFalse(unknownType1.isNoResolvedType());
      assertTrue(unknownType1.canBeCalled());
      assertFalse(unknownType1.isBigIntValueType());
      assertTrue(unknownType1.isResolved());
      assertTrue(unknownType1.matchesStringContext());
      assertFalse(unknownType1.isNominalConstructorOrInterface());
      assertFalse(unknownType1.isCheckedUnknownType());
      assertFalse(unknownType1.isStringValueType());
      assertFalse(unknownType1.isInterface());
      assertSame(unknownType0, unknownType1);
      assertSame(unknownType1, unknownType0);
      
      UnknownType unknownType2 = (UnknownType)jSTypeRegistry0.createNullableType(unknownType0);
      assertFalse(unknownType2.equals((Object)unknownType0));
      assertFalse(unknownType2.equals((Object)unknownType1));
      assertNotNull(unknownType2);
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNoType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isConstructor());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isNamedType());
      assertFalse(unknownType0.isInterface());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isBigIntValueType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.hasDisplayName());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isStructuralInterface());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.matchesSymbolContext());
      assertTrue(unknownType0.isResolved());
      assertFalse(unknownType0.isSymbolValueType());
      assertTrue(unknownType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isLiteralObject());
      assertFalse(unknownType0.isTemplatizedType());
      assertFalse(unknownType2.hasCachedValues());
      assertEquals(BooleanLiteralSet.BOTH, unknownType2.getPossibleToBooleanOutcomes());
      assertFalse(unknownType2.isNativeObjectType());
      assertTrue(unknownType2.isVoidable());
      assertFalse(unknownType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals("Unknown", unknownType2.getDisplayName());
      assertFalse(unknownType2.isAllType());
      assertFalse(unknownType2.isInterface());
      assertFalse(unknownType2.isLiteralObject());
      assertFalse(unknownType2.isFunctionType());
      assertTrue(unknownType2.matchesSymbolContext());
      assertFalse(unknownType2.isUnsuccessfullyResolved());
      assertFalse(unknownType2.isNominalConstructorOrInterface());
      assertTrue(unknownType2.isUnknownType());
      assertTrue(unknownType2.canBeCalled());
      assertTrue(unknownType2.matchesNumberContext());
      assertFalse(unknownType2.isTemplateType());
      assertTrue(unknownType2.matchesObjectContext());
      assertFalse(unknownType2.isStructuralInterface());
      assertTrue(unknownType2.isResolved());
      assertFalse(unknownType2.isNamedType());
      assertFalse(unknownType2.isOrdinaryFunction());
      assertFalse(unknownType2.isCheckedUnknownType());
      assertFalse(unknownType2.isStringValueType());
      assertTrue(unknownType2.hasDisplayName());
      assertFalse(unknownType2.isUnionType());
      assertFalse(unknownType2.isNoResolvedType());
      assertTrue(unknownType2.matchesStringContext());
      assertTrue(unknownType2.isObject());
      assertFalse(unknownType2.isTemplatizedType());
      assertFalse(unknownType2.isBigIntValueType());
      assertTrue(unknownType2.isNullable());
      assertFalse(unknownType2.isEnumElementType());
      assertTrue(unknownType2.isSuccessfullyResolved());
      assertFalse(unknownType2.isRawTypeOfTemplatizedType());
      assertFalse(unknownType2.isNoType());
      assertFalse(unknownType2.isVoidType());
      assertFalse(unknownType2.isNoObjectType());
      assertFalse(unknownType2.isSymbolValueType());
      assertFalse(unknownType2.isNullType());
      assertEquals(0, unknownType2.getTemplateParamCount());
      assertFalse(unknownType2.isEnumType());
      assertFalse(unknownType2.isConstructor());
      assertFalse(unknownType2.isRecordType());
      assertEquals("?", unknownType2.getReferenceName());
      assertFalse(unknownType2.isNumberValueType());
      assertFalse(unknownType2.isBooleanValueType());
      assertFalse(unknownType2.isFunctionPrototypeType());
      assertNotSame(unknownType0, unknownType2);
      assertSame(unknownType0, unknownType1);
      assertNotSame(unknownType2, unknownType0);
      assertNotSame(unknownType2, unknownType1);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createRecordType((Map<String, ? extends JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      assertNotNull(templateType0);
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isLiteralObject());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isConstructor());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isInterface());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isStructuralInterface());
      
      ImmutableList<JSType> immutableList0 = noResolvedType0.getTemplateTypes();
      assertNull(immutableList0);
      assertFalse(noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isStructuralInterface());
      
      TemplateType templateType1 = jSTypeRegistry0.getIteratorValueTemplate();
      assertNotNull(templateType1);
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isConstructor());
      assertTrue(templateType1.isTemplateType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNullType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isTypeTransformation());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertEquals("VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isStructuralInterface());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isNamedType());
      assertSame(templateType1, templateType0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      NoType noType0 = (NoType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(noType0);
      assertFalse(noType0.isTemplatizedType());
      assertFalse(noType0.isAbstract());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isBigIntValueType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.matchesStringContext());
      assertNull(noType0.getGoogModuleId());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isAnonymous());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isRecordType());
      assertNull(noType0.getClosurePrimitive());
      assertFalse(noType0.isStructuralInterface());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isConstructor());
      assertTrue(noType0.isVoidable());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isRawTypeOfTemplatizedType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.hasInstanceType());
      assertFalse(noType0.isSymbolValueType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.isSuccessfullyResolved());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.matchesSymbolContext());
      assertFalse(noType0.isNamedType());
      assertTrue(noType0.isNativeObjectType());
      assertFalse(noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isUnsuccessfullyResolved());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.isResolved());
      assertFalse(noType0.isNominalConstructorOrInterface());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isLiteralObject());
      assertTrue(noType0.isObject());
      assertFalse(noType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isBooleanValueType());
      assertEquals(0, noType0.getTemplateParamCount());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.isNullable());
      assertEquals(0, jSTypeNativeArray0.length);
      
      jSTypeRegistry0.registerLegacyClosureNamespace("Array");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      
      Node node0 = noResolvedType0.getPropertyDefSite("IOBJECT_VALUE");
      assertNull(node0);
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      
      TemplateType templateType0 = jSTypeRegistry0.getAsyncIterableTemplate();
      assertNotNull(templateType0);
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isTemplatizedType());
      
      jSTypeRegistry0.registerNonLegacyClosureNamespace("AsyncIterable", (Node) null, noResolvedType0);
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry0.buildRecordTypeFromObject(templateType0);
      assertNotNull(instanceObjectType0);
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isEnumType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertTrue(instanceObjectType0.isObject());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      
      String string0 = instanceObjectType0.toString();
      assertNotNull(string0);
      assertEquals("Object", string0);
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isEnumType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertTrue(instanceObjectType0.isObject());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      
      UnionType unionType0 = (UnionType)instanceObjectType0.getLeastSupertype(noResolvedType0);
      assertNotNull(unionType0);
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isEnumType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertTrue(instanceObjectType0.isObject());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isUnsuccessfullyResolved());
      assertFalse(unionType0.isRawTypeOfTemplatizedType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isNumberValueType());
      assertTrue(unionType0.isSuccessfullyResolved());
      assertFalse(unionType0.isLiteralObject());
      assertFalse(unionType0.isBigIntValueType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isSymbolValueType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isStructuralInterface());
      assertEquals(0, unionType0.getTemplateParamCount());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isTemplatizedType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isNamedType());
      assertFalse(unionType0.isInterface());
      assertTrue(unionType0.isResolved());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNativeObjectType());
      assertFalse(unionType0.isNominalConstructorOrInterface());
      
      boolean boolean0 = jSTypeRegistry0.isForwardDeclaredType((String) null);
      assertFalse(boolean0);
      
      HashMap<TemplateType, TemplateType> hashMap0 = new HashMap<TemplateType, TemplateType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<TemplateType, JSType> hashMap1 = new HashMap<TemplateType, JSType>(hashMap0);
      assertNotNull(hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      HashMap<TemplateType, JSType> hashMap2 = new HashMap<TemplateType, JSType>();
      assertTrue(hashMap2.equals((Object)hashMap1));
      assertNotNull(hashMap2);
      assertTrue(hashMap2.isEmpty());
      assertEquals(0, hashMap2.size());
      
      UnknownType unknownType0 = (UnknownType)noResolvedType0.getReturnType();
      assertNotNull(unknownType0);
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isLiteralObject());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isRecordType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.isNullable());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unknownType0.isNamedType());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isBigIntValueType());
      assertTrue(unknownType0.isResolved());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isTemplatizedType());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isStructuralInterface());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertFalse(unknownType0.isSymbolValueType());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isFunctionType());
      assertEquals("?", unknownType0.getReferenceName());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNativeObjectType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      
      JSType jSType0 = hashMap2.put(templateType0, unknownType0);
      assertFalse(hashMap2.equals((Object)hashMap1));
      assertNull(jSType0);
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(hashMap2.isEmpty());
      assertEquals(1, hashMap2.size());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isLiteralObject());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isRecordType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.isNullable());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unknownType0.isNamedType());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isBigIntValueType());
      assertTrue(unknownType0.isResolved());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isTemplatizedType());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isStructuralInterface());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertFalse(unknownType0.isSymbolValueType());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isFunctionType());
      assertEquals("?", unknownType0.getReferenceName());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNativeObjectType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertNotSame(hashMap2, hashMap1);
      
      JSType jSType1 = hashMap1.put(templateType0, (JSType) null);
      assertFalse(hashMap1.equals((Object)hashMap2));
      assertNull(jSType1);
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isTemplatizedType());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(hashMap1, hashMap2);
      
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) noResolvedType0, (Map<TemplateType, JSType>) hashMap1);
      assertFalse(hashMap1.equals((Object)hashMap2));
      assertNotNull(templatizedType0);
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertTrue(templatizedType0.isUnsuccessfullyResolved());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isRecordType());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.hasCachedValues());
      assertTrue(templatizedType0.isObject());
      assertTrue(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isFunctionType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isEnumElementType());
      assertTrue(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isVoidType());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isNoType());
      assertFalse(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(hashMap1, hashMap2);
      
      boolean boolean1 = templatizedType0.canBeCalled();
      assertFalse(boolean1 == boolean0);
      assertFalse(hashMap1.equals((Object)hashMap2));
      assertTrue(boolean1);
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertTrue(templatizedType0.isUnsuccessfullyResolved());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isRecordType());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.hasCachedValues());
      assertTrue(templatizedType0.isObject());
      assertTrue(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isFunctionType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isEnumElementType());
      assertTrue(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isVoidType());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isNoType());
      assertFalse(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(hashMap1, hashMap2);
      
      jSTypeRegistry0.resetImplicitPrototype(instanceObjectType0, templatizedType0);
      assertFalse(hashMap1.equals((Object)hashMap2));
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertTrue(templatizedType0.isUnsuccessfullyResolved());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isRecordType());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.hasCachedValues());
      assertTrue(templatizedType0.isObject());
      assertTrue(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isFunctionType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isEnumElementType());
      assertTrue(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isVoidType());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isNoType());
      assertFalse(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isEnumType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertTrue(instanceObjectType0.isObject());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotSame(hashMap1, hashMap2);
      
      UnknownType unknownType1 = (UnknownType)jSTypeRegistry0.createNullableType(unknownType0);
      assertNotNull(unknownType1);
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(unknownType1.matchesNumberContext());
      assertFalse(unknownType1.isTemplateType());
      assertFalse(unknownType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unknownType1.isAllType());
      assertFalse(unknownType1.isFunctionType());
      assertTrue(unknownType1.isResolved());
      assertTrue(unknownType1.isVoidable());
      assertFalse(unknownType1.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertFalse(unknownType1.hasCachedValues());
      assertFalse(unknownType1.isBooleanValueType());
      assertFalse(unknownType1.isRecordType());
      assertFalse(unknownType1.isEnumElementType());
      assertFalse(unknownType1.isConstructor());
      assertFalse(unknownType1.isLiteralObject());
      assertFalse(unknownType1.isFunctionPrototypeType());
      assertFalse(unknownType1.isTemplatizedType());
      assertTrue(unknownType1.matchesSymbolContext());
      assertFalse(unknownType1.isSymbolValueType());
      assertFalse(unknownType1.isNoObjectType());
      assertFalse(unknownType1.isNoType());
      assertEquals("Unknown", unknownType1.getDisplayName());
      assertFalse(unknownType1.isNullType());
      assertFalse(unknownType1.isNativeObjectType());
      assertTrue(unknownType1.isObject());
      assertFalse(unknownType1.isBigIntValueType());
      assertFalse(unknownType1.isNoResolvedType());
      assertFalse(unknownType1.isUnionType());
      assertFalse(unknownType1.isNamedType());
      assertFalse(unknownType1.isCheckedUnknownType());
      assertTrue(unknownType1.isNullable());
      assertFalse(unknownType1.isNumberValueType());
      assertFalse(unknownType1.isRawTypeOfTemplatizedType());
      assertEquals("?", unknownType1.getReferenceName());
      assertTrue(unknownType1.isSuccessfullyResolved());
      assertFalse(unknownType1.isUnsuccessfullyResolved());
      assertTrue(unknownType1.hasDisplayName());
      assertFalse(unknownType1.isEnumType());
      assertFalse(unknownType1.isInterface());
      assertEquals(0, unknownType1.getTemplateParamCount());
      assertTrue(unknownType1.isUnknownType());
      assertTrue(unknownType1.matchesObjectContext());
      assertFalse(unknownType1.isVoidType());
      assertFalse(unknownType1.isStructuralInterface());
      assertTrue(unknownType1.canBeCalled());
      assertFalse(unknownType1.isStringValueType());
      assertFalse(unknownType1.isNominalConstructorOrInterface());
      assertTrue(unknownType1.matchesStringContext());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isLiteralObject());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isRecordType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.isNullable());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unknownType0.isNamedType());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isBigIntValueType());
      assertTrue(unknownType0.isResolved());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isTemplatizedType());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isStructuralInterface());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertFalse(unknownType0.isSymbolValueType());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isFunctionType());
      assertEquals("?", unknownType0.getReferenceName());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNativeObjectType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertSame(unknownType1, unknownType0);
      assertSame(unknownType0, unknownType1);
      
      TemplateType templateType1 = jSTypeRegistry0.getGeneratorValueTemplate();
      assertFalse(templateType1.equals((Object)templateType0));
      assertNotNull(templateType1);
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertEquals("VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isStringValueType());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isUnionType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isVoidType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isEnumElementType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isStructuralInterface());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isNoResolvedType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertNotSame(templateType1, templateType0);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createObjectType((String) null, instanceObjectType0);
      assertFalse(templateType0.equals((Object)templateType1));
      assertNotNull(prototypeObjectType0);
      assertFalse(templateType0.isFunctionPrototypeType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isVoidType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNamedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(prototypeObjectType0.isUnsuccessfullyResolved());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(prototypeObjectType0.isNoType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isNominalConstructorOrInterface());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertTrue(prototypeObjectType0.isSuccessfullyResolved());
      assertFalse(prototypeObjectType0.isNamedType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isLiteralObject());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isAnonymous());
      assertFalse(prototypeObjectType0.isTemplatizedType());
      assertFalse(prototypeObjectType0.isStructuralInterface());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isSymbolValueType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertEquals(0, prototypeObjectType0.getTemplateParamCount());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isBigIntValueType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isEnumType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertTrue(instanceObjectType0.isObject());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertNotSame(templateType0, templateType1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("U8!");
      assertNotNull(templateType0);
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals("U8!", templateType0.getReferenceName());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isUnionType());
      
      Token token0 = Token.MOD;
      Token token1 = Token.COLON;
      Node node0 = new Node(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isWith());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isRest());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isScript());
      assertFalse(node0.isImport());
      assertFalse(node0.isAssign());
      assertFalse(node0.isClass());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isComputedProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.isYield());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isRoot());
      assertEquals(Token.COLON, node0.getToken());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isConst());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNeg());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isForOf());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSpread());
      assertFalse(node0.isSuper());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.hasParent());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExport());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isCast());
      assertFalse(node0.isAwait());
      assertFalse(node0.isExponent());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSub());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isForIn());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isNE());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isDo());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isEQ());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLet());
      assertFalse(node0.isSHNE());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isParamList());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      
      Node node1 = new Node(token0, node0);
      assertFalse(token0.equals((Object)token1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node1);
      assertFalse(node0.isWith());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isRest());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isScript());
      assertFalse(node0.isImport());
      assertFalse(node0.isAssign());
      assertFalse(node0.isClass());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isComputedProp());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.isYield());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isRoot());
      assertEquals(Token.COLON, node0.getToken());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isConst());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNeg());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isForOf());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isSpread());
      assertFalse(node0.isSuper());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExport());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isCast());
      assertFalse(node0.isAwait());
      assertFalse(node0.isExponent());
      assertFalse(node0.isInterfaceMembers());
      assertTrue(node0.hasParent());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSub());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isForIn());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isNE());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isDo());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isEQ());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLet());
      assertFalse(node0.isSHNE());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isParamList());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isMemberVariableDef());
      assertFalse(node1.isNeg());
      assertFalse(node1.isForIn());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isOptChainGetProp());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isClassMembers());
      assertFalse(node1.isDestructuringLhs());
      assertFalse(node1.isName());
      assertFalse(node1.isNullishCoalesce());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignNullishCoalesce());
      assertFalse(node1.isNew());
      assertFalse(node1.isVanillaFor());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTemplateLitString());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isRoot());
      assertFalse(node1.isBigInt());
      assertFalse(node1.isDefaultValue());
      assertFalse(node1.isInterfaceMembers());
      assertFalse(node1.isAwait());
      assertFalse(node1.isSuper());
      assertFalse(node1.isExportSpec());
      assertFalse(node1.isNot());
      assertFalse(node1.isImportMeta());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSHEQ());
      assertFalse(node1.hasParent());
      assertFalse(node1.isComma());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIndexSignature());
      assertFalse(node1.isBreak());
      assertFalse(node1.isForAwaitOf());
      assertFalse(node1.isThrow());
      assertFalse(node1.isModuleBody());
      assertFalse(node1.isOr());
      assertFalse(node1.isObjectRest());
      assertFalse(node1.isInc());
      assertFalse(node1.isComputedProp());
      assertFalse(node1.isArrayPattern());
      assertFalse(node1.isDo());
      assertFalse(node1.isTemplateLit());
      assertFalse(node1.isOptChainCall());
      assertFalse(node1.isAssignAnd());
      assertFalse(node1.isEQ());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTemplateLitSub());
      assertFalse(node1.isBlock());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasTwoChildren());
      assertFalse(node1.isSHNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDestructuringPattern());
      assertFalse(node1.isImportStar());
      assertFalse(node1.isTaggedTemplateLit());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSub());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isExportSpecs());
      assertFalse(node1.isNormalBlock());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isImportSpecs());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isStringLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVar());
      assertFalse(node1.isIf());
      assertFalse(node1.isLet());
      assertFalse(node1.isSetterDef());
      assertEquals(Token.MOD, node1.getToken());
      assertFalse(node1.isOptChainGetElem());
      assertFalse(node1.isIn());
      assertFalse(node1.isConst());
      assertNull(node1.getOriginalName());
      assertFalse(node1.isExponent());
      assertFalse(node1.isYield());
      assertFalse(node1.isExport());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isWith());
      assertFalse(node1.isSpread());
      assertFalse(node1.isRest());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBitNot());
      assertFalse(node1.isImport());
      assertFalse(node1.isGetElem());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isClass());
      assertFalse(node1.isAssignExponent());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isMemberFunctionDef());
      assertFalse(node1.isComputedFieldDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isAssignOr());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isImportSpec());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isHook());
      assertFalse(node1.isLabel());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCallSignature());
      assertFalse(node1.isMemberFieldDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isObjectPattern());
      assertTrue(node1.hasZeroOrOneChild());
      assertFalse(node1.isRecordType());
      assertFalse(node1.isScript());
      assertFalse(node1.isForOf());
      assertFalse(node1.isNumber());
      
      Node node2 = Node.newString("+-%PJoY8");
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node2);
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isImportMeta());
      assertFalse(node2.isSuper());
      assertFalse(node2.isObjectRest());
      assertFalse(node2.hasParent());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBreak());
      assertFalse(node2.isSpread());
      assertFalse(node2.isImportStar());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isSHEQ());
      assertFalse(node2.isAwait());
      assertFalse(node2.isMemberFieldDef());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isVanillaFor());
      assertFalse(node2.isExponent());
      assertFalse(node2.isNE());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isAssignNullishCoalesce());
      assertFalse(node2.isCast());
      assertFalse(node2.isExport());
      assertFalse(node2.isBitNot());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isForAwaitOf());
      assertFalse(node2.isMemberVariableDef());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isNeg());
      assertFalse(node2.isCall());
      assertFalse(node2.isDefaultValue());
      assertFalse(node2.isBigInt());
      assertFalse(node2.isRecordType());
      assertFalse(node2.isInterfaceMembers());
      assertFalse(node2.isForOf());
      assertFalse(node2.isObjectPattern());
      assertEquals("+-%PJoY8", node2.getString());
      assertTrue(node2.hasZeroOrOneChild());
      assertTrue(node2.isString());
      assertFalse(node2.isTry());
      assertFalse(node2.isImportSpec());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isCallSignature());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAssignOr());
      assertFalse(node2.isLabelName());
      assertTrue(node2.isStringLit());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isComputedFieldDef());
      assertFalse(node2.isOptChainGetElem());
      assertFalse(node2.isAdd());
      assertFalse(node2.isClass());
      assertFalse(node2.isImport());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isIndexSignature());
      assertFalse(node2.isWith());
      assertFalse(node2.isExportSpec());
      assertFalse(node2.isNot());
      assertFalse(node2.isRest());
      assertFalse(node2.isTaggedTemplateLit());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isHook());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAssign());
      assertFalse(node2.isExportSpecs());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNormalBlock());
      assertFalse(node2.isScript());
      assertFalse(node2.isYield());
      assertFalse(node2.isCase());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isConst());
      assertFalse(node2.isIn());
      assertFalse(node2.isIf());
      assertEquals(0, node2.getLength());
      assertFalse(node2.isArrayPattern());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isComputedProp());
      assertFalse(node2.isInc());
      assertFalse(node2.isAssignExponent());
      assertFalse(node2.isDestructuringLhs());
      assertFalse(node2.isMemberFunctionDef());
      assertFalse(node2.isForIn());
      assertFalse(node2.isOptChainGetProp());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isImportSpecs());
      assertFalse(node2.isParamList());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isTemplateLitString());
      assertFalse(node2.isName());
      assertEquals(Token.STRINGLIT, node2.getToken());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVoid());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isTemplateLitSub());
      assertFalse(node2.isClassMembers());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isBlock());
      assertFalse(node2.isWhile());
      assertFalse(node2.isSub());
      assertFalse(node2.isRoot());
      assertFalse(node2.isTemplateLit());
      assertFalse(node2.isSHNE());
      assertFalse(node2.isOptChainCall());
      assertFalse(node2.hasTwoChildren());
      assertFalse(node2.isOr());
      assertEquals((-1), node2.getCharno());
      assertNull(node2.getOriginalName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isAssignAnd());
      assertFalse(node2.isNullishCoalesce());
      assertFalse(node2.isDestructuringPattern());
      assertFalse(node2.isVar());
      assertFalse(node2.isEQ());
      assertFalse(node2.isModuleBody());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isLet());
      
      JSType jSType0 = jSTypeRegistry0.createTypeFromCommentNode(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(jSType0);
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isImportMeta());
      assertFalse(node2.isSuper());
      assertFalse(node2.isObjectRest());
      assertFalse(node2.hasParent());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBreak());
      assertFalse(node2.isSpread());
      assertFalse(node2.isImportStar());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isSHEQ());
      assertFalse(node2.isAwait());
      assertFalse(node2.isMemberFieldDef());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isVanillaFor());
      assertFalse(node2.isExponent());
      assertFalse(node2.isNE());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isAssignNullishCoalesce());
      assertFalse(node2.isCast());
      assertFalse(node2.isExport());
      assertFalse(node2.isBitNot());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isForAwaitOf());
      assertFalse(node2.isMemberVariableDef());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isNeg());
      assertFalse(node2.isCall());
      assertFalse(node2.isDefaultValue());
      assertFalse(node2.isBigInt());
      assertFalse(node2.isRecordType());
      assertFalse(node2.isInterfaceMembers());
      assertFalse(node2.isForOf());
      assertFalse(node2.isObjectPattern());
      assertEquals("+-%PJoY8", node2.getString());
      assertTrue(node2.hasZeroOrOneChild());
      assertTrue(node2.isString());
      assertFalse(node2.isTry());
      assertFalse(node2.isImportSpec());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isCallSignature());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAssignOr());
      assertFalse(node2.isLabelName());
      assertTrue(node2.isStringLit());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isComputedFieldDef());
      assertFalse(node2.isOptChainGetElem());
      assertFalse(node2.isAdd());
      assertFalse(node2.isClass());
      assertFalse(node2.isImport());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isIndexSignature());
      assertFalse(node2.isWith());
      assertFalse(node2.isExportSpec());
      assertFalse(node2.isNot());
      assertFalse(node2.isRest());
      assertFalse(node2.isTaggedTemplateLit());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isHook());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAssign());
      assertFalse(node2.isExportSpecs());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNormalBlock());
      assertFalse(node2.isScript());
      assertFalse(node2.isYield());
      assertFalse(node2.isCase());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isConst());
      assertFalse(node2.isIn());
      assertFalse(node2.isIf());
      assertEquals(0, node2.getLength());
      assertFalse(node2.isArrayPattern());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isComputedProp());
      assertFalse(node2.isInc());
      assertFalse(node2.isAssignExponent());
      assertFalse(node2.isDestructuringLhs());
      assertFalse(node2.isMemberFunctionDef());
      assertFalse(node2.isForIn());
      assertFalse(node2.isOptChainGetProp());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isImportSpecs());
      assertFalse(node2.isParamList());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isTemplateLitString());
      assertFalse(node2.isName());
      assertEquals(Token.STRINGLIT, node2.getToken());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVoid());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isTemplateLitSub());
      assertFalse(node2.isClassMembers());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isBlock());
      assertFalse(node2.isWhile());
      assertFalse(node2.isSub());
      assertFalse(node2.isRoot());
      assertFalse(node2.isTemplateLit());
      assertFalse(node2.isSHNE());
      assertFalse(node2.isOptChainCall());
      assertFalse(node2.hasTwoChildren());
      assertFalse(node2.isOr());
      assertEquals((-1), node2.getCharno());
      assertNull(node2.getOriginalName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isAssignAnd());
      assertFalse(node2.isNullishCoalesce());
      assertFalse(node2.isDestructuringPattern());
      assertFalse(node2.isVar());
      assertFalse(node2.isEQ());
      assertFalse(node2.isModuleBody());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isLet());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNativeObjectType());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isUnsuccessfullyResolved());
      assertFalse(jSType0.isSymbolValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isLiteralObject());
      assertFalse(jSType0.isTemplatizedType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isRawTypeOfTemplatizedType());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.isSuccessfullyResolved());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNamedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isStructuralInterface());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNominalConstructorOrInterface());
      assertFalse(jSType0.isBigIntValueType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals(0, jSType0.getTemplateParamCount());
      assertFalse(jSType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry0.buildRecordTypeFromObject(templateType0);
      assertNotNull(instanceObjectType0);
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertTrue(templateType0.isObject());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertEquals("U8!", templateType0.getReferenceName());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isUnionType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isNamedType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isObject());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      
      TemplateType templateType1 = jSTypeRegistry0.getObjectElementKey();
      assertFalse(templateType1.equals((Object)templateType0));
      assertNotNull(templateType1);
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isBigIntValueType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isEnumElementType());
      assertEquals("IOBJECT_VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType1.isTemplateType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isOrdinaryFunction());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertNotSame(templateType1, templateType0);
      
      TemplateType templateType2 = jSTypeRegistry0.getGeneratorValueTemplate();
      assertFalse(templateType2.equals((Object)templateType0));
      assertFalse(templateType2.equals((Object)templateType1));
      assertNotNull(templateType2);
      assertFalse(templateType2.isNativeObjectType());
      assertFalse(templateType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType2.isTemplateType());
      assertFalse(templateType2.isAllType());
      assertFalse(templateType2.isNullType());
      assertFalse(templateType2.isInterface());
      assertFalse(templateType2.isBooleanValueType());
      assertFalse(templateType2.isStructuralInterface());
      assertFalse(templateType2.isEnumElementType());
      assertFalse(templateType2.isEnumType());
      assertFalse(templateType2.isFunctionType());
      assertFalse(templateType2.isTemplatizedType());
      assertFalse(templateType2.isCheckedUnknownType());
      assertFalse(templateType2.isConstructor());
      assertFalse(templateType2.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertFalse(templateType2.hasCachedValues());
      assertFalse(templateType2.isTypeTransformation());
      assertTrue(templateType2.isObject());
      assertFalse(templateType2.isSymbolValueType());
      assertFalse(templateType2.isUnsuccessfullyResolved());
      assertFalse(templateType2.isNoObjectType());
      assertFalse(templateType2.isRawTypeOfTemplatizedType());
      assertEquals("VALUE", templateType2.getReferenceName());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isNoType());
      assertTrue(templateType2.isSuccessfullyResolved());
      assertFalse(templateType2.isLiteralObject());
      assertFalse(templateType2.isUnionType());
      assertFalse(templateType2.isBigIntValueType());
      assertEquals(0, templateType2.getTemplateParamCount());
      assertTrue(templateType2.hasAnyTemplateTypesInternal());
      assertFalse(templateType2.isOrdinaryFunction());
      assertFalse(templateType2.isVoidType());
      assertFalse(templateType2.isNoResolvedType());
      assertFalse(templateType2.isNamedType());
      assertTrue(templateType2.isResolved());
      assertFalse(templateType2.isStringValueType());
      assertFalse(templateType2.isNominalConstructorOrInterface());
      assertNotSame(templateType2, templateType0);
      assertNotSame(templateType2, templateType1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertTrue(noResolvedType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNullable());
      
      Node node0 = noResolvedType0.getPropertyDefSite("IOBJECT_VALUE");
      assertNull(node0);
      assertTrue(noResolvedType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNullable());
      
      TemplateType templateType0 = jSTypeRegistry0.getAsyncIterableTemplate();
      assertNotNull(templateType0);
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isNativeObjectType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStructuralInterface());
      
      jSTypeRegistry0.registerNonLegacyClosureNamespace("AsyncIterable", (Node) null, noResolvedType0);
      assertTrue(noResolvedType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNullable());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry0.buildRecordTypeFromObject(templateType0);
      assertNotNull(instanceObjectType0);
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isNativeObjectType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isUnionType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      
      String string0 = instanceObjectType0.toString();
      assertNotNull(string0);
      assertEquals("Object", string0);
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isNativeObjectType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isUnionType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      
      UnionType unionType0 = (UnionType)instanceObjectType0.getLeastSupertype(noResolvedType0);
      assertNotNull(unionType0);
      assertTrue(noResolvedType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isNativeObjectType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isUnionType());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isStructuralInterface());
      assertTrue(unionType0.isResolved());
      assertFalse(unionType0.isSymbolValueType());
      assertFalse(unionType0.isNativeObjectType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isBigIntValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertEquals(0, unionType0.getTemplateParamCount());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isVoidType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unionType0.isUnsuccessfullyResolved());
      assertFalse(unionType0.isRawTypeOfTemplatizedType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isNamedType());
      assertFalse(unionType0.isNominalConstructorOrInterface());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isTemplateType());
      assertTrue(unionType0.isSuccessfullyResolved());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isLiteralObject());
      assertFalse(unionType0.isTemplatizedType());
      
      boolean boolean0 = jSTypeRegistry0.isForwardDeclaredType((String) null);
      assertFalse(boolean0);
      
      HashMap<TemplateType, TemplateType> hashMap0 = new HashMap<TemplateType, TemplateType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<TemplateType, JSType> hashMap1 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      UnknownType unknownType0 = (UnknownType)noResolvedType0.getReturnType();
      assertNotNull(unknownType0);
      assertTrue(noResolvedType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertTrue(unknownType0.hasDisplayName());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNamedType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertFalse(unknownType0.isEnumType());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isBigIntValueType());
      assertFalse(unknownType0.isTemplatizedType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isNoObjectType());
      assertEquals("?", unknownType0.getReferenceName());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isSymbolValueType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isLiteralObject());
      assertFalse(unknownType0.isStructuralInterface());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.isResolved());
      assertTrue(unknownType0.matchesObjectContext());
      
      JSType jSType0 = hashMap1.put(templateType0, unknownType0);
      assertNull(jSType0);
      assertTrue(noResolvedType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isNativeObjectType());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNoResolvedType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStructuralInterface());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertTrue(unknownType0.hasDisplayName());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNamedType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertFalse(unknownType0.isEnumType());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isBigIntValueType());
      assertFalse(unknownType0.isTemplatizedType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isNoObjectType());
      assertEquals("?", unknownType0.getReferenceName());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isSymbolValueType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isLiteralObject());
      assertFalse(unknownType0.isStructuralInterface());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.isResolved());
      assertTrue(unknownType0.matchesObjectContext());
      
      boolean boolean1 = jSTypeRegistry0.isForwardDeclaredType("Object");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      TemplateType templateType1 = jSTypeRegistry0.getIteratorValueTemplate();
      assertFalse(templateType1.equals((Object)templateType0));
      assertNotNull(templateType1);
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isVoidType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isOrdinaryFunction());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isNamedType());
      assertEquals("VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isLiteralObject());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isBigIntValueType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.hasCachedValues());
      assertNotSame(templateType1, templateType0);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createObjectType((String) null, unknownType0);
      assertNotNull(prototypeObjectType0);
      assertFalse(prototypeObjectType0.isStructuralInterface());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isSymbolValueType());
      assertFalse(prototypeObjectType0.isTemplatizedType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertTrue(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertTrue(prototypeObjectType0.isSuccessfullyResolved());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isUnsuccessfullyResolved());
      assertFalse(prototypeObjectType0.isNamedType());
      assertFalse(prototypeObjectType0.isLiteralObject());
      assertFalse(prototypeObjectType0.isNominalConstructorOrInterface());
      assertFalse(prototypeObjectType0.isAnonymous());
      assertFalse(prototypeObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(prototypeObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isBigIntValueType());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertEquals(0, prototypeObjectType0.getTemplateParamCount());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isConstructor());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertFalse(noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertFalse(noResolvedType0.isAbstract());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertTrue(unknownType0.hasDisplayName());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNamedType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertFalse(unknownType0.isEnumType());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isBigIntValueType());
      assertFalse(unknownType0.isTemplatizedType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isNoObjectType());
      assertEquals("?", unknownType0.getReferenceName());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isSymbolValueType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(unknownType0.isVoidable());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isLiteralObject());
      assertFalse(unknownType0.isStructuralInterface());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.isResolved());
      assertTrue(unknownType0.matchesObjectContext());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNamedType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAbstract());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNoResolvedType());
      
      Node node0 = noResolvedType0.getPropertyDefSite("IOBJECT_VALUE");
      assertNull(node0);
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNamedType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAbstract());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNoResolvedType());
      
      TemplateType templateType0 = jSTypeRegistry0.getAsyncIterableTemplate();
      assertNotNull(templateType0);
      assertFalse(templateType0.hasCachedValues());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      
      jSTypeRegistry0.registerNonLegacyClosureNamespace("AsyncIterable", (Node) null, noResolvedType0);
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNamedType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAbstract());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNoResolvedType());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry0.buildRecordTypeFromObject(templateType0);
      assertNotNull(instanceObjectType0);
      assertFalse(templateType0.hasCachedValues());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isConstructor());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isVoidType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      
      String string0 = instanceObjectType0.toString();
      assertNotNull(string0);
      assertEquals("Object", string0);
      assertFalse(templateType0.hasCachedValues());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isConstructor());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isVoidType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      
      UnionType unionType0 = (UnionType)instanceObjectType0.getLeastSupertype(noResolvedType0);
      assertNotNull(unionType0);
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNamedType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAbstract());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isConstructor());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isVoidType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertTrue(unionType0.isResolved());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals(0, unionType0.getTemplateParamCount());
      assertFalse(unionType0.isLiteralObject());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isSymbolValueType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNamedType());
      assertFalse(unionType0.isBigIntValueType());
      assertTrue(unionType0.isSuccessfullyResolved());
      assertFalse(unionType0.isRawTypeOfTemplatizedType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isUnsuccessfullyResolved());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isTemplatizedType());
      assertFalse(unionType0.isNominalConstructorOrInterface());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isStructuralInterface());
      assertFalse(unionType0.isNativeObjectType());
      
      boolean boolean0 = jSTypeRegistry0.isForwardDeclaredType((String) null);
      assertFalse(boolean0);
      
      HashMap<TemplateType, TemplateType> hashMap0 = new HashMap<TemplateType, TemplateType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<TemplateType, JSType> hashMap1 = new HashMap<TemplateType, JSType>(hashMap0);
      assertNotNull(hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      HashMap<TemplateType, JSType> hashMap2 = new HashMap<TemplateType, JSType>();
      assertTrue(hashMap2.equals((Object)hashMap1));
      assertNotNull(hashMap2);
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      
      UnknownType unknownType0 = (UnknownType)noResolvedType0.getReturnType();
      assertNotNull(unknownType0);
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNamedType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAbstract());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.isResolved());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isSymbolValueType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertFalse(unknownType0.isAllType());
      assertEquals("?", unknownType0.getReferenceName());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isLiteralObject());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isTemplatizedType());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNamedType());
      assertFalse(unknownType0.isStructuralInterface());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isBigIntValueType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.isNullable());
      assertTrue(unknownType0.isVoidable());
      
      JSType jSType0 = hashMap2.put(templateType0, unknownType0);
      assertFalse(hashMap2.equals((Object)hashMap1));
      assertNull(jSType0);
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNamedType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAbstract());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(hashMap2.isEmpty());
      assertEquals(1, hashMap2.size());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.isResolved());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isSymbolValueType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertFalse(unknownType0.isAllType());
      assertEquals("?", unknownType0.getReferenceName());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isLiteralObject());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isTemplatizedType());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNamedType());
      assertFalse(unknownType0.isStructuralInterface());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isBigIntValueType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.isNullable());
      assertTrue(unknownType0.isVoidable());
      assertNotSame(hashMap2, hashMap1);
      
      JSType jSType1 = hashMap1.put(templateType0, (JSType) null);
      assertFalse(hashMap1.equals((Object)hashMap2));
      assertNull(jSType1);
      assertFalse(templateType0.hasCachedValues());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotSame(hashMap1, hashMap2);
      
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) noResolvedType0, (Map<TemplateType, JSType>) hashMap1);
      assertFalse(hashMap1.equals((Object)hashMap2));
      assertNotNull(templatizedType0);
      assertFalse(templatizedType0.isConstructor());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isNoType());
      assertTrue(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.isRecordType());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertFalse(templatizedType0.isLiteralObject());
      assertTrue(templatizedType0.isUnsuccessfullyResolved());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isFunctionType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isSymbolValueType());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isUnionType());
      assertTrue(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNamedType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAbstract());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotSame(hashMap1, hashMap2);
      
      boolean boolean1 = templatizedType0.canBeCalled();
      assertFalse(boolean1 == boolean0);
      assertFalse(hashMap1.equals((Object)hashMap2));
      assertTrue(boolean1);
      assertFalse(templatizedType0.isConstructor());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isNoType());
      assertTrue(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.isRecordType());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertFalse(templatizedType0.isLiteralObject());
      assertTrue(templatizedType0.isUnsuccessfullyResolved());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isFunctionType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isSymbolValueType());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isUnionType());
      assertTrue(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNamedType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAbstract());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotSame(hashMap1, hashMap2);
      
      jSTypeRegistry0.resetImplicitPrototype(instanceObjectType0, templatizedType0);
      assertFalse(hashMap1.equals((Object)hashMap2));
      assertFalse(templatizedType0.isConstructor());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isNoType());
      assertTrue(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isEnumElementType());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isVoidType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertFalse(templatizedType0.isTemplateType());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isNamedType());
      assertFalse(templatizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.isRecordType());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertFalse(templatizedType0.isLiteralObject());
      assertTrue(templatizedType0.isUnsuccessfullyResolved());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isFunctionType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isSymbolValueType());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isUnionType());
      assertTrue(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNamedType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAbstract());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertTrue(templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isInterface());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isRawTypeOfTemplatizedType());
      assertFalse(instanceObjectType0.isSymbolValueType());
      assertFalse(instanceObjectType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isConstructor());
      assertEquals(2, instanceObjectType0.getTemplateParamCount());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isSuccessfullyResolved());
      assertFalse(instanceObjectType0.isVoidType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isBigIntValueType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isUnsuccessfullyResolved());
      assertFalse(instanceObjectType0.isNominalConstructorOrInterface());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isLiteralObject());
      assertFalse(instanceObjectType0.isAnonymous());
      assertFalse(instanceObjectType0.isTemplatizedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isStructuralInterface());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotSame(hashMap1, hashMap2);
      
      UnknownType unknownType1 = (UnknownType)jSTypeRegistry0.createNullableType(unknownType0);
      assertNotNull(unknownType1);
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNamedType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAbstract());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(unknownType1.isStructuralInterface());
      assertEquals(0, unknownType1.getTemplateParamCount());
      assertFalse(unknownType1.isEnumType());
      assertFalse(unknownType1.isNullType());
      assertFalse(unknownType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unknownType1.isVoidType());
      assertTrue(unknownType1.isVoidable());
      assertTrue(unknownType1.matchesSymbolContext());
      assertFalse(unknownType1.isTemplatizedType());
      assertFalse(unknownType1.isAllType());
      assertFalse(unknownType1.isEnumElementType());
      assertFalse(unknownType1.isOrdinaryFunction());
      assertFalse(unknownType1.isFunctionType());
      assertTrue(unknownType1.isResolved());
      assertFalse(unknownType1.isCheckedUnknownType());
      assertFalse(unknownType1.isStringValueType());
      assertTrue(unknownType1.matchesNumberContext());
      assertFalse(unknownType1.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertTrue(unknownType1.matchesStringContext());
      assertTrue(unknownType1.canBeCalled());
      assertFalse(unknownType1.isNamedType());
      assertFalse(unknownType1.isLiteralObject());
      assertTrue(unknownType1.matchesObjectContext());
      assertFalse(unknownType1.isFunctionPrototypeType());
      assertFalse(unknownType1.isInterface());
      assertTrue(unknownType1.isUnknownType());
      assertFalse(unknownType1.isUnsuccessfullyResolved());
      assertFalse(unknownType1.isNominalConstructorOrInterface());
      assertEquals("Unknown", unknownType1.getDisplayName());
      assertFalse(unknownType1.isRawTypeOfTemplatizedType());
      assertTrue(unknownType1.isNullable());
      assertFalse(unknownType1.isNoObjectType());
      assertFalse(unknownType1.isNoType());
      assertFalse(unknownType1.isBigIntValueType());
      assertTrue(unknownType1.isSuccessfullyResolved());
      assertFalse(unknownType1.isNativeObjectType());
      assertTrue(unknownType1.hasDisplayName());
      assertFalse(unknownType1.isNumberValueType());
      assertFalse(unknownType1.isNoResolvedType());
      assertFalse(unknownType1.isUnionType());
      assertTrue(unknownType1.isObject());
      assertFalse(unknownType1.isRecordType());
      assertFalse(unknownType1.isBooleanValueType());
      assertEquals("?", unknownType1.getReferenceName());
      assertFalse(unknownType1.isSymbolValueType());
      assertFalse(unknownType1.hasCachedValues());
      assertFalse(unknownType1.isConstructor());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.isResolved());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isSymbolValueType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertFalse(unknownType0.isAllType());
      assertEquals("?", unknownType0.getReferenceName());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isLiteralObject());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isTemplatizedType());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNamedType());
      assertFalse(unknownType0.isStructuralInterface());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isBigIntValueType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.isNullable());
      assertTrue(unknownType0.isVoidable());
      assertSame(unknownType1, unknownType0);
      assertSame(unknownType0, unknownType1);
      
      TemplateType templateType1 = jSTypeRegistry0.getGeneratorValueTemplate();
      assertFalse(templateType1.equals((Object)templateType0));
      assertNotNull(templateType1);
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isResolved());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isEnumType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertEquals("VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isNumberValueType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isNoObjectType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isStringValueType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isNoResolvedType());
      assertTrue(templateType1.isTemplateType());
      assertNotSame(templateType1, templateType0);
      
      AutoValue_JSTypeRegistry_ClosureNamespace autoValue_JSTypeRegistry_ClosureNamespace0 = (AutoValue_JSTypeRegistry_ClosureNamespace)JSTypeRegistry.ClosureNamespace.create(false, (Node) null, unknownType0);
      assertNotNull(autoValue_JSTypeRegistry_ClosureNamespace0);
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNamedType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertNull(noResolvedType0.getGoogModuleId());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAbstract());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isLiteralObject());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.isResolved());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertTrue(unknownType0.matchesSymbolContext());
      assertFalse(unknownType0.isSymbolValueType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isUnsuccessfullyResolved());
      assertFalse(unknownType0.isAllType());
      assertEquals("?", unknownType0.getReferenceName());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isLiteralObject());
      assertTrue(unknownType0.isSuccessfullyResolved());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isRawTypeOfTemplatizedType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isTemplatizedType());
      assertEquals(0, unknownType0.getTemplateParamCount());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNamedType());
      assertFalse(unknownType0.isStructuralInterface());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isNominalConstructorOrInterface());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isBigIntValueType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.isNullable());
      assertTrue(unknownType0.isVoidable());
      assertSame(unknownType0, unknownType1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      assertNotNull(templateType0);
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNoResolvedType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isLiteralObject());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isCheckedUnknownType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isConstructor());
      
      PrototypeObjectType.Builder<FunctionType.Builder> prototypeObjectType_Builder0 = new PrototypeObjectType.Builder<FunctionType.Builder>(jSTypeRegistry0);
      assertNotNull(prototypeObjectType_Builder0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      TemplateType templateType1 = jSTypeRegistry1.getObjectIndexKey();
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(templateType1.equals((Object)templateType0));
      assertNotNull(templateType1);
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.isTemplatizedType());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isStringValueType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isInterface());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.hasCachedValues());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertTrue(templateType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertEquals("IOBJECT_KEY", templateType1.getReferenceName());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isConstructor());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(templateType1, templateType0);
      
      TemplateType templateType2 = jSTypeRegistry1.getAsyncIterableTemplate();
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(templateType2.equals((Object)templateType0));
      assertFalse(templateType2.equals((Object)templateType1));
      assertNotNull(templateType2);
      assertTrue(templateType2.isTemplateType());
      assertFalse(templateType2.isBooleanValueType());
      assertFalse(templateType2.isSymbolValueType());
      assertFalse(templateType2.isNullType());
      assertTrue(templateType2.isResolved());
      assertFalse(templateType2.isStructuralInterface());
      assertFalse(templateType2.isNativeObjectType());
      assertTrue(templateType2.hasAnyTemplateTypesInternal());
      assertFalse(templateType2.hasCachedValues());
      assertFalse(templateType2.isOrdinaryFunction());
      assertFalse(templateType2.isRecordType());
      assertFalse(templateType2.isConstructor());
      assertFalse(templateType2.isEnumType());
      assertEquals("VALUE", templateType2.getReferenceName());
      assertFalse(templateType2.isStringValueType());
      assertEquals(0, templateType2.getTemplateParamCount());
      assertFalse(templateType2.isNoObjectType());
      assertFalse(templateType2.isInterface());
      assertFalse(templateType2.isAllType());
      assertFalse(templateType2.isVoidType());
      assertFalse(templateType2.isBigIntValueType());
      assertFalse(templateType2.isNoType());
      assertFalse(templateType2.isRawTypeOfTemplatizedType());
      assertFalse(templateType2.isUnsuccessfullyResolved());
      assertTrue(templateType2.isObject());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertFalse(templateType2.isUnionType());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isNominalConstructorOrInterface());
      assertFalse(templateType2.isNamedType());
      assertFalse(templateType2.isTypeTransformation());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertFalse(templateType2.isNoResolvedType());
      assertFalse(templateType2.isCheckedUnknownType());
      assertFalse(templateType2.isLiteralObject());
      assertFalse(templateType2.isEnumElementType());
      assertFalse(templateType2.isTemplatizedType());
      assertFalse(templateType2.isFunctionType());
      assertTrue(templateType2.isSuccessfullyResolved());
      assertFalse(templateType2.loosenTypecheckingDueToForwardReferencedSupertype());
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(templateType2, templateType0);
      assertNotSame(templateType2, templateType1);
      
      Node node0 = Node.newNumber(0.7);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isBreak());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNE());
      assertFalse(node0.hasParent());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isVoid());
      assertEquals(Token.NUMBER, node0.getToken());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSpread());
      assertFalse(node0.isSuper());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isNumber());
      assertFalse(node0.isComma());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isRoot());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isAwait());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isEQ());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertEquals(0.7, node0.getDouble(), 0.01);
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isForIn());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSub());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isYield());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isConst());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isIn());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isTry());
      assertFalse(node0.isRest());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isCase());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isForOf());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isScript());
      
      TemplateType templateType3 = jSTypeRegistry0.createTemplateTypeWithTransformation("EwFl}v&W$^H-9pS<)", node0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(templateType3.equals((Object)templateType1));
      assertFalse(templateType3.equals((Object)templateType0));
      assertFalse(templateType3.equals((Object)templateType2));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateType3);
      assertFalse(node0.isBreak());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isObjectRest());
      assertFalse(node0.isNE());
      assertFalse(node0.hasParent());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isVoid());
      assertEquals(Token.NUMBER, node0.getToken());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSpread());
      assertFalse(node0.isSuper());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isNumber());
      assertFalse(node0.isComma());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isRoot());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isAwait());
      assertFalse(node0.isLet());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isEQ());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertEquals(0.7, node0.getDouble(), 0.01);
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isForIn());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSub());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isYield());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isTaggedTemplateLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isConst());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isIn());
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isExponent());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isExport());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isClass());
      assertFalse(node0.isImport());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isRecordType());
      assertFalse(node0.isTry());
      assertFalse(node0.isRest());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNeg());
      assertFalse(node0.isCallSignature());
      assertFalse(node0.isCase());
      assertFalse(node0.isMemberFieldDef());
      assertFalse(node0.isForOf());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isScript());
      assertFalse(templateType3.isNoResolvedType());
      assertFalse(templateType3.isUnionType());
      assertFalse(templateType3.isNumberValueType());
      assertFalse(templateType3.isStringValueType());
      assertFalse(templateType3.isConstructor());
      assertTrue(templateType3.isObject());
      assertFalse(templateType3.isOrdinaryFunction());
      assertTrue(templateType3.hasAnyTemplateTypesInternal());
      assertFalse(templateType3.isNamedType());
      assertFalse(templateType3.isStructuralInterface());
      assertFalse(templateType3.isUnsuccessfullyResolved());
      assertFalse(templateType3.isNullType());
      assertFalse(templateType3.isRawTypeOfTemplatizedType());
      assertFalse(templateType3.isTemplatizedType());
      assertTrue(templateType3.isTemplateType());
      assertFalse(templateType3.isLiteralObject());
      assertFalse(templateType3.isEnumElementType());
      assertFalse(templateType3.isFunctionType());
      assertTrue(templateType3.isSuccessfullyResolved());
      assertFalse(templateType3.loosenTypecheckingDueToForwardReferencedSupertype());
      assertEquals(BooleanLiteralSet.TRUE, templateType3.getPossibleToBooleanOutcomes());
      assertFalse(templateType3.hasCachedValues());
      assertEquals("EwFl}v&W$^H-9pS<)", templateType3.getReferenceName());
      assertFalse(templateType3.isCheckedUnknownType());
      assertFalse(templateType3.isRecordType());
      assertFalse(templateType3.isBooleanValueType());
      assertFalse(templateType3.isSymbolValueType());
      assertTrue(templateType3.isResolved());
      assertFalse(templateType3.isNativeObjectType());
      assertFalse(templateType3.isInterface());
      assertFalse(templateType3.isFunctionPrototypeType());
      assertFalse(templateType3.isNominalConstructorOrInterface());
      assertTrue(templateType3.isTypeTransformation());
      assertFalse(templateType3.isEnumType());
      assertEquals(0, templateType3.getTemplateParamCount());
      assertFalse(templateType3.isNoObjectType());
      assertFalse(templateType3.isAllType());
      assertFalse(templateType3.isNoType());
      assertFalse(templateType3.isBigIntValueType());
      assertFalse(templateType3.isVoidType());
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(templateType3, templateType1);
      assertNotSame(templateType3, templateType0);
      assertNotSame(templateType3, templateType2);
      
      // Undeclared exception!
      try { 
        TemplateTypeMap.createEmpty(jSTypeRegistry1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      boolean boolean0 = treeSet0.add("then");
      assertTrue(boolean0);
      assertTrue(treeSet0.contains("then"));
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, treeSet0);
      assertNotNull(jSTypeRegistry0);
      assertTrue(treeSet0.contains("then"));
      
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      assertNotNull(templateType0);
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(treeSet0.contains("then"));
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      assertNotNull(templatizedType0);
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isRecordType());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isNoType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isVoidType());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isNamedType());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isFunctionType());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isEnumElementType());
      assertTrue(templatizedType0.isTemplateType());
      assertTrue(treeSet0.contains("then"));
      
      Token token0 = Token.MEMBER_FIELD_DEF;
      Node node0 = new Node(token0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isForOf());
      assertFalse(node0.isYield());
      assertFalse(node0.isHook());
      assertFalse(node0.isRecordType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSub());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isScript());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isSpread());
      assertFalse(node0.isNeg());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(Token.MEMBER_FIELD_DEF, node0.getToken());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isThis());
      assertFalse(node0.isAwait());
      assertFalse(node0.isTry());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isCast());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isExponent());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isExport());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isRoot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSuper());
      assertFalse(node0.isObjectRest());
      assertTrue(node0.isMemberFieldDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasParent());
      assertFalse(node0.isForIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isEQ());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      
      TemplateType templateType1 = jSTypeRegistry0.createTemplateTypeWithTransformation("then", node0);
      assertFalse(templateType1.equals((Object)templateType0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(templateType1);
      assertFalse(node0.isImportSpec());
      assertFalse(node0.isTemplateLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isConst());
      assertFalse(node0.isCallSignature());
      assertNull(node0.getOriginalName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignOr());
      assertFalse(node0.isDestructuringPattern());
      assertFalse(node0.isTaggedTemplateLit());
      assertFalse(node0.isForOf());
      assertFalse(node0.isYield());
      assertFalse(node0.isHook());
      assertFalse(node0.isRecordType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExportSpecs());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSub());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isExportSpec());
      assertFalse(node0.isIndexSignature());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isImportSpecs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isStringLit());
      assertFalse(node0.isRest());
      assertFalse(node0.isArrayPattern());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isComputedProp());
      assertFalse(node0.isAssignExponent());
      assertFalse(node0.isMemberFunctionDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isDefaultValue());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectPattern());
      assertFalse(node0.isScript());
      assertTrue(node0.hasZeroOrOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isSpread());
      assertFalse(node0.isNeg());
      assertFalse(node0.isImport());
      assertFalse(node0.isClass());
      assertFalse(node0.isComputedFieldDef());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptChainGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(Token.MEMBER_FIELD_DEF, node0.getToken());
      assertFalse(node0.hasTwoChildren());
      assertFalse(node0.isSHNE());
      assertFalse(node0.isVanillaFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInterfaceMembers());
      assertFalse(node0.isBigInt());
      assertFalse(node0.isImportStar());
      assertFalse(node0.isThis());
      assertFalse(node0.isAwait());
      assertFalse(node0.isTry());
      assertFalse(node0.isMemberVariableDef());
      assertFalse(node0.isOptChainGetProp());
      assertFalse(node0.isImportMeta());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSHEQ());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isClassMembers());
      assertFalse(node0.isTemplateLitString());
      assertFalse(node0.isCast());
      assertFalse(node0.isBitNot());
      assertFalse(node0.isForAwaitOf());
      assertFalse(node0.isAssignNullishCoalesce());
      assertFalse(node0.isDestructuringLhs());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isOptChainCall());
      assertFalse(node0.isExponent());
      assertFalse(node0.isAssignAnd());
      assertFalse(node0.isExport());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTemplateLitSub());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNormalBlock());
      assertFalse(node0.isRoot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSuper());
      assertFalse(node0.isObjectRest());
      assertTrue(node0.isMemberFieldDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasParent());
      assertFalse(node0.isForIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNullishCoalesce());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isEQ());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isModuleBody());
      assertFalse(node0.isDo());
      assertFalse(node0.isLet());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isNativeObjectType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isOrdinaryFunction());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertFalse(templateType1.isAllType());
      assertEquals("then", templateType1.getReferenceName());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isBigIntValueType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isEnumType());
      assertTrue(templateType1.isTypeTransformation());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isResolved());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertTrue(treeSet0.contains("then"));
      assertNotSame(templateType1, templateType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isLiteralObject());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isAbstract());
      assertNull(noResolvedType0.getGoogModuleId());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(treeSet0.contains("then"));
      
      FunctionType functionType0 = templatizedType0.getSuperClassConstructor();
      assertFalse(templateType0.equals((Object)templateType1));
      assertNull(functionType0);
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertEquals("VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNoType());
      assertFalse(templateType0.isInterface());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isStructuralInterface());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertFalse(templatizedType0.hasCachedValues());
      assertFalse(templatizedType0.isRecordType());
      assertFalse(templatizedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, templatizedType0.getPossibleToBooleanOutcomes());
      assertFalse(templatizedType0.isNominalConstructorOrInterface());
      assertTrue(templatizedType0.isResolved());
      assertFalse(templatizedType0.isNativeObjectType());
      assertFalse(templatizedType0.isAllType());
      assertFalse(templatizedType0.isNoObjectType());
      assertFalse(templatizedType0.isBooleanValueType());
      assertFalse(templatizedType0.isNumberValueType());
      assertFalse(templatizedType0.isUnionType());
      assertFalse(templatizedType0.isInterface());
      assertFalse(templatizedType0.isNoType());
      assertFalse(templatizedType0.isBigIntValueType());
      assertEquals(0, templatizedType0.getTemplateParamCount());
      assertFalse(templatizedType0.isConstructor());
      assertFalse(templatizedType0.isVoidType());
      assertTrue(templatizedType0.isTemplatizedType());
      assertFalse(templatizedType0.isEnumType());
      assertFalse(templatizedType0.isNoResolvedType());
      assertFalse(templatizedType0.isStringValueType());
      assertFalse(templatizedType0.isStructuralInterface());
      assertFalse(templatizedType0.isNamedType());
      assertTrue(templatizedType0.isObject());
      assertFalse(templatizedType0.isOrdinaryFunction());
      assertFalse(templatizedType0.isRawTypeOfTemplatizedType());
      assertFalse(templatizedType0.isSymbolValueType());
      assertFalse(templatizedType0.isNullType());
      assertFalse(templatizedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templatizedType0.isUnsuccessfullyResolved());
      assertFalse(templatizedType0.isLiteralObject());
      assertFalse(templatizedType0.isFunctionType());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      assertFalse(templatizedType0.isEnumElementType());
      assertTrue(templatizedType0.isTemplateType());
      assertTrue(treeSet0.contains("then"));
      assertNotSame(templateType0, templateType1);
      
      ImmutableList<JSType> immutableList0 = noResolvedType0.getTemplateTypes();
      assertNull(immutableList0);
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNamedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertTrue(noResolvedType0.matchesSymbolContext());
      assertTrue(noResolvedType0.isVoidable());
      assertFalse(noResolvedType0.isNominalConstructorOrInterface());
      assertTrue(noResolvedType0.isNativeObjectType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isUnsuccessfullyResolved());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isLiteralObject());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isSuccessfullyResolved());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isTemplatizedType());
      assertEquals(0, noResolvedType0.getTemplateParamCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isBigIntValueType());
      assertFalse(noResolvedType0.isAbstract());
      assertNull(noResolvedType0.getGoogModuleId());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isStructuralInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAnonymous());
      assertFalse(noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getClosurePrimitive());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isSymbolValueType());
      assertFalse(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isRawTypeOfTemplatizedType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(treeSet0.contains("then"));
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createFunctionTypeWithInstanceType(templateType0, templatizedType0, (List<JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      assertNotNull(errorReporter0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("IOBJECT_VALUE");
      assertNotNull(templateType0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      TypeStringBuilder typeStringBuilder0 = new TypeStringBuilder(false);
      assertNotNull(typeStringBuilder0);
      
      templateType0.appendTo(typeStringBuilder0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      TemplateType templateType1 = (TemplateType)jSTypeRegistry0.findCommonSuperObject(templateType0, templateType0);
      assertNotNull(templateType1);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(templateType0.isNoType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNoObjectType());
      assertFalse(templateType0.isNamedType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNoResolvedType());
      assertFalse(templateType0.isUnsuccessfullyResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertEquals("IOBJECT_VALUE", templateType0.getReferenceName());
      assertFalse(templateType0.isOrdinaryFunction());
      assertFalse(templateType0.isTypeTransformation());
      assertFalse(templateType0.isTemplatizedType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isSuccessfullyResolved());
      assertFalse(templateType0.isRawTypeOfTemplatizedType());
      assertFalse(templateType0.isLiteralObject());
      assertFalse(templateType0.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isSymbolValueType());
      assertFalse(templateType0.isStructuralInterface());
      assertTrue(templateType0.isResolved());
      assertFalse(templateType0.isNativeObjectType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNominalConstructorOrInterface());
      assertFalse(templateType0.isConstructor());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isAllType());
      assertFalse(templateType0.isInterface());
      assertEquals(0, templateType0.getTemplateParamCount());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBigIntValueType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isAllType());
      assertFalse(templateType1.loosenTypecheckingDueToForwardReferencedSupertype());
      assertFalse(templateType1.isInterface());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isTemplateType());
      assertEquals(0, templateType1.getTemplateParamCount());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isCheckedUnknownType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isConstructor());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isNativeObjectType());
      assertEquals("IOBJECT_VALUE", templateType1.getReferenceName());
      assertFalse(templateType1.isSymbolValueType());
      assertFalse(templateType1.isBigIntValueType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isTypeTransformation());
      assertFalse(templateType1.isNoType());
      assertFalse(templateType1.isNoObjectType());
      assertFalse(templateType1.isNamedType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNoResolvedType());
      assertFalse(templateType1.isUnsuccessfullyResolved());
      assertFalse(templateType1.isRawTypeOfTemplatizedType());
      assertFalse(templateType1.isVoidType());
      assertTrue(templateType1.isSuccessfullyResolved());
      assertFalse(templateType1.isLiteralObject());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isTemplatizedType());
      assertFalse(templateType1.isStructuralInterface());
      assertFalse(templateType1.isNominalConstructorOrInterface());
      assertFalse(templateType1.isOrdinaryFunction());
      assertTrue(templateType1.hasAnyTemplateTypesInternal());
      assertTrue(templateType1.isResolved());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      
      ImmutableList<TemplateType> immutableList0 = jSTypeRegistry1.maybeGetTemplateTypesOfBuiltin("");
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNull(immutableList0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("IOBJECT_VALUE"));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = (JSType) templateType1;
      NoType noType0 = null;
      try {
        noType0 = new NoType(jSTypeRegistry1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      boolean boolean0 = jSTypeRegistry0.isForwardDeclaredType("");
      assertFalse(boolean0);
      
      JSType[] jSTypeArray0 = new JSType[7];
      NoType noType0 = null;
      try {
        noType0 = new NoType(jSTypeRegistry0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.identifyNonNullableName((StaticScope) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.PROMISE_FUNCTION_TYPE;
      jSTypeRegistry0.getNativeType(jSTypeNative0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.identifyNonNullableName((StaticScope) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, set0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getOwnPropertyDefSite("B");
      jSTypeRegistry0.getIteratorValueTemplate();
      // Undeclared exception!
      try { 
        jSTypeRegistry0.getReadableJSTypeName((Node) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      ObjectType objectType0 = jSTypeRegistry0.findCommonSuperObject(templateType0, templateType0);
      jSTypeRegistry0.maybeGetTemplateTypesOfBuiltin("\"_f");
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType(objectType0, (Map<TemplateType, JSType>) hashMap0);
      boolean boolean0 = templatizedType0.canBeCalled();
      assertTrue(boolean0);
      
      objectType0.restrictByNotNullOrUndefined();
      jSTypeRegistry0.resetImplicitPrototype(templatizedType0, templatizedType0);
      jSTypeRegistry0.createNullableType(templatizedType0);
      jSTypeRegistry0.getGeneratorValueTemplate();
      jSTypeRegistry0.createObjectType("", templatizedType0);
      assertEquals("", objectType0.getReferenceName());
      assertEquals(0, templatizedType0.getTemplateParamCount());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getGeneratorValueTemplate();
      TemplateType templateType1 = new TemplateType(jSTypeRegistry0, "IOBJECT_VALUE");
      ImmutableList.of(templateType0, templateType0, templateType0, templateType0, templateType0, templateType0, templateType0, templateType1, templateType1, templateType1);
      Token token0 = Token.DESTRUCTURING_LHS;
      // Undeclared exception!
      try { 
        Node.newNumber((-1826.082404163379));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1826.082404163379
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = null;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createOptionalNullableType((JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      Node node0 = Node.newString("UNUSED_RETURN_T");
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, (String) null);
      JSTypeExpression jSTypeExpression1 = JSTypeExpression.makeOptionalArg(jSTypeExpression0);
      ImmutableSet<String> immutableSet0 = jSTypeExpression1.getRecordPropertyNames();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, immutableSet0);
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      TemplateTypeReplacer templateTypeReplacer0 = TemplateTypeReplacer.forInference(jSTypeRegistry0, hashMap0);
      JSType jSType0 = templateTypeReplacer0.caseNumberType();
      jSTypeRegistry0.registerPropertyOnType((String) null, jSType0);
      jSTypeRegistry0.createTemplateType((String) null);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap1 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap1, false);
      jSTypeRegistry0.registerDroppedPropertiesInUnion(recordType0, recordType0);
      JSType jSType1 = jSTypeRegistry0.createOptionalNullableType(recordType0);
      assertFalse(jSType1.isRecordType());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getOwnPropertyDefSite("IOBJECT_VALUE");
      jSTypeRegistry0.getObjectIndexKey();
      // Undeclared exception!
      try { 
        jSTypeRegistry0.getReadableJSTypeName((Node) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("IOBJECT_VALUE");
      TypeStringBuilder typeStringBuilder0 = new TypeStringBuilder(false);
      templateType0.appendTo(typeStringBuilder0);
      ObjectType objectType0 = jSTypeRegistry0.findCommonSuperObject(templateType0, templateType0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      jSTypeRegistry1.maybeGetTemplateTypesOfBuiltin("g");
      jSTypeRegistry0.createNullableType(objectType0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Node node0 = Node.newBigInt(bigInteger0);
      TemplateType templateType1 = jSTypeRegistry1.createTemplateTypeWithTransformation("No %s placeholder in module wrapper: '", node0);
      assertTrue(templateType1.isSuccessfullyResolved());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, set0);
      jSTypeRegistry0.getEachReferenceTypeWithProperty("Z5B");
      jSTypeRegistry0.getEmptyTemplateTypeMap();
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getOwnPropertyDefSite("Z5B");
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      assertFalse(templateType0.isCheckedUnknownType());
      
      ObjectType objectType0 = jSTypeRegistry0.createObjectType("com.google.javascript.rhino.QualifiedName$1", noResolvedType0);
      assertTrue(objectType0.isSuccessfullyResolved());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      PrototypeObjectType.Builder<FunctionType.Builder> prototypeObjectType_Builder0 = new PrototypeObjectType.Builder<FunctionType.Builder>(jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = prototypeObjectType_Builder0.registry;
      TemplateType templateType1 = jSTypeRegistry1.getObjectIndexKey();
      TemplateType templateType2 = jSTypeRegistry0.getIteratorValueTemplate();
      Node node0 = Node.newNumber(0.7);
      TemplateType templateType3 = jSTypeRegistry1.createTemplateTypeWithTransformation("IOBJECT_VALUE", node0);
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of(templateType0, templateType1, templateType1, templateType2, templateType1, templateType3, templateType1, templateType3, templateType0);
      jSTypeRegistry0.createUnionType((List<? extends JSType>) immutableList0);
      NoType noType0 = null;
      try {
        noType0 = new NoType(jSTypeRegistry0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      jSTypeRegistry0.getAsyncIterableTemplate();
      jSTypeRegistry0.getIterableTemplate();
      jSTypeRegistry0.isForwardDeclaredType(">d2v@(");
      HashMap<TemplateType, TemplateType> hashMap0 = new HashMap<TemplateType, TemplateType>();
      jSTypeRegistry0.getIteratorValueTemplate();
      JSTypeRegistry.PropDefinitionKind[] jSTypeRegistry_PropDefinitionKindArray0 = JSTypeRegistry.PropDefinitionKind.values();
      assertEquals(4, jSTypeRegistry_PropDefinitionKindArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.I_ARRAY_LIKE_FUNCTION_TYPE;
      jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      jSTypeRegistry0.getIterableTemplate();
      RecordType recordType0 = null;
      try {
        recordType0 = new RecordType(jSTypeRegistry0, (Map<String, RecordTypeBuilder.RecordProperty>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.RecordType", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, set0);
      jSTypeRegistry0.getEachReferenceTypeWithProperty("B");
      jSTypeRegistry0.getEmptyTemplateTypeMap();
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getOwnPropertyDefSite("B");
      jSTypeRegistry0.maybeGetTemplateTypesOfBuiltin("AsyncGenerator");
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createTypeFromCommentNode((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      jSTypeRegistry0.createTemplateType("%qh?XuEDVw");
      Token token0 = Token.BLOCK;
      Node node0 = new Node(token0);
      Token token1 = Token.STAR;
      Node node1 = new Node(token1, node0);
      JSType jSType0 = jSTypeRegistry0.createTypeFromCommentNode(node1);
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, treeSet0);
      JSType jSType1 = jSTypeRegistry1.createNullableType(jSType0);
      assertFalse(jSType1.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      Node node0 = null;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createTypeFromCommentNode((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.getReadableTypeNameNoDeref((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      templatizedType0.getSuperClassConstructor();
      jSTypeRegistry0.maybeGetTemplateTypesOfBuiltin("AsyncGenerator");
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0);
      noResolvedType0.getSource();
      // Undeclared exception!
      try { 
        jSTypeRegistry1.getReadableTypeNameNoDeref((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      String string0 = "wP";
      Node.newTemplateLitString("missing name %s", "wP");
      jSTypeRegistry0.createTemplateType(".*Dt5s&1?%wLxs%Y~");
      Token token0 = Token.CONST;
      HashSet<Color> hashSet0 = new HashSet<Color>(4095, 1775.58F);
      // Undeclared exception!
      try { 
        Color.createUnion(hashSet0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.colors.Color", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("IOBJECT_VALUE");
      TypeStringBuilder typeStringBuilder0 = new TypeStringBuilder(false);
      templateType0.appendTo(typeStringBuilder0);
      ObjectType objectType0 = jSTypeRegistry0.findCommonSuperObject(templateType0, templateType0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      jSTypeRegistry1.maybeGetTemplateTypesOfBuiltin("");
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = (JSType) objectType0;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createFunctionTypeWithVarArgs(objectType0, jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null JSType
         //
         verifyException("com.google.javascript.rhino.jstype.AutoValue_FunctionType_Parameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
      ObjectType objectType0 = jSTypeRegistry0.findCommonSuperObject(templateType0, templateType0);
      jSTypeRegistry0.maybeGetTemplateTypesOfBuiltin("\"_f");
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createFunctionTypeWithVarArgs(objectType0, (JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, (Set<String>) null);
      FunctionType.Builder functionType_Builder0 = FunctionType.builder(jSTypeRegistry1);
      FunctionType functionType0 = new FunctionType(functionType_Builder0);
      JSType[] jSTypeArray0 = new JSType[7];
      jSTypeArray0[0] = (JSType) functionType0;
      jSTypeArray0[1] = (JSType) functionType0;
      jSTypeArray0[2] = (JSType) functionType0;
      jSTypeArray0[3] = (JSType) functionType0;
      jSTypeArray0[4] = (JSType) functionType0;
      jSTypeArray0[5] = (JSType) functionType0;
      jSTypeArray0[6] = (JSType) functionType0;
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs(functionType0, jSTypeArray0);
      FunctionType functionType2 = jSTypeRegistry0.createFunctionType((JSType) functionType1, jSTypeArray0);
      assertTrue(functionType2.isSuccessfullyResolved());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.ALWAYS_THROWS_INSTANCE;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      TypeStringBuilder typeStringBuilder0 = new TypeStringBuilder(false);
      TemplateType templateType0 = jSTypeRegistry0.getAsyncIterableTemplate();
      HashSet<String> hashSet0 = new HashSet<String>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, hashSet0);
      templateType0.toMaybeRecordType();
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createNullableType((JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      templatizedType0.getSuperClassConstructor();
      assertFalse(templatizedType0.isCheckedUnknownType());
      
      noResolvedType0.getTemplateTypes();
      ImmutableList<TemplateType> immutableList0 = jSTypeRegistry0.maybeGetTemplateTypesOfBuiltin("AsyncGenerator");
      assertNotNull(immutableList0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0);
      ImmutableList<TemplateType> immutableList1 = jSTypeRegistry1.maybeGetTemplateTypesOfBuiltin("IOBJECT_VALUE");
      assertNull(immutableList1);
      
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(errorReporter0, treeSet0);
      JSType jSType0 = jSTypeRegistry2.createNullableType(noResolvedType0);
      assertTrue(jSType0.isSuccessfullyResolved());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      jSTypeRegistry0.maybeGetTemplateTypesOfBuiltin("f{aXNmw@");
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      unknownType0.getConstructor();
      ObjectType.cast((JSType) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createNullableType((JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      TemplateType templateType0 = jSTypeRegistry0.createTemplateType("IOBJECT_VALUE");
      ObjectType objectType0 = jSTypeRegistry0.findCommonSuperObject(templateType0, templateType0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, linkedHashSet0);
      jSTypeRegistry1.maybeGetTemplateTypesOfBuiltin("g");
      JSType jSType0 = jSTypeRegistry0.createNullableType(objectType0);
      assertTrue(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      JSType[] jSTypeArray0 = new JSType[9];
      jSTypeArray0[0] = (JSType) unknownType0;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0, (Set<String>) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry1.createTemplatizedType((ObjectType) unknownType0, jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 1
         //
         verifyException("com.google.javascript.jscomp.jarjar.com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = new LinkedHashSet<String>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, set0);
      jSTypeRegistry0.getEachReferenceTypeWithProperty("B");
      jSTypeRegistry0.getEmptyTemplateTypeMap();
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      Node node0 = noResolvedType0.getOwnPropertyDefSite("B");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, set0);
      String string0 = "Z5B";
      jSTypeRegistry0.getEachReferenceTypeWithProperty("Z5B");
      jSTypeRegistry0.getEmptyTemplateTypeMap();
      jSTypeRegistry0.getErrorReporter();
      JSTypeNative jSTypeNative0 = JSTypeNative.ASYNC_ITERATOR_ITERABLE_TYPE;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.javascript.rhino.jstype.InstanceObjectType cannot be cast to com.google.javascript.rhino.jstype.FunctionType
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      simpleErrorReporter0.error("s;oAEVd&|;C?9b#5X1", "s;oAEVd&|;C?9b#5X1", (-812), (-812));
      simpleErrorReporter0.warning("LOCALE_SELECT", "LOCALE_SELECT", (-1187), (-1187));
      simpleErrorReporter0.warning("X2=`&e,U`", "4<&y^b;", 1173, 1173);
      simpleErrorReporter0.warning("LOCALE_SELECT", "LOCALE_SELECT", 2022, (-317));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, set0);
      JSTypeNative jSTypeNative0 = JSTypeNative.BIGINT_NUMBER_OBJECT;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.javascript.rhino.jstype.UnionType cannot be cast to com.google.javascript.rhino.jstype.FunctionType
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Token token0 = Token.VOID_TYPE;
      Node node0 = new Node(token0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      jSTypeRegistry0.createTemplatizedType(objectType0, (Map<TemplateType, JSType>) hashMap0);
      jSTypeRegistry0.getIterableTemplate();
      JSTypeNative jSTypeNative1 = JSTypeNative.BIGINT_OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative1);
      assertTrue(functionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      templatizedType0.getSuperClassConstructor();
      templatizedType0.getTemplateTypes();
      assertFalse(templatizedType0.isCheckedUnknownType());
      assertTrue(templatizedType0.isSuccessfullyResolved());
      
      boolean boolean0 = jSTypeRegistry0.isForwardDeclaredType("+infinity");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, set0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getOwnPropertyDefSite("IOBJECT_VALUE");
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      assertFalse(templateType0.isCheckedUnknownType());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      templatizedType0.getSuperClassConstructor();
      noResolvedType0.getTemplateTypes();
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createFunctionTypeWithInstanceType((ObjectType) null, (JSType) null, (List<JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      treeSet0.add("then");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, treeSet0);
      TemplateType templateType0 = jSTypeRegistry0.getIteratorValueTemplate();
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) templateType0, (Map<TemplateType, JSType>) hashMap0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      templatizedType0.getSuperClassConstructor();
      noResolvedType0.getTemplateTypes();
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createFunctionTypeWithInstanceType(templateType0, templatizedType0, (List<JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      boolean boolean0 = jSTypeRegistry0.isForwardDeclaredType("`J: P`:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("\"?!", "STRINGLIT", 0, 0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.getIThenableTemplate();
      // Undeclared exception!
      try { 
        ImmutableList.copyOf((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ErrorReporter errorReporter0 = ErrorReporter.NULL_INSTANCE;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, (Set<String>) null);
  }
}

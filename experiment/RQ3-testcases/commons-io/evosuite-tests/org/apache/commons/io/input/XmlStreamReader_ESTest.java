/*
 * This file was automatically generated by EvoSuite
 * Thu May 12 08:13:42 GMT 2022
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.net.URLConnection;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.util.Enumeration;
import org.apache.commons.io.input.XmlStreamReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlStreamReader_ESTest extends XmlStreamReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "text/RKVqj|##R]M2=>l");
      try { 
        xmlStreamReader0.calculateRawEncoding("UTF-8", "5LE\b31Cz,'", "text/RKVqj|##R]M2=>l");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [UTF-8] XML guess [5LE\b31Cz,'] XML prolog [text/RKVqj|##R]M2=>l] encoding mismatch
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(sequenceInputStream0, true);
      try { 
        xmlStreamReader0.calculateHttpEncoding(" +JqM^L;v;l+Z", "ecyI:1_", "UTF-16LE", "application/xml", false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, CT-MIME [+JqM^L] CT-Enc [null] BOM [ecyI:1_] XML guess [UTF-16LE] XML prolog [application/xml], Invalid MIME
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(bufferedInputStream0, ";Kv;`3x");
      assertEquals("UTF-8", xmlStreamReader0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(sequenceInputStream0, false, "UTF-16LE");
      assertEquals("UTF-16LE", xmlStreamReader0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2034, (-294701288));
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, ">q%rEe)+esSzrv]u", true);
      assertEquals("UTF-8", xmlStreamReader0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-133), (-133));
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "text/html Ss\"hGV;1Dd\"+=Rcc");
      assertEquals("UTF-8", xmlStreamReader0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = XmlStreamReader.isTextXml("-X$z:2-G");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = XmlStreamReader.isAppXml((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = XmlStreamReader.getContentTypeMime((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = XmlStreamReader.getContentTypeMime("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "application/xml");
      xmlStreamReader0.close();
      char[] charArray0 = new char[1];
      try { 
        xmlStreamReader0.read(charArray0, 148, (-3520));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((URLConnection) null, "conn");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // conn
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(uRLConnection0, "p^3fc=1x.5Mzj");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // conn
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((InputStream) null, true, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(pipedInputStream0, false, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((InputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1912068381), 2867);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 76);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(pushbackInputStream0, false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "UTF-32LE", false, "Vao~]{{Lr)z#Fesu");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Invalid encoding, CT-MIME [UTF-32LE] CT-Enc [null] BOM [null] XML guess [null] XML prolog [null], Invalid MIME
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((InputStream) null, "~$C6Rdn0n2v", false, "name");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-133), 1679);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "US-ASCII", true, "tex/1Iko");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-133), (-133));
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "tex/1Iko", true, " b*6=jh4=[%[SvZp/I");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(pipedInputStream0, "org.a", false, "org.a");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((InputStream) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(pipedInputStream0, (String) null, false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((InputStream) null, "Vao-{Lr)z#Fsu");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-15), 703);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, (String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(pushbackInputStream0, "-<<");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)17);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(bufferedInputStream0, "appendable");
      String string0 = xmlStreamReader0.calculateRawEncoding((String) null, "text/S1Ik", "UTF-8");
      assertNotNull(string0);
      assertEquals("UTF-8", xmlStreamReader0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "text/xml");
      assertEquals("US-ASCII", xmlStreamReader0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 111, 1102);
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, (String) null, false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Invalid encoding, CT-MIME [null] CT-Enc [null] BOM [null] XML guess [null] XML prolog [null], Invalid MIME
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(dataInputStream0, "", true, "UTF-16LE");
      assertEquals("UTF-16LE", xmlStreamReader0.getDefaultEncoding());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1501, 1713);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, (String) null);
      assertEquals("UTF-8", xmlStreamReader0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(bufferedInputStream0, "UTF-32LE");
      try { 
        xmlStreamReader0.calculateHttpEncoding("application/xml-dtd", "UTF-32LE", (String) null, "application/xml-dtd", false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [UTF-32LE] XML guess [null] XML prolog [application/xml-dtd] encoding mismatch
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0);
      try { 
        xmlStreamReader0.calculateRawEncoding("UTF-32LE", "z;Ix]", "application/text/xmlUnexpected end of XML stream");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [UTF-32LE] XML guess [z;Ix]] XML prolog [application/text/xmlUnexpected end of XML stream] encoding mismatch
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "UTF-32BE");
      try { 
        xmlStreamReader0.calculateRawEncoding("UTF-32BE", "*V6AkiD?/8T", "text/htmlUTF-32BE");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [UTF-32BE] XML guess [*V6AkiD?/8T] XML prolog [text/htmlUTF-32BE] encoding mismatch
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "text/htmlUnexpected end of XML stream+xml");
      try { 
        xmlStreamReader0.calculateRawEncoding("UTF-16LE", "UTF-16LE", "EnS<cJYb({(}m");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [UTF-16LE] XML guess [UTF-16LE] XML prolog [EnS<cJYb({(}m] encoding mismatch
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)7, 500);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "hT;;ar6weBDvL.muX#");
      try { 
        xmlStreamReader0.calculateRawEncoding("UTF-16LE", "application/xml-external-parsed-entity", "q,*C");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [UTF-16LE] XML guess [application/xml-external-parsed-entity] XML prolog [q,*C] encoding mismatch
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 31, (-177));
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, false);
      try { 
        xmlStreamReader0.calculateRawEncoding("UTF-8", (String) null, "hYWn@~^j.|;/");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [UTF-8] XML guess [null] XML prolog [hYWn@~^j.|;/] encoding mismatch
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1633, 1633);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, false);
      String string0 = xmlStreamReader0.calculateRawEncoding("UTF-8", (String) null, (String) null);
      assertEquals("UTF-8", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-135), (byte) (-50));
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, false, "N#szMd[[p3w");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-128), (byte) (-128));
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, false);
      String string0 = xmlStreamReader0.calculateRawEncoding((String) null, "UTF-32LE", (String) null);
      assertEquals("UTF-8", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(sequenceInputStream0, false);
      String string0 = xmlStreamReader0.calculateHttpEncoding("9=vp*r`kgq:JcIV1", "9=vp*r`kgq:JcIV1", (String) null, " +JqM^L;v;l+Z", true);
      assertEquals(" +JqM^L;v;l+Z", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = XmlStreamReader.isTextXml("text/xml-external-parsed-entity");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = XmlStreamReader.isAppXml("application/Vao~]{{Lr)z#Fesu+xml");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = XmlStreamReader.isAppXml("application/xml-external-parsed-entity");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "br9z>LF'^9`pP<aIxu");
      try { 
        xmlStreamReader0.calculateHttpEncoding("application/xml-dtd", "application/xml-dtd", "application/xml-dtd", "br9z>LF'^9`pP<aIxu", false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding, BOM [application/xml-dtd] XML guess [application/xml-dtd] XML prolog [br9z>LF'^9`pP<aIxu] unknown BOM
         //
         verifyException("org.apache.commons.io.input.XmlStreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = XmlStreamReader.getContentTypeMime(" +JqM^L;v;l+Z");
      assertNotNull(string0);
      assertEquals("+JqM^L", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = XmlStreamReader.getContentTypeEncoding(" +JqM^L;v;l+Z");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Vao]{{Lr)z#Fesu");
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "application/text/html");
      xmlStreamReader0.close();
      assertNull(xmlStreamReader0.getDefaultEncoding());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "application/xml");
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        xmlStreamReader0.read(charArray0, 148, (-3520));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Vao~]{{Lr)z#Fesu");
      Path path0 = mockFile0.toPath();
      XmlStreamReader xmlStreamReader0 = null;
      try {
        xmlStreamReader0 = new XmlStreamReader(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "E?oeP");
      String string0 = xmlStreamReader0.getEncoding();
      assertEquals("UTF-8", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlStreamReader xmlStreamReader0 = new XmlStreamReader(byteArrayInputStream0, "E?oeP");
      xmlStreamReader0.getDefaultEncoding();
      assertEquals("UTF-8", xmlStreamReader0.getEncoding());
  }
}
